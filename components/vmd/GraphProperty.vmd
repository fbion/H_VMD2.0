{"vmdversion":"vmd2.0.7.200328","vmdlayout":"{\"components\":[{\"cid\":\"uxpanel\",\"id\":\"GraphProperty\",\"layoutConfig\":{},\"userConfig\":{\"layout\":\"fit\",\"header\":false,\"width\":320,\"height\":920,\"autoScroll\":false,\"beforerender\":\"GraphProperty_beforerender\"},\"cn\":[{\"cid\":\"tabpanel\",\"id\":\"hwTabsProperty\",\"layoutConfig\":{},\"userConfig\":{\"width\":320,\"height\":920,\"id\":\"hwTabsProperty\",\"activeTab\":0,\"Name\":\"tabsProperty\",\"tabchange\":\"hwTabsProperty_tabchange\",\"activeItem\":\"panelTabBaseProperty\"},\"cn\":[{\"cid\":\"panel\",\"id\":\"panelTabBaseProperty\",\"layoutConfig\":{},\"userConfig\":{\"title\":\"基本属性\",\"height\":878,\"id\":\"panelTabBaseProperty\",\"width\":318,\"autoScroll\":true,\"layout\":\"auto\",\"autoHeight\":false,\"border\":false},\"cn\":[{\"cid\":\"vmd.ux.BaseProperty\",\"id\":\"hwBaseProperty\",\"layoutConfig\":{},\"userConfig\":{\"height\":881,\"width\":308}}]},{\"cid\":\"panel\",\"id\":\"panelTabLayers\",\"layoutConfig\":{},\"userConfig\":{\"title\":\"图层\",\"id\":\"panelTabLayers\",\"width\":318,\"layout\":\"fit\"},\"cn\":[{\"cid\":\"vmd.ux.VerticalTabs\",\"id\":\"layermanger\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"layermanger\",\"afterrender\":\"layermanger_afterrender\",\"addClick\":\"layermanger_addClick\",\"delSeries\":\"layermanger_delSeries\"}}]}]},{\"cid\":\"vmdMenu\",\"id\":\"addMenu\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"addMenu\",\"click\":\"addMenu_click\"},\"cn\":[{\"cid\":\"vmdMenuItem\",\"id\":\"wellSymbol\",\"layoutConfig\":{},\"userConfig\":{\"text\":\"井位图层\",\"hidden\":false,\"id\":\"wellSymbol\"}},{\"cid\":\"vmdMenuItem\",\"id\":\"wellLabel\",\"layoutConfig\":{},\"userConfig\":{\"text\":\"井旁标注图层\",\"hidden\":true,\"id\":\"wellLabel\"}},{\"cid\":\"vmdMenuItem\",\"id\":\"miningIndex\",\"layoutConfig\":{},\"userConfig\":{\"text\":\"开采指标图层\",\"hidden\":false,\"id\":\"miningIndex\"}},{\"cid\":\"vmdMenuItem\",\"id\":\"wellTrace\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"wellTrace\",\"text\":\"井轨迹图层\",\"hidden\":true}},{\"cid\":\"vmdMenuItem\",\"id\":\"symbolLine\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"symbolLine\",\"text\":\"边界图层\",\"hidden\":true}},{\"cid\":\"vmdMenuItem\",\"id\":\"isoLine\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"isoLine\",\"text\":\"等值线图层\",\"hidden\":true}},{\"cid\":\"vmdMenuItem\",\"id\":\"isoArea\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"isoArea\",\"text\":\"等值区图层\",\"hidden\":true}},{\"cid\":\"vmdMenuItem\",\"id\":\"area\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"area\",\"text\":\"面积图层\",\"hidden\":true}},{\"cid\":\"vmdMenuItem\",\"id\":\"faultLine\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"faultLine\",\"text\":\"断层线图层\",\"hidden\":true}}]}]}]}","vmdevents":"var objGraph = null,\n    layers = null,\n    mychart = null;\nvar page = this;\n\nfunction setMyCharts(chart){\n    mychart = chart;\n}\n\nfunction GraphProperty_beforerender(sender) {\n    //增加模型值变化监听，通过子组件向外发送信息获得\n    xds.activePropPanel = page;\n    // scope：作用域，value：值；viewModel\n    page.on('dataValueChange', function(scope, value, viewModel, seriesIndex) {\n        //可以增加逻辑处理\n        var obj = null;\n        var changeId = null;\n        if (scope.BindValue) {\n            obj = viewModel.props.serialize && viewModel.props.serialize(mychart.tpl);\n            if (viewModel.props.series) {\n                changeId = viewModel.props.series.name;\n            } else {\n                changeId = viewModel.props.name || viewModel.props.seriesName;\n            }\n        } else if (scope === 'addLayer') {\n            obj = viewModel.serialize(mychart.tpl);\n        }\n        if (obj) {\n            //如果是图层\n            if (seriesIndex) {\n\n                // 更新模板中序列信息\n                if (obj.series) {\n                    mychart.tpl.series = obj.series\n                    for (var i = 0; i < mychart.tpl.series.length; i++) {\n                        var id = mychart.tpl.series[i].name;\n                        // 根据当前序列是否显示图例，更新图例项数组\n                        updateLegend(id, mychart.tpl.series[i].showLegend);\n                        if (changeId && changeId === id) {\n                            var s = {\n                                name: id\n                            };\n                            if (scope.BindValue === 'nameText') {\n                                console.log(layermanger.getActive())\n                                layermanger.initTabs(layers, layermanger.getActive());\n                            } else if (scope.Name === 'seriesPorperty') {\n                                s[scope.BindValue] = value;\n                                mychart.setOption({\n                                    series: [s]\n                                })\n                            } else if (scope.Name === \"seriesIsShow\") {\n                                mychart.seriesSelected[id] = value;\n                                mychart._api.dispatchAction({\n                                    type: 'takeGlobalCursor'\n                                })\n                            } else if (scope.Name === \"isOnRander\") {\n                                xds.fireEvent('componentchanged');\n                            }\n\n                        }\n                    }\n                }\n                // 色标\n                if (obj.visualMap) {\n                    mychart.tpl.visualMap = obj.visualMap;\n                    for (var i = 0; i < mychart.tpl.visualMap.length; i++) {\n                        if (changeId && changeId === mychart.tpl.visualMap[i].seriesName) {\n                            mychart.setOption({\n                                visualMap: [mychart.tpl.visualMap[i]]\n                            })\n                        }\n                    }\n                }\n                // 更新模板中seriesMapping和dataset信息\n                if (obj.seriesMapping) {\n                    mychart.tpl.seriesMapping = obj.seriesMapping;\n                }\n                // 更新模板中dataSet信息\n                if (obj.dataSet) {\n                    mychart.tpl.dataset = obj.dataSet;\n                }\n\n                if (scope === 'addLayer') {\n                    xds.fireEvent('componentchanged');\n                } else if (scope.BindValue && scope.BindValue.indexOf('dataMapping') == -1 &&\n                    scope.BindValue.indexOf('dependent') == -1) {\n                    // xds.fireEvent('componentchanged');\n                }\n            } else {\n                for (var key in obj) {\n                    mychart.tpl[key] = obj[key]\n                }\n                mychart.setOption(obj);\n            }\n        }\n    })\n}\n\n// 更新图例项\nfunction updateLegend(seriesName, ifShowLegend) {\n\n    if (!mychart.tpl.legend.data) {\n        return;\n    }\n\n    // 当前序列显示图例,\n    // ifShowLegend可能为null或undefined，因为有的序列没有这个属性，所以要判断是否为true或false\n    if (ifShowLegend == true) {\n        var bExist = false;\n        for (var i = 0; i < mychart.tpl.legend.data.length; i++) {\n            // \n            if (mychart.tpl.legend.data[i] == seriesName) {\n                // 已经存在，不再添加\n                bExist = true;\n                break;\n            }\n        }\n\n        // 如果不存在，就添加\n        if (!bExist) {\n            mychart.tpl.legend.data.push(seriesName);\n        }\n    } else if (ifShowLegend == false) { // 当前序列不显示图例,ifShowLegend可能为null或undefined，因为有的序列没有这个属性\n\n        for (var i = 0; i < mychart.tpl.legend.data.length; i++) {\n            // \n            if (mychart.tpl.legend.data[i] == seriesName) {\n                // 已经存在，就删除\n                mychart.tpl.legend.data.splice(i, 1);\n                break;\n            }\n        }\n    }\n}\n\nfunction initProperties(chart) {\n    // 动态加载数据存储结构对象\n    Ext.require([\n        'vmd.d.webchart.util.Graph',\n        'vmd.d.webchart.util.Layer'\n    ], function() {\n        mychart = chart;\n        var paramTempl = mychart.tpl;\n        objGraph = new vmd.d.webchart.util.Graph(paramTempl);\n        // 图层\n        objGraph.arrLayers = [];\n        layers = new vmd.d.webchart.util.Layer(paramTempl);\n\n        if (hwTabsProperty.getActiveTab().title === '图层') {\n            layermanger.initTabs(layers);\n        } else if (hwTabsProperty.getActiveTab().title === '基本属性') {\n            hwBaseProperty.iSetBaseProperty(objGraph);\n        }\n    })\n}\n\nfunction layermanger_afterrender(sender) {\n    // 20200310:响应代码放到Tab页的change事件中\n    // 解析到对象后，从对象中提取数据初始化属性面板\n    // var myStore = getDatasetNames();\n    // vmd.taskRunner(function() {\n    //     if (layers) return true;\n    // }, function() {\n    //     layermanger.initTabs(layers);\n    // })\n}\n\n\n//获取可视化中定义的所有数据集\nfunction getDatasetNames() {\n    var names = [];\n    var storeRoot = xds.vmd.getRootNode(\"dataset\");\n    if (storeRoot) {\n        storeRoot.eachChild(function(item) {\n            var obj = {\n                id: item.attributes && item.attributes.id || item.id,\n                name: item.attributes && item.attributes.text || item.id,\n                child: []\n            }\n            if (item.childNodes && item.childNodes.length > 0) {\n                item.childNodes.forEach(function(value, i) {\n                    obj.child.push({\n                        id: value.text,\n                        text: value.text\n                    })\n                })\n            }\n            names.push(obj)\n        }, this);\n    }\n    return names;\n}\n// 添加图层\nfunction layermanger_addClick(sender, panel, e) {\n    addMenu.showAt(e.xy);\n}\n\nfunction addMenu_click(sender, menuItem, e) {\n    var layerType = menuItem.initialConfig.id;\n    var newLayer = layers.addLayer(mychart.tpl, layerType);\n    var n = layers.allLayers.length - 1;\n    layermanger.initTabs(layers, n);\n    xds.activePropPanel.fireEvent('DataValueChange', 'addLayer', 'null', newLayer, true)\n}\n// 删除图层\nfunction layermanger_delSeries(sender, seriesId) {\n    if (seriesId) {\n        for (var i = 0; i < mychart.tpl.series.length; i++) {\n            if (mychart.tpl.series[i].name === seriesId) {\n                mychart.tpl.series.splice(i, 1);\n                i--;\n            }\n        }\n        for (var i = 0; i < mychart.tpl.seriesMapping.length; i++) {\n            if (mychart.tpl.seriesMapping[i].seriesName === seriesId) {\n                mychart.tpl.seriesMapping.splice(i, 1);\n                i--;\n            }\n        }\n        if (mychart.tpl.visualMap) {\n            for (var i = 0; i < mychart.tpl.visualMap.length; i++) {\n                if (mychart.tpl.visualMap[i].seriesName === seriesId) {\n                    mychart.tpl.visualMap.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n        layers.delLayer(seriesId)\n        layermanger.initTabs(layers);\n        xds.fireEvent('componentchanged');\n    }\n\n}\n\nfunction hwTabsProperty_tabchange(sender, tab) {\n    if (tab.title === '图层') {\n        if (layers) {\n            layermanger.initTabs(layers);\n        }\n    } else if (tab.title === '基本属性') {\n        if (objGraph) {\n            hwBaseProperty.iSetBaseProperty(objGraph);\n        }\n    }\n}","vmdcss":"","vmdprops":"\"\"","type":"ux","vmdcmpdeps":[],"vmdevents_controller":"","vmdinterface":"{\"components\":[{\"cid\":\"vmduxprops\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmduxmethods\",\"id\":\"方法\",\"layoutConfig\":{},\"userConfig\":{},\"cn\":[{\"cid\":\"uxmethod\",\"id\":\"init\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"init\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"属性面板的初始化方法\",\"uxcid\":\"\",\"params\":\"chart\",\"code\":\"//直接填写方法内容\\ninitProperties(chart);\",\"returnType\":\"\"}},{\"cid\":\"uxmethod\",\"id\":\"setMyCharts\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"setMyCharts\",\"params\":\"chart\",\"desc\":\"\",\"isPublic\":\"on\",\"code\":\"//直接填写方法内容\\nsetMyCharts(chart)\",\"returnType\":\"\"}}]},{\"cid\":\"vmduxevents\",\"id\":\"事件\",\"layoutConfig\":{},\"userConfig\":{}}]}","vmdresource":"{\"components\":[{\"cid\":\"vmdrescsss\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdresjss\",\"layoutConfig\":{},\"userConfig\":{},\"cn\":[{\"cid\":\"resjs\",\"id\":\"controller.js\",\"layoutConfig\":{},\"userConfig\":{}}]},{\"cid\":\"vmdresimgs\",\"layoutConfig\":{},\"userConfig\":{}}]}"}