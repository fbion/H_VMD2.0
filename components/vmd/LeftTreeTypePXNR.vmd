{"vmdversion":"2.0.4.190627","vmdlayout":"{\"components\":[{\"cid\":\"uxpanel\",\"id\":\"LeftTreeTypePXNR\",\"layoutConfig\":{},\"userConfig\":{\"layout\":\"border\",\"header\":false,\"width\":247,\"height\":275,\"beforerender\":\"LeftTreeTypePXNR_beforerender\",\"disabled\":false,\"autoHeight\":false,\"unstyled\":false,\"html\":\"<div>控件属性设为隐藏；调用方法:createTree(divid,type)</div>\"}}]}","vmdevents":"String.prototype.trimEnd = function(trimStr) {\n    if (!trimStr) {\n        return this;\n    }\n    var temp = this;\n    while (true) {\n        if (temp.substr(temp.length - trimStr.length, trimStr.length) != trimStr) {\n            break;\n        }\n        temp = temp.substr(0, temp.length - trimStr.length);\n    }\n    return temp;\n}\n\nvar g_firstParentID = \"\";\n\n//文件夹名称录入框\nExt.MyFordWin = Ext.extend(Ext.Window, {\n    xtype: \"window\",\n    title: \"输入分类名称\",\n    width: 300,\n    height: 150,\n    layout: \"form\",\n    bodyStyle: 'padding:15px',\n    labelAlign: \"left\",\n    labelWidth: 40,\n    modal: true,\n    constructor: function(callback, name) {\n        this.valueName = name;\n        this.callback = callback;\n        this.callParent();\n    },\n    initComponent: function() {\n        var me = this;\n        this.fbar = [{\n            text: \"确定\",\n            handler: function() {\n                me.callback(Ext.getCmp('filename').getValue(), function() {\n                    me.close();\n                });\n            }\n        }, {\n            text: \"取消\",\n            handler: function() {\n                me.close();\n            }\n        }];\n        this.items = [{\n            id: 'filename',\n            xtype: \"textfield\",\n            fieldLabel: \"名称\",\n            anchor: \"100%\",\n            value: this.valueName\n        }]\n        Ext.MyFordWin.superclass.initComponent.call(this);\n    }\n});\n\nfunction LeftTreeTypePXNR_beforerender(sender) {\n    var hwToken = vmd.getUrlParam('hwToken');\n    if (hwToken) {\n        vmd.Cookie.set('hwToken', hwToken);\n    }\n}\n\nvar treeObject;\n\n// 获取模块／分类信息\nfunction changeData(hwTree, _type, divid, func) {\n    treeObject = hwTree;\n    var mytree = treeObject;\n    var firstNode = \"\";\n    mytree.deleteChildItems(0);\n    mytree.loadJSONObject({\n        id: 0,\n        text: \"分类\",\n        item: []\n    });\n    mytree.itemObj = {};\n    mytree.newnode = false;\n\n    if (_type != '') {\n        //进度条\n        var myMask = new Ext.LoadMask(Ext.getCmp(divid).el, {\n            msg: \"数据加载中,请稍后...\",\n            msgCls: 'z-index:10000;'\n        });\n\n        myMask.show();\n\n        var _params = {\n            class_system: _type\n        };\n        hwDas.get({\n            host: vmd.workspace.dataServiceIp,\n            url: 'rypx/classsys/classtree'\n        }, {}, _params, function(result) {\n            var datajson = result.data[0].datas;\n            //datajson=[{id:\"dzjs\",name:\"js\",pid:0,xh:1}]\n            var nodeList = datajson.filter(function(elem) {\n                return elem.pid === \"0\";\n            });\n            var treeDataJson = [];\n            for (var i = 0; i < nodeList.length; i++) {\n                g_firstParentID = nodeList[i].id;\n                mytree.insertNewChild(0, nodeList[i].id, nodeList[i].name);\n                SetTreeNodeImage2(mytree, nodeList[i].id, \"floder\");\n                mytree.closeItem(nodeList[i].id);\n                var treenode = mytree.item(nodeList[i].id);\n                treenode.path = \"/\" + _type + \"/\" + nodeList[i].id;\n                treenode.class_system = _type;\n                treenode.pid = nodeList[i].pid;\n                treenode.lvl = nodeList[i].lvl;\n                if (treenode) {\n                    treenode.isFord = true;\n                    treenode.loadChild = false;\n                    treenode.isProject = false;\n                }\n                mytree.itemObj[nodeList[i].id] = treenode;\n\n                var _find = datajson.filter(function(elem) {\n                    return elem.pid === nodeList[i].id;\n                });\n                if (_find.length > 0) {\n                    LoadTreeData(mytree, nodeList[i].id, datajson, _find, _type, 1);\n                }\n            }\n\n            bCategoryFlag = true;\n            bInfoFlag = true;\n            if (bCategoryFlag && bInfoFlag) {\n                myMask.hide();\n            }\n\n            if (func != null && func != undefined) {\n                func();\n            }\n        }, function(err) {\n            bCategoryFlag = true;\n            bInfoFlag = true;\n            if (bCategoryFlag && bInfoFlag) {\n                myMask.hide();\n            }\n            Ext.Msg.alert(\"提示\", \"获取树分类信息失败\", function() {})\n        });\n    }\n\n\n    //绑定右键菜单\n    var menu = new dhtmlXMenuObject();\n    menu.renderAsContextMenu();\n    menu.attachEvent(\"onClick\", onMenuClick);\n    menu.addNewChild(menu.topId, 1, \"newFord\", \"添加同级分类\", false);\n    menu.addNewChild(menu.topId, 2, \"newMode\", \"添加下级分类\", false);\n    menu.addNewChild(menu.topId, 3, \"moveUp\", \"上移\", false);\n    menu.addNewChild(menu.topId, 4, \"moveDown\", \"下移\", false);\n    menu.addNewChild(menu.topId, 5, \"edit\", \"编辑\", false);\n    menu.addNewChild(menu.topId, 6, \"delete\", \"删除\", false);\n    mytree.enableDragAndDrop(\"temporary_disabled\");\n\n    mytree.enableContextMenu(menu);\n\n    mytree.attachEvent(\"onBeforeContextMenu\", function(itemId) {\n        var mytree = treeObject;\n        var selId = mytree.getSelectedItemId();\n        var selnode = mytree.itemObj[selId];\n        var index = treeObject.getIndexById(selId); //所在索引值\n\n        var pid = treeObject.getParentId(selId); //父节点\n        var hasChild = treeObject.hasChildren(pid) - 1; //同级个数\n        // console.log(selnode.lvl);\n         menu.hideItem('delete');\n         menu.hideItem('newMode');\n        if (selnode.lvl == 4) {\n            menu.addNewChild(menu.topId, 2, \"newMode\", \"添加下级分类\", true);\n        } else {\n          menu.addNewChild(menu.topId, 2, \"newMode\", \"添加下级分类\", false);\n        }\n        console.log(menu);\n        if (index === 0) {\n            menu.hideItem('moveUp');\n        } else if (index > 0) {\n            menu.showItem('moveUp');\n        }\n\n        if (hasChild > index) {\n            menu.showItem('moveDown');\n        } else {\n            menu.hideItem('moveDown');\n        }\n        if (selnode.lvl == 1||selnode.lvl == 2) {\n             menu.addNewChild(menu.topId, 6, \"delete\", \"删除\", true);\n        }  else {\n             menu.addNewChild(menu.topId, 6, \"delete\", \"删除\", false); \n        }\n        return true\n    })\n\n    //绑定左键事件\n    mytree.attachEvent('onClick', function(id) {\n        //var level = treeObject.getLevel(id);\n        //var index = treeObject.getIndexById(id);\n        //var pid = treeObject.getParentId(id);//父节点\n        //var hasChild = treeObject.hasChildren(pid);\n        //var hasChild = treeObject.hasChildren(id);\n        //var nid = treeObject.getItemIdByIndex(index + 1);\n        //alert(\"hasChild:\" + hasChild);\n        var _text = treeObject.getItemText(id);\n        LeftTreeTypePXNR.fireEvent('nodeClick', treeObject, id, _text)\n    });\n\n    //绑定右键事件 设置右键选中节点\n    mytree.attachEvent('onRightClick', function(id) {\n        //panel下的右键取消\n        Ext.getCmp('p_menu') && Ext.getCmp('p_menu').hide();\n        mytree.selectItem(id);\n        typeTree_nodeClick(mytree, id)\n    });\n\n    //绑定展开事件\n    mytree.attachEvent('onOpenEnd', function(id, state) {\n        typeTree_onOpenEnd(mytree, id)\n    });\n}\n\n\n// 获取单位信息\nfunction changeDataEx(hwTree, _type, divid, fun) {\n    treeObject = hwTree;\n    var mytree = treeObject;\n    var firstNode = \"\";\n    mytree.deleteChildItems(0);\n    mytree.loadJSONObject({\n        id: 0,\n        text: \"单位信息\",\n        item: []\n    });\n    mytree.itemObj = {};\n    mytree.newnode = false;\n\n    var _url = \"\";\n    switch (_type) {\n        case \"GW\":\n            {\n                _url = \"platform/v2/htgl/organization\";\n            };\n            break\n        case \"GW_ONLY\":\n            {\n                _url = \"platform/v1/position\";\n            }\n            break;\n        case \"GW_SXJG\":\n            {\n                _url = \"rypx/common/positiontree\";\n            }\n            break;\n    }\n    if (_type != '') {\n        //进度条\n        var myMask = new Ext.LoadMask(Ext.getCmp(divid).el, {\n            msg: \"数据加载中,请稍后...\",\n            msgCls: 'z-index:10000;'\n        });\n\n        myMask.show();\n\n        var _params = {\n            adminflag: 'Y'\n        };\n        hwDas.get({\n            host: vmd.workspace.dataServiceIp,\n            url: _url\n        }, {}, _params, function(result) {\n            debugger;\n\n            var datajson = result.data[0].datas;\n            //datajson=[{id:\"dzjs\",name:\"js\",pid:0,xh:1}]\n\n            if (_type === \"GW\") {\n                var nodeList = datajson.filter(function(elem) {\n                    return elem.sjdwdm === \"0\";\n                });\n\n                var treeDataJson = [];\n                for (var i = 0; i < nodeList.length; i++) {\n                    mytree.insertNewChild(0, nodeList[i].dwdm, nodeList[i].dwmc);\n                    SetTreeNodeImage2(mytree, nodeList[i].dwdm, \"floder\");\n                    mytree.closeItem(nodeList[i].dwdm);\n\n                    var treenode = mytree.item(nodeList[i].dwdm);\n                    treenode.pid = nodeList[i].sjdwdm;\n                    treenode.dwdm = nodeList[i].dwdm;\n                    treenode.baid = nodeList[i].baid;\n                    if (treenode) {\n                        treenode.isFord = true;\n                        treenode.loadChild = false;\n                        treenode.isProject = false;\n                    }\n                    mytree.itemObj[nodeList[i].dwdm] = treenode;\n\n                    var _find = datajson.filter(function(elem) {\n                        return elem.sjdwdm === nodeList[i].dwdm;\n                    });\n                    if (_find.length > 0) {\n                        LoadTreeData(mytree, nodeList[i].dwdm, datajson, _find, _type, 2);\n                    }\n                }\n            } else if (_type === \"GW_ONLY\") {\n                var nodeList = datajson;\n\n                var treeDataJson = [];\n                for (var i = 0; i < nodeList.length; i++) {\n                    mytree.insertNewChild(0, nodeList[i].positionid, nodeList[i].positionname);\n                    SetTreeNodeImage2(mytree, nodeList[i].positionid, \"floder\");\n                    mytree.closeItem(nodeList[i].positionid);\n\n                    var treenode = mytree.item(nodeList[i].positionid);\n                    treenode.pid = nodeList[i].sjdwdm;\n                    treenode.dwdm = nodeList[i].dwdm;\n                    treenode.baid = nodeList[i].baid;\n                    if (treenode) {\n                        treenode.isFord = true;\n                        treenode.loadChild = false;\n                        treenode.isProject = false;\n                    }\n                    mytree.itemObj[nodeList[i].positionid] = treenode;\n\n                }\n            } else if (_type === \"GW_SXJG\") {\n                //datajson=[{id:\"dzjs\",name:\"js\",pid:0,xh:1}]\n                debugger;\n                var nodeList = datajson.filter(function(elem) {\n                    return elem.sjdm === \"0\";\n                });\n                var treeDataJson = [];\n                for (var i = 0; i < nodeList.length; i++) {\n                    g_firstParentID = nodeList[i].dm;\n                    mytree.insertNewChild(0, nodeList[i].dm, nodeList[i].mc);\n                    SetTreeNodeImage2(mytree, nodeList[i].dm, \"floder\");\n                    mytree.closeItem(nodeList[i].dm);\n                    var treenode = mytree.item(nodeList[i].dm);\n                    treenode.path = \"/\" + _type + \"/\" + nodeList[i].dm;\n                    treenode.class_system = _type;\n                    treenode.pid = nodeList[i].sjdm;\n                    if (treenode) {\n                        treenode.isFord = true;\n                        treenode.loadChild = false;\n                        treenode.isProject = false;\n                    }\n                    mytree.itemObj[nodeList[i].dm] = treenode;\n\n                    var _find = datajson.filter(function(elem) {\n                        return elem.sjdm === nodeList[i].dm;\n                    });\n                    if (_find.length > 0) {\n                        LoadTreeData(mytree, nodeList[i].dm, datajson, _find, _type, 4);\n                    }\n                }\n\n\n                // var nodeList = datajson;\n\n                // var treeDataJson = [];\n                // for (var i = 0; i < nodeList.length; i++) {\n                //     mytree.insertNewChild(0, nodeList[i].dm, nodeList[i].mc);\n                //     SetTreeNodeImage2(mytree, nodeList[i].dm, \"floder\");\n                //     mytree.closeItem(nodeList[i].dm);\n\n                //     var treenode = mytree.item(nodeList[i].dm);\n                //     treenode.pid = nodeList[i].sjdm;\n                //     treenode.dwdm = nodeList[i].dm;\n                //     treenode.baid = nodeList[i].dm;\n                //     if (treenode) {\n                //         treenode.isFord = true;\n                //         treenode.loadChild = false;\n                //         treenode.isProject = false;\n                //     }\n                //     mytree.itemObj[nodeList[i].positionid] = treenode;\n\n                // }\n            }\n            myMask.hide();\n\n            if (fun != null && fun != undefined) {\n                fun();\n            }\n\n        }, function(err) {\n            debugger;\n\n            myMask.hide();\n            Ext.Msg.alert(\"提示\", \"获取单位树分类信息失败\", function() {})\n        });\n    }\n\n    //绑定左键事件\n    mytree.attachEvent('onClick', function(id) {\n        //var _text = treeObject.getItemText(id);\n        var selnode = mytree.itemObj[id];\n        LeftTreeTypePXNR.fireEvent('nodeClick', treeObject, selnode.dwdm, selnode.text)\n    });\n}\n\n//绑定资源选择\nfunction changeDataZYXZ(hwTree, _type, divid) {\n    treeObject = hwTree;\n    var mytree = treeObject;\n    var firstNode = \"\";\n    mytree.deleteChildItems(0);\n    mytree.loadJSONObject({\n        id: 0,\n        text: \"单位信息\",\n        item: []\n    });\n    mytree.itemObj = {};\n    mytree.newnode = false;\n\n    if (_type != '') {\n        //进度条\n        var myMask = new Ext.LoadMask(Ext.getCmp(divid).el, {\n            msg: \"数据加载中,请稍后...\",\n            msgCls: 'z-index:10000;'\n        });\n\n        myMask.show();\n\n        var _params = {\n            row_user: vmd.getUserId()\n        };\n        hwDas.get({\n            host: vmd.workspace.dataServiceIp,\n            url: 'wdk/Directory/SysDirectoryByPower'\n        }, {}, _params, function(result) {\n            debugger;\n\n            var datajson = result.data[0].datas;\n            //datajson=[{id:\"dzjs\",name:\"js\",pid:0,xh:1}]\n\n            var nodeList = datajson.filter(function(elem) {\n                return elem.parentnodeid === \"\";\n            });\n\n            var treeDataJson = [];\n            for (var i = 0; i < nodeList.length; i++) {\n                mytree.insertNewChild(0, nodeList[i].nodeid, nodeList[i].nodename);\n                SetTreeNodeImage2(mytree, nodeList[i].nodeid, \"floder\");\n                mytree.closeItem(nodeList[i].nodeid);\n\n                var treenode = mytree.item(nodeList[i].nodeid);\n                treenode.pid = nodeList[i].parentnodeid;\n\n                if (treenode) {\n                    treenode.isFord = true;\n                    treenode.loadChild = false;\n                    treenode.isProject = false;\n                }\n                mytree.itemObj[nodeList[i].nodeid] = treenode;\n\n                var _find = datajson.filter(function(elem) {\n                    return elem.parentnodeid === nodeList[i].nodeid;\n                });\n                if (_find.length > 0) {\n                    LoadTreeData(mytree, nodeList[i].nodeid, datajson, _find, _type, 3);\n                }\n            }\n\n            myMask.hide();\n\n        }, function(err) {\n            debugger;\n\n            myMask.hide();\n            Ext.Msg.alert(\"提示\", \"获取单位树分类信息失败\", function() {})\n        });\n    }\n\n    //绑定左键事件\n    mytree.attachEvent('onClick', function(id) {\n        var _text = treeObject.getItemText(id);\n        LeftTreeTypePXNR.fireEvent('nodeClick', treeObject, id, _text)\n    });\n}\n\n\n\n//绑定树节点数据\nfunction LoadTreeData(mytree, pid, datajson, fatherList, _type, flag) {\n    mytree.newnode = false;\n    var hasChild = mytree.hasChildren(pid);\n    var selnode = mytree.itemObj[pid];\n\n    if (flag === 1) {\n        var selnodepath = selnode.path;\n        for (var i = 0; i < fatherList.length; i++) {\n\n            var _find = datajson.filter(function(elem) {\n                return elem.pid === fatherList[i].id;\n            });\n\n            mytree.insertNewChild(pid, fatherList[i].id, fatherList[i].name);\n\n            if (_find.length > 0) {\n                SetTreeNodeImage2(mytree, fatherList[i].id, \"floder\");\n                //mytree.insertNewChild(fatherList[i].id, fatherList[i].id + \"-0\", \"\");\n                mytree.closeItem(fatherList[i].id);\n                var treenode = mytree.item(fatherList[i].id);\n                treenode.path = selnodepath + \"/\" + fatherList[i].id;\n                treenode.pid = pid;\n                treenode.class_system = _type;\n                treenode.lvl = fatherList[i].lvl;\n                if (treenode) {\n                    treenode.isFord = true;\n                    treenode.loadChild = false;\n                }\n            } else {\n                SetTreeNodeImage2(mytree, fatherList[i].id, \"module\");\n                var treenode = mytree.item(fatherList[i].id);\n                treenode.path = selnodepath + \"/\" + fatherList[i].id;\n                treenode.pid = pid;\n                treenode.class_system = _type;\n                treenode.lvl = fatherList[i].lvl;\n            }\n\n            mytree.itemObj[fatherList[i].id] = treenode;\n            LoadTreeData(mytree, fatherList[i].id, datajson, _find, _type, 1);\n        }\n    } else if (flag == 2) { //岗位\n        for (var i = 0; i < fatherList.length; i++) {\n\n            var _find = datajson.filter(function(elem) {\n                return elem.sjdwdm === fatherList[i].dwdm;\n            });\n\n            mytree.insertNewChild(pid, fatherList[i].baid, fatherList[i].dwmc);\n\n            if (_find.length > 0) {\n                SetTreeNodeImage2(mytree, fatherList[i].baid, \"floder\");\n                mytree.closeItem(fatherList[i].baid);\n                var treenode = mytree.item(fatherList[i].baid);\n                treenode.pid = pid;\n                treenode.dwdm = fatherList[i].dwdm;\n                treenode.baid = fatherList[i].baid;\n\n                if (treenode) {\n                    treenode.isFord = true;\n                    treenode.loadChild = false;\n                }\n            } else {\n                SetTreeNodeImage2(mytree, fatherList[i].baid, \"module\");\n                var treenode = mytree.item(fatherList[i].baid);\n                treenode.pid = pid;\n                treenode.dwdm = fatherList[i].dwdm;\n                treenode.baid = fatherList[i].baid;\n            }\n\n            mytree.itemObj[fatherList[i].baid] = treenode;\n            LoadTreeData(mytree, fatherList[i].baid, datajson, _find, _type, 2);\n        }\n    } else if (flag == 3) { //加载知识库左侧树\n        for (var i = 0; i < fatherList.length; i++) {\n\n            var _find = datajson.filter(function(elem) {\n                return elem.parentnodeid === fatherList[i].nodeid;\n            });\n\n            mytree.insertNewChild(pid, fatherList[i].nodeid, fatherList[i].nodename);\n\n            if (_find.length > 0) {\n                SetTreeNodeImage2(mytree, fatherList[i].nodeid, \"floder\");\n                mytree.closeItem(fatherList[i].nodeid);\n                var treenode = mytree.item(fatherList[i].nodeid);\n                treenode.pid = pid;\n\n                if (treenode) {\n                    treenode.isFord = true;\n                    treenode.loadChild = false;\n                }\n            } else {\n                SetTreeNodeImage2(mytree, fatherList[i].nodeid, \"module\");\n                var treenode = mytree.item(fatherList[i].nodeid);\n                treenode.pid = pid;\n            }\n\n            mytree.itemObj[fatherList[i].nodeid] = treenode;\n            LoadTreeData(mytree, fatherList[i].nodeid, datajson, _find, _type, 3);\n        }\n    } else if (flag == 4) {\n        for (var i = 0; i < fatherList.length; i++) {\n\n            var _find = datajson.filter(function(elem) {\n                return elem.sjdm === fatherList[i].dm;\n            });\n\n            mytree.insertNewChild(pid, fatherList[i].dm, fatherList[i].mc);\n\n            if (_find.length > 0) {\n                SetTreeNodeImage2(mytree, fatherList[i].dm, \"floder\");\n                mytree.closeItem(fatherList[i].dm);\n                var treenode = mytree.item(fatherList[i].dm);\n                treenode.pid = pid;\n\n                if (treenode) {\n                    treenode.isFord = true;\n                    treenode.loadChild = false;\n                }\n            } else {\n                SetTreeNodeImage2(mytree, fatherList[i].dm, \"module\");\n                var treenode = mytree.item(fatherList[i].dm);\n                treenode.pid = pid;\n            }\n\n            mytree.itemObj[fatherList[i].dm] = treenode;\n            LoadTreeData(mytree, fatherList[i].dm, datajson, _find, _type, 4);\n        }\n    }\n}\n\n//设置节点图片样式\nfunction SetTreeNodeImage2(myTree, id, flag) {\n    switch (flag) {\n        case \"floder\":\n            {\n                //var url=\"http://www.hanweikeji.com:6002/lib/dhtmlx/imgs/dhxtree_material/tree/fun.png\";\n                myTree.setItemImage2(id, \"tree/folderClosed.gif\", \"tree/folderOpen.gif\", \"tree/folderClosed.gif\");\n            }\n            break;\n        case \"module\":\n            {\n                myTree.setItemImage2(id, \"tree/model.png\", \"tree/model.png\", \"tree/model.png\");\n            }\n            break;\n    }\n}\n\n// 展开节点操作\nfunction typeTree_onOpenEnd(sender, id) {\n    var proId = id;\n    //alert(id);\n}\n\nvar lastnodeType = \"-1\"; // 0:空白，1：分类，2：模板\n//上次点击的节点\nvar bselNodeId = \"\";\n\n//右键点击树节点操作\nfunction typeTree_nodeClick(sender, id) {\n    var proId = id;\n    var mytree = treeObject;\n    mytree.newnode = false;\n    var hasChild = mytree.hasChildren(proId);\n    var selnode = mytree.itemObj[proId];\n    var selnodepath = selnode.path;\n    var projectId = \"cbab882c-6f5d-4805-b352-692040a69975\";\n    var childParentId = \"0\";\n    // if(bselNodeId != id) \n    {\n        if (selnode.isModel) {\n\n            lastnodeType = \"2\"\n            // document.getElementById(\"iframe_page\").src = vmd.virtualPath + '/modules/eQ9ULgcVb1/eQ9ULgcVb5/hwa99a3307.html';\n        } else {\n            if (lastnodeType != \"1\") {\n\n\n                //document.getElementById(\"iframe_page\").src = vmd.virtualPath + '/modules/eQ9ULgcVb1/eQ9ULgcVb5/hw03cb4931.html';\n                //MyP_jcxx.body.update(\"<\" + \"iframe \" + \" src='/modules/eQ9ULgcVb1/eQ9ULgcVb5/hw03cb4931.html' \" + \" width=100% height=100% frameborder=0  \" + \">\" + \"sdsds\" + \"<\" + \"/\" + \"iframe\" + \">\");\n                // projectId = selnode.projectId;\n                childParentId = proId;\n                lastnodeType = \"1\";\n            }\n\n            // document.getElementById(\"iframe_page\").src = vmd.virtualPath + '/modules/eQ9ULgcVb1/eQ9ULgcVb5/hw03cb4931.html';\n        }\n    }\n    bselNodeId = id;\n}\n\n//右键菜单事件\nfunction onMenuClick(menuitemId) {\n\n    if (menuitemId == \"newFord\") { // 新建同级\n        creatFordEx(1);\n    } else if (menuitemId == \"newMode\") { // 新建子级\n        // 在空白处点击鼠标时，就取消原有节点的选中\n        // treeObject.clearSelection();\n        //treeObject.newnode = true;\n        creatFordEx(2);\n\n    } else if (menuitemId == \"delete\") {\n        //删除\n        deleteNode();\n    } else if (menuitemId == \"edit\") {\n        //编辑\n        nodeReName();\n    } else if (menuitemId == \"moveUp\") {\n        //上移\n        var selId = treeObject.getSelectedItemId();\n        var data = {\n            id: selId,\n            move: 'UP'\n        }\n        hwDas.edit({\n                host: vmd.workspace.dataServiceIp,\n                url: 'rypx/classsys/classtree'\n            }, {}, {}, data,\n            function(result) {\n                treeObject.moveItem(selId, 'up_strict');\n            },\n            function(erro) {\n                Ext.Msg.alert(\"提示\", \"上移树出现问题!\");\n            });\n    } else if (menuitemId == \"moveDown\") {\n        //下移\n        var selId = treeObject.getSelectedItemId();\n        var data = {\n            id: selId,\n            move: 'DOWN'\n        }\n        hwDas.edit({\n                host: vmd.workspace.dataServiceIp,\n                url: 'rypx/classsys/classtree'\n            }, {}, {}, data,\n            function(result) {\n                treeObject.moveItem(selId, 'down_strict');\n            },\n            function(erro) {\n                Ext.Msg.alert(\"提示\", \"下移树出现问题!\");\n            });\n    }\n\n}\n\n//创建添加同级分类钮操作\nfunction creatFordEx(flag) {\n    var addford = function(fordname, callback) {\n        var mytree = treeObject;\n        var selId = mytree.getSelectedItemId();\n        var selnode = mytree.itemObj[selId];\n        var selnodepath = selnode.path;\n        var parentId = selnode.pid;\n        var _type = selnode.class_system;\n        var nodename = fordname;\n        var newnodeid = newGuid(32);\n        var xh = 10;\n\n\n        myMask = new Ext.LoadMask(Ext.getBody(), {\n            msg: \"加载中,请稍后...\"\n        });\n        myMask.show();\n        // 判断同一目录下是否存在相同名称分类\n        checkfordReNameEx(parentId, newnodeid, nodename, function() {\n            if (callback) {\n                callback()\n            }\n            try {\n                debugger;\n                if (flag == 1) {\n                    mytree.insertNewChild(parentId, newnodeid, nodename);\n                    SetTreeNodeImage2(mytree, newnodeid, \"module\");\n                    var data = {\n                        pid: parentId,\n                        class_system: _type,\n                        name: nodename\n                    }\n                } else if (flag == 2) {\n                    mytree.insertNewChild(selId, newnodeid, nodename);\n                    SetTreeNodeImage2(mytree, newnodeid, \"module\");\n                    SetTreeNodeImage2(mytree, selId, \"floder\");\n                    var data = {\n                        pid: selId,\n                        class_system: _type,\n                        name: nodename\n                    }\n                }\n\n                var treenode = mytree.item(newnodeid);\n                treenode.path = selnodepath + \"/\" + newnodeid;\n                treenode.pid = parentId;\n                treenode.class_system = _type;\n\n                //selnode.loadChild = true;\n                if (treenode) {\n                    treenode.isFord = true;\n                    treenode.loadChild = true;\n                }\n                mytree.itemObj[newnodeid] = treenode;\n\n                debugger;\n                hwDas.add({\n                        host: vmd.workspace.dataServiceIp,\n                        url: 'rypx/classsys/classtree'\n                    }, {}, {}, data,\n                    function(result) {\n                        myMask.hide();\n                    },\n                    function(erro) {\n                        Ext.Msg.alert(\"提示\", \"保存树出现问题!\");\n                    });\n            } catch (e) {\n                myMask.hide();\n                Ext.Msg.alert(\"提示\", \"新建同级分类失败\");\n            }\n        })\n    }\n    var fordname = new Ext.MyFordWin(addford, '');\n    fordname.show();\n}\n\n// 重命名\nfunction nodeReName() {\n    var mytree = treeObject;\n    var selId = mytree.getSelectedItemId();\n    var selnode = mytree.itemObj[selId];\n    var nodeName = mytree.itemObj[selId].text;\n    var parentId = selnode.pid;\n\n\n    var addford = function(fordname, callback) {\n        myMask = new Ext.LoadMask(Ext.getBody(), {\n            msg: \"加载中,请稍后...\"\n        });\n        myMask.show();\n        // 判断同一目录下是否存在相同名称分类\n        checkfordReNameEx(parentId, selId, fordname, function() {\n            if (callback) {\n                callback();\n            }\n\n            /*hwDas.edit(\"CDEServcie/module/category\", {}, {\n                    name: fordname,\n                    id: selId,\n                }, [{\n                    name: fordname,\n                    id: selId,\n                }],\n                function(result) {*/\n            try {\n                var data = {\n                    name: fordname,\n                    id: selId\n                }\n                hwDas.edit({\n                        host: vmd.workspace.dataServiceIp,\n                        url: 'rypx/classsys/classtree'\n                    }, {}, {}, data,\n                    function(result) {\n                        selnode.text = fordname;\n                        mytree.setItemText(selId, fordname);\n                        myMask.hide();\n                    },\n                    function(erro) {\n                        Ext.Msg.alert(\"提示\", \"删除树出现问题!\");\n                    });\n            } catch (e) {\n                myMask.hide();\n                Ext.Msg.alert(\"提示\", \"重命名失败!\")\n            }\n            /*\n            },\n            function(msg) {\n                myMask.hide();\n                Ext.Msg.alert(\"提示\", \"新建目录失败\")\n            }             )*/\n\n        })\n    }\n    var fordname = new Ext.MyFordWin(addford, nodeName);\n    fordname.show();\n}\n\n//删除模块\nfunction deleteNode() {\n    var mytree = treeObject;\n    var selId = mytree.getSelectedItemId();\n    var selnode = mytree.itemObj[selId];\n    var haschild = mytree.hasChildren(selId);\n\n    //删除文件夹\n    if (haschild > 0) {\n        Ext.Msg.alert(\"提示\", \"存在子分类，请删除子目录或子模块后再删除该目录\")\n        return\n    }\n\n    //删除\n    Ext.Msg.confirm(\"提示\", \"确认要删除该分类？\", function(type) {\n        if (type == \"yes\") {\n            try {\n                var data = {\n                    v_id: selId\n                }\n                debugger;\n                hwDas.del({\n                        host: vmd.workspace.dataServiceIp,\n                        url: 'rypx/classsys/classtree'\n                    }, {}, data,\n                    function(result) {\n                        Tips.tips(\"删除分类信息成功\", \"success\");\n                        mytree.deleteItem(selId);\n                    },\n                    function(erro) {\n                        Ext.Msg.alert(\"提示\", \"删除树出现问题!\");\n                    });\n            } catch (e) {\n                Ext.Msg.alert(\"提示\", \"删除分类信息失败\")\n                return\n            }\n        }\n    })\n    return;\n}\n\n// 判断同一节点下是否存在相同名称的分类\nfunction checkfordReNameEx(pId, id, name, callback) {\n    callback();\n    return;\n    var isRep = false;\n    hwDas.ajax({\n        das: {\n            idedas: true\n        },\n        url: \"CDEServcie/module/category\",\n        type: 'get',\n        timeout: 5000,\n        params: {\n            parent_id: pId\n        },\n        success: function(result) {\n            var datajson = result.data[0].datas;\n            for (var i = 0; i < datajson.length; i++) {\n                if (name == datajson[i].name && datajson[i].id != id) {\n                    isRep = true;\n                    break;\n                }\n            }\n            if (isRep) {\n                myMask.hide();\n                Ext.Msg.alert('提示', '此分类名称已存在');\n            } else {\n                callback()\n            }\n        },\n        error: function(msg) {\n            myMask.hide();\n            Ext.Msg.alert(\"提示\", \"获取分类信息失败\")\n        }\n    })\n}\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//自定义自定义方法\nfunction newGuid(len) {\n    var length = 32;\n    if (len)\n        length = len - 2\n    var guid = \"\";\n    arr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n    for (var i = 0; i < length; i++) {\n        pos = Math.round(Math.random() * (arr.length - 1));\n        guid += arr[pos];\n    }\n    return \"hw\" + guid;\n}","vmdcss":".containerTableStyle {\n    /*padding: 10px 0px 0px 0px;\n    margin: 10px 0px 0px 0px;*/\n}\n.standartTreeRow\n{\n    font-family: Microsoft YaHei;\n}","vmdprops":"\"\"","type":"ux","vmdinterface":"{\"components\":[{\"cid\":\"vmduxprops\",\"layoutConfig\":{},\"userConfig\":{},\"cn\":[{\"cid\":\"uxprop\",\"id\":\"IsMulSelect\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"IsMulSelect\",\"desc\":\"是否多选\",\"zhname\":\"是否多选\",\"isPublic\":\"on\",\"bindCmp\":\"\",\"bindValue\":\"\",\"uxcid\":\"\",\"cmptype\":\"\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\"}}]},{\"cid\":\"vmduxmethods\",\"id\":\"方法\",\"layoutConfig\":{},\"userConfig\":{},\"cn\":[{\"cid\":\"uxmethod\",\"id\":\"createTree\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"createTree\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"创建分类树,divid:创建树div的id;type:树分类，按实际来\",\"uxcid\":\"\",\"params\":\"divid,type,func\",\"code\":\"//直接填写方法内容treediv\\nhwtree = new dhtmlXTreeObject(divid, \\\"100%\\\", \\\"100%\\\", 0);\\nif(this.IsMulSelect) {\\n    hwtree.enableCheckBoxes(1);\\n    hwtree.enableThreeStateCheckboxes(true);\\n}\\nhwtree.setImagePath(\\\"/lib/dhtmlx/imgs/dhxtree_material/\\\");\\nchangeData(hwtree, type, divid,func);\",\"returnType\":\"\"}},{\"cid\":\"uxmethod\",\"id\":\"GetTreeAllChecked\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"GetTreeAllChecked\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"params\":\"\",\"code\":\"//直接填写方法内容\\nvar values = treeObject.getAllChecked();\\nvar values_array = values.split(',');\\nvar texts = \\\"\\\";\\nExt.Array.each(values_array, function(id, index) {\\n    if(values_array.length > (index + 1)) {\\n        texts += treeObject.getItemText(id) + \\\",\\\";\\n    }\\n    else\\n    {\\n        texts += treeObject.getItemText(id);\\n    }\\n});\\n\\nreturn {\\n    id: values,\\n    text: texts\\n}\",\"returnType\":\"对象\"}},{\"cid\":\"uxmethod\",\"id\":\"getItemTextById\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"getItemTextById\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"根据节点ID获取文本\",\"uxcid\":\"\",\"params\":\"id\",\"code\":\"//直接填写方法内容\\nreturn treeObject.getItemText(id);\",\"returnType\":\"字符串\"}},{\"cid\":\"uxmethod\",\"id\":\"getSelectedItemId\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"getSelectedItemId\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"获取选中的ID\",\"uxcid\":\"\",\"params\":\"\",\"code\":\"//直接填写方法内容\\nreturn treeObject.getSelectedItemId();\",\"returnType\":\"字符串\"}},{\"cid\":\"uxmethod\",\"id\":\"getSelectedItemText\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"getSelectedItemText\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"获取选中的文本\",\"uxcid\":\"\",\"params\":\"\",\"code\":\"//直接填写方法内容\\nreturn treeObject.getSelectedItemText();\",\"returnType\":\"字符串\"}},{\"cid\":\"uxmethod\",\"id\":\"CreateTreeEX\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"CreateTreeEX\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"绑定单位时使用,divid:创建树div的id;type:树分类，按实际来\",\"uxcid\":\"\",\"params\":\"divid,type,fun\",\"code\":\"//直接填写方法内容treediv\\nhwtree = new dhtmlXTreeObject(divid, \\\"100%\\\", \\\"100%\\\", 0);\\nif(this.IsMulSelect) {\\n    hwtree.enableCheckBoxes(1);\\n    hwtree.enableThreeStateCheckboxes(true);\\n}\\nhwtree.setImagePath(\\\"/lib/dhtmlx/imgs/dhxtree_material/\\\");\\n\\nif(type === \\\"GW\\\") //单位\\n{\\n    changeDataEx(hwtree, type, divid, fun);\\n} else if(type === \\\"ZYXZ\\\") //资源选择\\n{\\n    changeDataZYXZ(hwtree, type, divid);\\n} else if(type === \\\"GW_ONLY\\\") {\\n    changeDataEx(hwtree, type, divid, fun);\\n}\\nelse if(type===\\\"GW_SXJG\\\")\\n{\\n   changeDataEx(hwtree, type, divid, fun); \\n}\",\"returnType\":\"无\"}},{\"cid\":\"uxmethod\",\"id\":\"GetTreeAllCheckedEX\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"GetTreeAllCheckedEX\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"扩展返回id,baid,text等；flag标识 GW代表岗位\",\"uxcid\":\"\",\"params\":\"flag\",\"code\":\"//直接填写方法内容\\nvar values = treeObject.getAllChecked();\\nvar values_array = values.split(',');\\nvar texts = \\\"\\\";\\nvar baid = \\\"\\\";\\n\\nExt.Array.each(values_array, function(id, index) {\\n\\n    if(values_array.length > (index + 1)) {\\n        console.log(treeObject)\\n        if(treeObject.itemObj[id].baid !== \\\"\\\") {\\n            texts += treeObject.getItemText(id) + \\\",\\\";\\n            baid += treeObject.itemObj[id].baid + \\\",\\\";\\n        }\\n\\n    } else {\\n\\n        if(id!==\\\"\\\"){\\n            if(treeObject.itemObj[id].baid !== \\\"\\\") {\\n            texts += treeObject.getItemText(id);\\n            baid += treeObject.itemObj[id].baid;\\n        } \\n        }\\n       \\n    }\\n\\n});\\n\\nreturn {\\n    id: values,\\n    text: texts.trimEnd(','),\\n    baid: baid.trimEnd(',')\\n}\",\"returnType\":\"对象\",\"hwCheckbox3\":\"对象\"}},{\"cid\":\"uxmethod\",\"id\":\"ClearAllChecked\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"ClearAllChecked\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"移除所有选中\",\"uxcid\":\"\",\"params\":\"\",\"code\":\"//直接填写方法内容\\nif(treeObject===null||treeObject===undefined)\\n{\\n    return;\\n}\\nvar values = treeObject.getAllChecked();\\nvar values_array = values.split(',');\\n\\nExt.Array.each(values_array, function(id, index) {\\n    treeObject.setCheck(id, false);\\n});\",\"returnType\":\"\"}},{\"cid\":\"uxmethod\",\"id\":\"SetChecked\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"SetChecked\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"以逗号隔开id,例子：id1,id2\",\"uxcid\":\"\",\"params\":\"id\",\"code\":\"//直接填写方法内容\\nif(treeObject === null || treeObject === undefined) {\\n    return;\\n}\\nvar values_array = id.split(',');\\n\\nExt.Array.each(values_array, function(id, index) {\\n    treeObject.setCheck(id, true);\\n});\",\"returnType\":\"\"}},{\"cid\":\"uxmethod\",\"id\":\"getSelectedItemIdOrFirstId\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"getSelectedItemIdOrFirstId\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"获取当前选中，或者默认第一个ID\",\"uxcid\":\"\",\"params\":\"\",\"code\":\"//直接填写方法内容\\ndebugger;\\nvar selectId = treeObject.getSelectedItemId();\\nif (selectId) {\\n    return selectId;\\n} else {\\n    return g_firstParentID;\\n}\",\"returnType\":\"\"}},{\"cid\":\"uxmethod\",\"id\":\"selectItem\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"selectItem\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"选中指定节点\",\"uxcid\":\"\",\"params\":\"id\",\"code\":\"//直接填写方法内容\\ntreeObject.selectItem(id);\",\"returnType\":\"\"}}]},{\"cid\":\"vmduxevents\",\"id\":\"事件\",\"layoutConfig\":{},\"userConfig\":{},\"cn\":[{\"cid\":\"uxevent\",\"id\":\"nodeClick\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"nodeClick\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"\",\"desc\":\"节点点击事件，返回节点id,节点文本\",\"uxcid\":\"\",\"params\":\"id,text\",\"code\":\"\"}}]}]}","vmdresource":"{\"components\":[{\"cid\":\"vmdrescsss\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdresjss\",\"layoutConfig\":{},\"userConfig\":{},\"cn\":[{\"cid\":\"resjs\",\"id\":\"controller.js\",\"layoutConfig\":{},\"userConfig\":{}}]},{\"cid\":\"vmdresimgs\",\"layoutConfig\":{},\"userConfig\":{}}]}"}