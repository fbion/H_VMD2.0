{"vmdversion":"2.0.4.190514","vmdlayout":"{\"components\":[{\"cid\":\"uxpanel\",\"id\":\"ComboForm191749\",\"layoutConfig\":{},\"userConfig\":{\"layout\":\"auto\",\"header\":false,\"width\":250,\"height\":31,\"autoHeight\":false,\"afterrender\":\"ComboForm191749_afterrender\"}}]}","vmdevents":"var thisComboForm191749;\nvar page = this;\n\n\n\nfunction ComboForm191749_afterrender(sender) {\n    \n    thisComboForm191749=page.controller = new vmd.ux.comboForm.Controller({\n        config: {\n            //初始化组件配置项,constructor用\n            ComboWidth: page.width, //下拉框宽度\n            ComboHeight: page.height, //下拉框高度 固定25px\n            GridWidth: page.GridWidth, //下拉窗体宽度 默认和combo宽度一致\n            GridHeight: page.GridHeight, //下拉窗体高度\n            ColumnId: page.ColumnId ? page.ColumnId : \"\",\n            HeaderText: page.HeaderText ? page.HeaderText : \"\", //表头文本\n            ColumnWidth: page.ColumnWidth ? page.ColumnWidth : \"\", //默认列宽\n            MultiSelect: page.MultiSelect, //判断是否开启多选\n            displayField: page.DisplayField,\n            valueField: page.ValueField,\n            SearchField: page.SearchField,\n            GridStore: page.GridStore\n        },\n        events: {\n      \n            onChange: function() {\n                page.fireEvent('onChange', page, thisComboForm191749.getValue(), thisComboForm191749.getText());\n            }\n        }\n    }, sender);\n\n    //初始化下拉窗数据\n    if (page.GridStore) {\n        var store = page.GridStore;\n        var dhxData = [];\n        //通过id或store对象 找一个已登记的数据集\n        \n        store = Ext.StoreMgr.lookup(store);\n        //数据集在加载 或者 刷新时候添加事件重新初始化下窗体数据\n        store.on({\n            scope: this,\n            datachanged: function() {\n                var Records = page.GridStore.getRange();\n                //dhtmlx store数组  将ext数据集转换成 dhtmlx的数据集\n                var dhxdata = [];\n                for (var i = 0; i < Records.length; i++) {\n                    dhxdata.push(Records[i].data);\n                }\n                \n                page\n                thisComboForm191749.SetGridData(dhxdata);\n                //console.info(dhxdata);\n            }\n        });\n    }\n    \n    var body=Ext.getBody();\n    body.on('click',function(e){\n        \n        \n    })\n}","vmdcss":"","vmdprops":"\"\"","type":"ux","vmdevents_controller":"Ext.ns('vmd.ux.comboForm')\r\nvmd.ux.comboForm.Controller=Ext.extend(Ext.util.Observable, {\r\n     constructor: function(options, containerobj) {\r\n          \r\n        this.opts = options.config\r\n       // this.events=options.events;\r\n        //this.oops=options;\r\n        this.context.opts = $.extend(this._Defaultopts, options.config);\r\n        Ext.apply(this.opts,options.config,this._Defaultopts)\r\n        Ext.apply(this.events,options.events)\r\n        this.oop={}\r\n        this.oop.opts=options.config\r\n        //this.events = $.extend(this.events, options.events);\r\n        //this=this;\r\n        var htmlData = this._initTempl();\r\n        if (containerobj) {\r\n            containerobj.update(htmlData);\r\n            this.container = $('#' + this.compId);\r\n            //containerobj.container\r\n            this.rootscope = containerobj;\r\n        }\r\n        this._initComboBox();\r\n        this._attachForm();\r\n        this._initEvent();\r\n\r\n    },\r\n    events: {},\r\n    opts:{},\r\n    \r\n    context: {\r\n        comboForm: null,\r\n        opts: {}\r\n    },\r\n\r\n    _Defaultopts: {\r\n        //compId:'defaultId',\r\n        container: '',\r\n        componentCls: 'ComboForm191749-defult'\r\n    },\r\n\r\n    //模板信息 用于组件页面布局,里面存的是 html Dom结构\r\n    templateHtml: '<div id = \"{{compId}}\" class=\"{{compClass}}\" style=\"{{compStyle}}\">' +\r\n        '<div class=\"myCombo\" style=\"\">' +\r\n        '</div>' +\r\n        '</div>',\r\n\r\n    _initTempl: function() {\r\n        var tmplConfig = {\r\n            compClass: this.opts.componentCls,\r\n            compStyle: \"\",\r\n            GridStyle: \"border:solid 1px\",\r\n            compId: this._guid()\r\n        };\r\n        if (this.opts.width) tmplConfig.compStyle += ';width:' + this.opts.ComboWidth + 'px';\r\n        if (this.opts.height) tmplConfig.compStyle += ';height:25';\r\n        if (this.opts.GridWidth) tmplConfig.GridStyle += ';width:' + this.opts.GridWidth + 'px';\r\n        if (this.opts.GridHeight) tmplConfig.GridStyle += ';height:200px';\r\n\r\n        //用JSON格式的 tmplConfig 替换templateHtml 中的变量 固定语法 \r\n        var htmlstr = template.compile(this.templateHtml)(tmplConfig);\r\n\r\n        //设置组件id\r\n        this.compId = tmplConfig.compId;\r\n        return htmlstr\r\n    },\r\n\r\n    _initComboBox: function() {\r\n        //初始化 mycombo到 div\r\n        var mycombo = new dhtmlXCombo(this.container.find(\".myCombo\")[0], \"combo\", this.opts.width);\r\n        this.combo = mycombo;\r\n        this.FormId = \"myForm_\" + this._guid();\r\n        this.GridId = \"myGrid_\" + this._guid();\r\n        this.SearchId = \"mySearch_\" + this._guid();\r\n        this.container.find(\".dhxcombo_input\").attr({\r\n            FormId: this.FormId,\r\n            GridId: this.GridId,\r\n            SearchId: this.SearchId\r\n\r\n        });\r\n\r\n    },\r\n\r\n    _attachForm: function() {\r\n        var Form_div = document.createElement(\"div\");\r\n        var Grid_div = document.createElement(\"div\");\r\n        var Search_div = document.createElement(\"div\");\r\n        $(Form_div).css({\r\n            width: this.opts.GridWidth ? this.opts.GridWidth : this.opts.ComboWidth + \"px\", //如果界面没有传入GridWidth(属性面板没配置),默认宽度下拉框宽度\r\n            height: this.opts.GridHeight ? this.opts.GridHeight : \"200\" + \"px\", //如果界面没有传入GridHeight(属性面板没配置),默认高度200\r\n            left: this.container.offset().left + \"px\",\r\n            top: (this.container.offset().top + this.container.height() + 1) + \"px\",\r\n            position: \"fixed\",\r\n            overflow: \"hidden\",\r\n\r\n            border: \"solid 1px #dfdfdf\"\r\n        }).attr(\"id\", this.FormId).hide();\r\n\r\n        //Grid\r\n        $(Grid_div).css({\r\n            width: this.opts.GridWidth ? this.opts.GridWidth : this.opts.ComboWidth + \"px\", //如果界面没有传入GridWidth(属性面板没配置),默认宽度下拉框宽度\r\n            height: this.opts.SearchField ? $(Form_div).height() - 30 + \"px\" : $(Form_div).height() + \"px\",\r\n            overflow: \"hidden\"\r\n        }).attr(\"id\", this.GridId);\r\n\r\n        //检索栏\r\n        $(Search_div).css({\r\n            width: this.opts.GridWidth ? this.opts.GridWidth : this.opts.ComboWidth + \"px\", //如果界面没有传入GridWidth(属性面板没配置),默认宽度下拉框宽度\r\n            height: \"30px\"\r\n        }).attr(\"id\", this.SearchId).addClass(\"Div_Search\");\r\n\r\n        Search_div.innerHTML = \"检索:&nbsp;&nbsp;<input type='text'>\";\r\n        //添加到Dom\r\n        document.body.appendChild(Form_div);\r\n        Form_div.appendChild(Grid_div);\r\n        Form_div.appendChild(Search_div);\r\n        this.GridContainer = $(Form_div)\r\n        this._SetGridOpts();\r\n\r\n    },\r\n\r\n    _initEvent: function() {\r\n        var x, y;\r\n        //获取鼠标当前位置\r\n        $(document).mousemove(function(e) {\r\n            Mousex = e.thatX;\r\n            Mousey = e.thatY;\r\n\r\n        });\r\n        var that = this;\r\n        //下拉框获得焦点显示下拉窗体、失去焦点隐藏下拉窗体\r\n        console.info(this.container);\r\n        this.container.find(\".dhxcombo_input\").on(\"click\", function() {\r\n\r\n            alert($(this).attr(\"FormId\"));\r\n            $('#' + $(this).attr(\"FormId\")).show();\r\n        }).on(\"blur\", function() {\r\n            that._IsInDiv(Mousex, Mousey);\r\n        });\r\n        //鼠标脱离下拉窗体范围隐藏下拉窗体\r\n        this.GridContainer.on(\"mouseleave\", function() {\r\n            $(this).hide();\r\n        });\r\n\r\n        //搜索栏实时检索\r\n        $('#' + that.context.SearchId + \" input\").bind(\"input propertychange\", function() {\r\n\r\n            that._filter($(this).val());\r\n        });\r\n\r\n        //选中Grid行更新 ComboText\r\n\r\n        if (this.opts.MultiSelect) { //如果是多选模式、绑定 oncheckbox 事件\r\n            this.grid.attachEvent(\"onCheckbox\", function(rId, cInd, state) {\r\n                var TextStr = \"\";\r\n                var ValueStr = \"\";\r\n                $.each(this.getCheckedRows(1).split(\",\"), function(index, item) {\r\n                    if (item) {\r\n                        TextStr = TextStr + that.context.grid.datastore.data.pull[item][that.context.opts.displayField] + \",\";\r\n                        ValueStr = ValueStr + that.context.grid.datastore.data.pull[item][that.context.opts.valueField] + \",\";\r\n                    }\r\n                });\r\n                TextStr = TextStr.substring(0, TextStr.length - 1);\r\n                ValueStr = ValueStr.substring(0, ValueStr.length - 1);\r\n                that.context.combo.setComboText(TextStr);\r\n                that.context.combo.setComboValue(ValueStr);\r\n                //用于 getValue 和 getText 方法\r\n                that.context.ComboValue = ValueStr;\r\n                that.context.ComboText = TextStr;\r\n                //绑定值变更事件\r\n                that.context.events.onChange();\r\n\r\n            });\r\n        } else { //否则是单选事件 绑定 onRowSelect事件\r\n            this.grid.attachEvent(\"onRowSelect\", function(id, ind) {\r\n                that.context.combo.setComboText(this.datastore.data.pull[id][that.context.opts.displayField]);\r\n                that.context.combo.setComboValue(this.datastore.data.pull[id][that.context.opts.valueField]);\r\n                //用于 getValue 和 getText 方法\r\n                that.context.ComboValue = this.datastore.data.pull[id][that.context.opts.valueField];\r\n                that.context.ComboText = this.datastore.data.pull[id][that.context.opts.displayField];\r\n                that.context.GridContainer.hide();\r\n                //绑定值变更事件\r\n                that.context.events.onChange();\r\n\r\n            });\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    },\r\n\r\n    _IsInDiv: function(x, y) {\r\n        var div = this.GridContainer; //获取你想要的DIV\r\n        var y1 = div.offset().top; //div上面两个的点的y值\r\n        var y2 = y1 + div.height(); //div下面两个点的y值\r\n        var x1 = div.offset().left; //div左边两个的点的x值\r\n        var x2 = x1 + div.width(); //div右边两个点的x的值\r\n        if (x < x1 || x > x2 || y < y1 || y > y2) {\r\n            this.GridContainer.hide();\r\n        }\r\n\r\n    },\r\n\r\n    _SetGridOpts: function() {\r\n        //处理传入的Grid属性拼接属性字符串 默认添加序号列\r\n        var GridHeader = \"&nbsp,\";\r\n        var ColumnIds = \"xh,\";\r\n        var ColAlign = \"center,\";\r\n        var ColWidths = \"45,\";\r\n        var ColTypes = \"cntr,\";\r\n\r\n        //如果支持多选、添加复选框列\r\n        if (this.opts.MultiSelect) {\r\n            GridHeader = \"&nbsp;,\" + \"#master_checkbox,\";\r\n            ColumnIds = \"xh,\" + \"chk,\";\r\n            ColAlign = \"center,\" + \"center,\";\r\n            ColWidths = \"30,\" + \"30,\"\r\n            ColTypes = \"cntr,\" + \"ch,\";\r\n        }\r\n\r\n\r\n  \r\n        this.opts.ColumnId = this.opts.ColumnId ? this.opts.ColumnId : \"Column1,Column2,Column3\";\r\n        var ColumnCounts = this.opts.ColumnId.split(\",\").length;\r\n        console.log(ColumnCounts);\r\n        var TmpHeader = \"\";\r\n        var TmpAlign = \"\";\r\n        var TmpWidths = \"\";\r\n        var TmpTypes = \"\";\r\n        for (var i = 0; i < ColumnCounts; i++) {\r\n            TmpHeader = TmpHeader + \"Column\" + i + \",\";\r\n            TmpAlign = TmpAlign + \"left,\";\r\n            TmpWidths = TmpWidths + \"100,\";\r\n            TmpTypes = TmpTypes + \"ro,\";\r\n        }\r\n\r\n        //拼接属性面板配置的属性,由于4组属性必须数量一致,所以如果数量不匹配 加载默认值 其中对齐方式 Align和 Type 默认未 left 和 ro\r\n        ColumnIds += this.opts.ColumnId;\r\n        ColAlign += TmpAlign;\r\n        ColTypes += TmpTypes;\r\n        if (this.opts.HeaderText&&(this.opts.HeaderText.split(\",\").length == ColumnCounts)) {\r\n            GridHeader += this.opts.HeaderText;\r\n        } else {\r\n            GridHeader += TmpHeader;\r\n        }\r\n\r\n        if (this.opts.ColumnWidth.split(\",\").length == ColumnCounts) {\r\n            ColWidths += this.opts.ColumnWidth;\r\n        } else {\r\n            ColWidths += TmpWidths;\r\n        }\r\n        console.log(GridHeader);\r\n        console.log(ColAlign);\r\n        console.log(ColWidths);\r\n        console.log(ColTypes);\r\n\r\n        this.grid = new dhtmlXGridObject(this.container.find(\".dhxcombo_input\").attr(\"GridId\"));\r\n        this.grid.setImagePath(\"/lib/dhtmlx/codebase/imgs/\");\r\n        this.grid.setHeader(GridHeader);\r\n        this.grid.setColumnIds(ColumnIds);\r\n        this.grid.setColAlign(ColAlign);\r\n        this.grid.setInitWidths(ColWidths);\r\n        this.grid.setColTypes(ColTypes);\r\n        this.grid.datastore = new dhtmlXDataStore();\r\n        this.grid.sync(this.grid.datastore);\r\n        //myGrid.enableMultiselect(true); //允许多选\r\n        this.grid.init();\r\n        //myGrid.datastore.parse(data);\r\n        //this.grid = myGrid;\r\n\r\n    },\r\n    _SetGridData: function(data) {\r\n        this.grid.datastore.clearAll();\r\n        this.grid.datastore.parse(data);\r\n\r\n    },\r\n\r\n    _getValue: function() {\r\n        return this.ComboValue;\r\n    },\r\n    _getText: function() {\r\n        return this.ComboText;\r\n    },\r\n\r\n    _filter: function(searchKey) {\r\n\r\n        var that = this;\r\n        this.grid.datastore.filter(function(obj) {\r\n            if (obj[that.context.opts.SearchField].toString().indexOf(searchKey) != -1) {\r\n                return true;\r\n            } else\r\n                return false;\r\n        });\r\n\r\n    },\r\n\r\n\r\n    _guid: function() {\r\n\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n            var r = Math.random() * 16 | 0,\r\n                v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n            return v.toString(16);\r\n        });\r\n\r\n    },\r\n\r\n    //外部调用方法\r\n    SetGridData: function(data) {\r\n        this._SetGridData(data);\r\n    },\r\n\r\n    getValue: function() {\r\n        return this._getValue();\r\n\r\n    },\r\n    getText: function() {\r\n        return this._getText();\r\n\r\n    }\r\n\r\n    \r\n    \r\n})\r\n\r\n// Ext.define('vmd.ux.comboForm.Controller', {\r\n//     xtype: 'vmd.ux.comboForm.Controller',\r\n//     //构造函数 加载组件时自动调用\r\n//     //上下文对象 用于存储 公共变量\r\n    \r\n//     constructor: function(options, containerobj) {\r\n//     debugger      \r\n//         this.opts = options.config\r\n//       // this.events=options.events;\r\n//         //this.oops=options;\r\n//         this.context.opts = $.extend(this._Defaultopts, options.config);\r\n//         Ext.apply(this.opts,options.config,this._Defaultopts)\r\n//         Ext.apply(this.events,options.events)\r\n//         this.oop={}\r\n//         this.oop.opts=options.config\r\n//         //this.events = $.extend(this.events, options.events);\r\n//         //this=this;\r\n//         var htmlData = this._initTempl();\r\n//         if (containerobj) {\r\n//             containerobj.update(htmlData);\r\n//             this.container = $('#' + this.compId);\r\n//             //containerobj.container\r\n//             this.rootscope = containerobj;\r\n//         }\r\n//         this._initComboBox();\r\n//         this._attachForm();\r\n//         this._initEvent();\r\n\r\n//     },\r\n//     events: {},\r\n//     opts:{},\r\n    \r\n//     context: {\r\n//         comboForm: null,\r\n//         opts: {}\r\n//     },\r\n\r\n//     _Defaultopts: {\r\n//         //compId:'defaultId',\r\n//         container: '',\r\n//         componentCls: 'ComboForm191749-defult'\r\n//     },\r\n\r\n//     //模板信息 用于组件页面布局,里面存的是 html Dom结构\r\n//     templateHtml: '<div id = \"{{compId}}\" class=\"{{compClass}}\" style=\"{{compStyle}}\">' +\r\n//         '<div class=\"myCombo\" style=\"\">' +\r\n//         '</div>' +\r\n//         '</div>',\r\n\r\n//     _initTempl: function() {\r\n//         var tmplConfig = {\r\n//             compClass: this.opts.componentCls,\r\n//             compStyle: \"\",\r\n//             GridStyle: \"border:solid 1px\",\r\n//             compId: this._guid()\r\n//         };\r\n//         if (this.opts.width) tmplConfig.compStyle += ';width:' + this.opts.ComboWidth + 'px';\r\n//         if (this.opts.height) tmplConfig.compStyle += ';height:25';\r\n//         if (this.opts.GridWidth) tmplConfig.GridStyle += ';width:' + this.opts.GridWidth + 'px';\r\n//         if (this.opts.GridHeight) tmplConfig.GridStyle += ';height:200px';\r\n\r\n//         //用JSON格式的 tmplConfig 替换templateHtml 中的变量 固定语法 \r\n//         var htmlstr = template.compile(this.templateHtml)(tmplConfig);\r\n\r\n//         //设置组件id\r\n//         this.compId = tmplConfig.compId;\r\n//         return htmlstr\r\n//     },\r\n\r\n//     _initComboBox: function() {\r\n//         //初始化 mycombo到 div\r\n//         var mycombo = new dhtmlXCombo(this.container.find(\".myCombo\")[0], \"combo\", this.opts.width);\r\n//         this.combo = mycombo;\r\n//         this.FormId = \"myForm_\" + this._guid();\r\n//         this.GridId = \"myGrid_\" + this._guid();\r\n//         this.SearchId = \"mySearch_\" + this._guid();\r\n//         this.container.find(\".dhxcombo_input\").attr({\r\n//             FormId: this.FormId,\r\n//             GridId: this.GridId,\r\n//             SearchId: this.SearchId\r\n\r\n//         });\r\n\r\n//     },\r\n\r\n//     _attachForm: function() {\r\n//         var Form_div = document.createElement(\"div\");\r\n//         var Grid_div = document.createElement(\"div\");\r\n//         var Search_div = document.createElement(\"div\");\r\n//         $(Form_div).css({\r\n//             width: this.opts.GridWidth ? this.opts.GridWidth : this.opts.ComboWidth + \"px\", //如果界面没有传入GridWidth(属性面板没配置),默认宽度下拉框宽度\r\n//             height: this.opts.GridHeight ? this.opts.GridHeight : \"200\" + \"px\", //如果界面没有传入GridHeight(属性面板没配置),默认高度200\r\n//             left: this.container.offset().left + \"px\",\r\n//             top: (this.container.offset().top + this.container.height() + 1) + \"px\",\r\n//             position: \"fixed\",\r\n//             overflow: \"hidden\",\r\n\r\n//             border: \"solid 1px #dfdfdf\"\r\n//         }).attr(\"id\", this.FormId).hide();\r\n\r\n//         //Grid\r\n//         $(Grid_div).css({\r\n//             width: this.opts.GridWidth ? this.opts.GridWidth : this.opts.ComboWidth + \"px\", //如果界面没有传入GridWidth(属性面板没配置),默认宽度下拉框宽度\r\n//             height: this.opts.SearchField ? $(Form_div).height() - 30 + \"px\" : $(Form_div).height() + \"px\",\r\n//             overflow: \"hidden\"\r\n//         }).attr(\"id\", this.GridId);\r\n\r\n//         //检索栏\r\n//         $(Search_div).css({\r\n//             width: this.opts.GridWidth ? this.opts.GridWidth : this.opts.ComboWidth + \"px\", //如果界面没有传入GridWidth(属性面板没配置),默认宽度下拉框宽度\r\n//             height: \"30px\"\r\n//         }).attr(\"id\", this.SearchId).addClass(\"Div_Search\");\r\n\r\n//         Search_div.innerHTML = \"检索:&nbsp;&nbsp;<input type='text'>\";\r\n//         //添加到Dom\r\n//         document.body.appendChild(Form_div);\r\n//         Form_div.appendChild(Grid_div);\r\n//         Form_div.appendChild(Search_div);\r\n//         this.GridContainer = $(Form_div)\r\n//         this._SetGridOpts();\r\n\r\n//     },\r\n\r\n//     _initEvent: function() {\r\n//         var x, y;\r\n//         //获取鼠标当前位置\r\n//         $(document).mousemove(function(e) {\r\n//             Mousex = e.thatX;\r\n//             Mousey = e.thatY;\r\n\r\n//         });\r\n//         var that = this;\r\n//         //下拉框获得焦点显示下拉窗体、失去焦点隐藏下拉窗体\r\n//         console.info(this.container);\r\n//         this.container.find(\".dhxcombo_input\").on(\"click\", function() {\r\n\r\n//             alert($(this).attr(\"FormId\"));\r\n//             $('#' + $(this).attr(\"FormId\")).show();\r\n//         }).on(\"blur\", function() {\r\n//             that._IsInDiv(Mousex, Mousey);\r\n//         });\r\n//         //鼠标脱离下拉窗体范围隐藏下拉窗体\r\n//         this.GridContainer.on(\"mouseleave\", function() {\r\n//             $(this).hide();\r\n//         });\r\n\r\n//         //搜索栏实时检索\r\n//         $('#' + that.context.SearchId + \" input\").bind(\"input propertychange\", function() {\r\n\r\n//             that._filter($(this).val());\r\n//         });\r\n\r\n//         //选中Grid行更新 ComboText\r\n\r\n//         if (this.opts.MultiSelect) { //如果是多选模式、绑定 oncheckbox 事件\r\n//             this.grid.attachEvent(\"onCheckbox\", function(rId, cInd, state) {\r\n//                 var TextStr = \"\";\r\n//                 var ValueStr = \"\";\r\n//                 $.each(this.getCheckedRows(1).split(\",\"), function(index, item) {\r\n//                     if (item) {\r\n//                         TextStr = TextStr + that.context.grid.datastore.data.pull[item][that.context.opts.displayField] + \",\";\r\n//                         ValueStr = ValueStr + that.context.grid.datastore.data.pull[item][that.context.opts.valueField] + \",\";\r\n//                     }\r\n//                 });\r\n//                 TextStr = TextStr.substring(0, TextStr.length - 1);\r\n//                 ValueStr = ValueStr.substring(0, ValueStr.length - 1);\r\n//                 that.context.combo.setComboText(TextStr);\r\n//                 that.context.combo.setComboValue(ValueStr);\r\n//                 //用于 getValue 和 getText 方法\r\n//                 that.context.ComboValue = ValueStr;\r\n//                 that.context.ComboText = TextStr;\r\n//                 //绑定值变更事件\r\n//                 that.context.events.onChange();\r\n\r\n//             });\r\n//         } else { //否则是单选事件 绑定 onRowSelect事件\r\n//             this.grid.attachEvent(\"onRowSelect\", function(id, ind) {\r\n//                 that.context.combo.setComboText(this.datastore.data.pull[id][that.context.opts.displayField]);\r\n//                 that.context.combo.setComboValue(this.datastore.data.pull[id][that.context.opts.valueField]);\r\n//                 //用于 getValue 和 getText 方法\r\n//                 that.context.ComboValue = this.datastore.data.pull[id][that.context.opts.valueField];\r\n//                 that.context.ComboText = this.datastore.data.pull[id][that.context.opts.displayField];\r\n//                 that.context.GridContainer.hide();\r\n//                 //绑定值变更事件\r\n//                 that.context.events.onChange();\r\n\r\n//             });\r\n//         }\r\n\r\n\r\n\r\n\r\n\r\n\r\n//     },\r\n\r\n//     _IsInDiv: function(x, y) {\r\n//         var div = this.GridContainer; //获取你想要的DIV\r\n//         var y1 = div.offset().top; //div上面两个的点的y值\r\n//         var y2 = y1 + div.height(); //div下面两个点的y值\r\n//         var x1 = div.offset().left; //div左边两个的点的x值\r\n//         var x2 = x1 + div.width(); //div右边两个点的x的值\r\n//         if (x < x1 || x > x2 || y < y1 || y > y2) {\r\n//             this.GridContainer.hide();\r\n//         }\r\n\r\n//     },\r\n\r\n//     _SetGridOpts: function() {\r\n//         //处理传入的Grid属性拼接属性字符串 默认添加序号列\r\n//         var GridHeader = \"&nbsp,\";\r\n//         var ColumnIds = \"xh,\";\r\n//         var ColAlign = \"center,\";\r\n//         var ColWidths = \"45,\";\r\n//         var ColTypes = \"cntr,\";\r\n\r\n//         //如果支持多选、添加复选框列\r\n//         if (this.opts.MultiSelect) {\r\n//             GridHeader = \"&nbsp;,\" + \"#master_checkbox,\";\r\n//             ColumnIds = \"xh,\" + \"chk,\";\r\n//             ColAlign = \"center,\" + \"center,\";\r\n//             ColWidths = \"30,\" + \"30,\"\r\n//             ColTypes = \"cntr,\" + \"ch,\";\r\n//         }\r\n\r\n\r\n  \r\n//         this.opts.ColumnId = this.opts.ColumnId ? this.opts.ColumnId : \"Column1,Column2,Column3\";\r\n//         var ColumnCounts = this.opts.ColumnId.split(\",\").length;\r\n//         console.log(ColumnCounts);\r\n//         var TmpHeader = \"\";\r\n//         var TmpAlign = \"\";\r\n//         var TmpWidths = \"\";\r\n//         var TmpTypes = \"\";\r\n//         for (var i = 0; i < ColumnCounts; i++) {\r\n//             TmpHeader = TmpHeader + \"Column\" + i + \",\";\r\n//             TmpAlign = TmpAlign + \"left,\";\r\n//             TmpWidths = TmpWidths + \"100,\";\r\n//             TmpTypes = TmpTypes + \"ro,\";\r\n//         }\r\n\r\n//         //拼接属性面板配置的属性,由于4组属性必须数量一致,所以如果数量不匹配 加载默认值 其中对齐方式 Align和 Type 默认未 left 和 ro\r\n//         ColumnIds += this.opts.ColumnId;\r\n//         ColAlign += TmpAlign;\r\n//         ColTypes += TmpTypes;\r\n//         if (this.opts.HeaderText&&(this.opts.HeaderText.split(\",\").length == ColumnCounts)) {\r\n//             GridHeader += this.opts.HeaderText;\r\n//         } else {\r\n//             GridHeader += TmpHeader;\r\n//         }\r\n\r\n//         if (this.opts.ColumnWidth.split(\",\").length == ColumnCounts) {\r\n//             ColWidths += this.opts.ColumnWidth;\r\n//         } else {\r\n//             ColWidths += TmpWidths;\r\n//         }\r\n//         console.log(GridHeader);\r\n//         console.log(ColAlign);\r\n//         console.log(ColWidths);\r\n//         console.log(ColTypes);\r\n\r\n//         this.grid = new dhtmlXGridObject(this.container.find(\".dhxcombo_input\").attr(\"GridId\"));\r\n//         this.grid.setImagePath(\"/lib/dhtmlx/codebase/imgs/\");\r\n//         this.grid.setHeader(GridHeader);\r\n//         this.grid.setColumnIds(ColumnIds);\r\n//         this.grid.setColAlign(ColAlign);\r\n//         this.grid.setInitWidths(ColWidths);\r\n//         this.grid.setColTypes(ColTypes);\r\n//         this.grid.datastore = new dhtmlXDataStore();\r\n//         this.grid.sync(this.grid.datastore);\r\n//         //myGrid.enableMultiselect(true); //允许多选\r\n//         this.grid.init();\r\n//         //myGrid.datastore.parse(data);\r\n//         //this.grid = myGrid;\r\n\r\n//     },\r\n//     _SetGridData: function(data) {\r\n//         this.grid.datastore.clearAll();\r\n//         this.grid.datastore.parse(data);\r\n\r\n//     },\r\n\r\n//     _getValue: function() {\r\n//         return this.ComboValue;\r\n//     },\r\n//     _getText: function() {\r\n//         return this.ComboText;\r\n//     },\r\n\r\n//     _filter: function(searchKey) {\r\n\r\n//         var that = this;\r\n//         this.grid.datastore.filter(function(obj) {\r\n//             if (obj[that.context.opts.SearchField].toString().indexOf(searchKey) != -1) {\r\n//                 return true;\r\n//             } else\r\n//                 return false;\r\n//         });\r\n\r\n//     },\r\n\r\n\r\n//     _guid: function() {\r\n\r\n//         return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n//             var r = Math.random() * 16 | 0,\r\n//                 v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n//             return v.toString(16);\r\n//         });\r\n\r\n//     },\r\n\r\n//     //外部调用方法\r\n//     SetGridData: function(data) {\r\n//         this._SetGridData(data);\r\n//     },\r\n\r\n//     getValue: function() {\r\n//         return this._getValue();\r\n\r\n//     },\r\n//     getText: function() {\r\n//         return this._getText();\r\n\r\n//     }\r\n\r\n\r\n\r\n// })","vmdinterface":"{\"components\":[{\"cid\":\"vmduxprops\",\"layoutConfig\":{},\"userConfig\":{},\"cn\":[{\"cid\":\"uxpropgroup\",\"id\":\"下拉窗\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"下拉窗\",\"cid\":\"uxpropgroup\"},\"cn\":[{\"cid\":\"uxprop\",\"id\":\"GridStore\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"GridStore\",\"zhname\":\"数据集\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"下拉窗数据集\",\"uxcid\":\"\",\"group\":\"下拉窗\",\"cmptype\":\"store\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"\",\"storefield_multi\":\"\"}},{\"cid\":\"uxprop\",\"id\":\"DisplayField\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"DisplayField\",\"zhname\":\"显示字段\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"下拉窗显示字段\",\"uxcid\":\"\",\"group\":\"下拉窗\",\"cmptype\":\"storeField\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"GridStore\",\"storefield_multi\":\"\"}},{\"cid\":\"uxprop\",\"id\":\"ValueField\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"ValueField\",\"zhname\":\"值字段\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"下拉窗值字段\",\"uxcid\":\"\",\"group\":\"下拉窗\",\"cmptype\":\"storeField\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"GridStore\",\"storefield_multi\":\"\"}}]},{\"cid\":\"uxpropgroup\",\"id\":\"网格属性\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"网格属性\",\"cid\":\"uxpropgroup\"},\"cn\":[{\"cid\":\"uxprop\",\"id\":\"GridWidth\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"GridWidth\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"下拉窗体宽度\",\"uxcid\":\"\",\"group\":\"网格属性\",\"cmptype\":\"number\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"\",\"storefield_multi\":\"\"}},{\"cid\":\"uxprop\",\"id\":\"GridHeight\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"GridHeight\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"下拉窗体高度\",\"uxcid\":\"\",\"group\":\"网格属性\",\"cmptype\":\"number\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"\",\"storefield_multi\":\"\"}},{\"cid\":\"uxprop\",\"id\":\"MultiSelect\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"MultiSelect\",\"zhname\":\"多选\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"是否支持多选，支持的话 第一列将添加一列下拉框\",\"uxcid\":\"\",\"group\":\"网格属性\",\"cmptype\":\"boolean\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"\",\"storefield_multi\":\"\"}},{\"cid\":\"uxprop\",\"id\":\"ColumnId\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"ColumnId\",\"zhname\":\"列ID\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"列ID 必须设置 不然无法解析数据集 \\\",\\\" 分隔\",\"uxcid\":\"\",\"group\":\"网格属性\",\"cmptype\":\"storeField\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"GridStore\",\"storefield_multi\":true,\"radio_jUoV\":\"storeField\"}},{\"cid\":\"uxprop\",\"id\":\"HeaderText\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"HeaderText\",\"zhname\":\"表头\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"表头文本 用 \\\",\\\" 分隔\",\"uxcid\":\"\",\"group\":\"网格属性\",\"cmptype\":\"string\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"\",\"storefield_multi\":\"\"}},{\"cid\":\"uxprop\",\"id\":\"ColumnWidth\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"ColumnWidth\",\"zhname\":\"列宽\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"默认列宽 用 \\\",\\\"分隔\",\"uxcid\":\"\",\"group\":\"网格属性\",\"cmptype\":\"storeField\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"GridStore\",\"storefield_multi\":\"\"}}]},{\"cid\":\"uxprop\",\"id\":\"SearchField\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"SearchField\",\"zhname\":\"检索字段\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"检索字段\",\"uxcid\":\"\",\"group\":\"\",\"cmptype\":\"storeField\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"GridStore\",\"storefield_multi\":\"\"}},{\"cid\":\"uxprop\",\"id\":\"color\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"color\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"group\":\"\",\"cmptype\":\"combo\",\"cmpsettings\":\"{\\\"isMulti\\\":true,\\\"data\\\":\\\"[{\\\\n    text: '红色',\\\\n    value: 'red'\\\\n}, {\\\\n    text: '黄色',\\\\n    value: 'yellow'\\\\n}]\\\"}\",\"storesource\":\"\",\"storefield_multi\":\"\"}}]},{\"cid\":\"vmduxmethods\",\"id\":\"方法\",\"layoutConfig\":{},\"userConfig\":{},\"cn\":[{\"cid\":\"uxmethod\",\"id\":\"getComboValue\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"getComboValue\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"获取下拉窗选中的值\",\"uxcid\":\"\",\"params\":\"\",\"code\":\"return thisComboForm191749.getValue()\",\"returnType\":\"\"}},{\"cid\":\"uxmethod\",\"id\":\"getComboText\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"getComboText\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"获取下拉窗文本\",\"uxcid\":\"\",\"params\":\"\",\"code\":\"return thisComboForm191749.getText();\",\"returnType\":\"\"}}]},{\"cid\":\"vmduxevents\",\"id\":\"事件\",\"layoutConfig\":{},\"userConfig\":{},\"cn\":[{\"cid\":\"uxevent\",\"id\":\"onChange\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"onChange\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"\",\"desc\":\"\",\"uxcid\":\"\",\"params\":\"value,text\",\"code\":\"\"}}]}]}","vmdresource":"{\"components\":[{\"cid\":\"vmdrescsss\",\"layoutConfig\":{},\"userConfig\":{},\"cn\":[{\"cid\":\"rescss\",\"id\":\"components/ux/comboform191749/1.0/css/ComboForm.css\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"components/ux/comboform191749/1.0/css/ComboForm.css\",\"path\":\"components/ux/comboform191749/1.0/css/ComboForm.css\",\"absolutePath\":\"{{vmduxpath}}/components/ux/comboform191749/1.0/css/ComboForm.css\",\"ext\":\"css\"}}]},{\"cid\":\"vmdresjss\",\"layoutConfig\":{},\"userConfig\":{},\"cn\":[{\"cid\":\"resjs\",\"id\":\"controller.js\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"resjs\",\"id\":\"components/ux/comboform191749/1.0/js/Template-web.js\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"components/ux/comboform191749/1.0/js/Template-web.js\",\"path\":\"components/ux/comboform191749/1.0/js/Template-web.js\",\"absolutePath\":\"{{vmduxpath}}/components/ux/comboform191749/1.0/js/Template-web.js\",\"ext\":\"js\"}}]},{\"cid\":\"vmdresimgs\",\"layoutConfig\":{},\"userConfig\":{}}]}"}