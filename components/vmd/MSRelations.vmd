{"vmdversion":"vmd2.0.4.190810","vmdlayout":"{\"components\":[{\"cid\":\"uxpanel\",\"id\":\"MSRelations\",\"layoutConfig\":{},\"userConfig\":{\"layout\":\"border\",\"header\":false,\"width\":285,\"height\":600,\"beforerender\":\"MSRelations_beforerender\"},\"cn\":[{\"cid\":\"container\",\"id\":\"hwDiv\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"north\",\"layout\":\"anchor\",\"height\":30,\"border\":false,\"flex\":\"\",\"width\":\"\",\"margins\":\"10 0 0 10\"},\"cn\":[{\"cid\":\"container\",\"id\":\"hwDiv2\",\"layoutConfig\":{},\"userConfig\":{\"anchor\":\"100% 98%\",\"border\":false,\"height\":30,\"layout\":\"auto\"},\"cn\":[{\"cid\":\"label\",\"id\":\"hwLabel1\",\"layoutConfig\":{},\"userConfig\":{\"x\":50,\"y\":20,\"text\":\"tablename\",\"region\":\"west\",\"style\":\"font-size: 15px;    color: #20A0FF;\"}},{\"cid\":\"label\",\"id\":\"hwLabel\",\"layoutConfig\":{},\"userConfig\":{\"x\":10,\"y\":20,\"text\":\"的从表：\",\"region\":\"center\",\"style\":\"font-size:15px;\"}}]},{\"cid\":\"container\",\"id\":\"hwDiv3\",\"layoutConfig\":{\"align\":\"middle\",\"padding\":\"0 0 0 10\"},\"userConfig\":{\"anchor\":\"100% 50%\",\"border\":false,\"height\":33,\"layout\":\"hbox\",\"hidden\":true},\"cn\":[{\"cid\":\"container\",\"id\":\"hwDiv5\",\"layoutConfig\":{\"align\":\"middle\",\"scrollOffset\":1},\"userConfig\":{\"border\":false,\"region\":\"center\",\"flex\":70,\"layout\":\"hbox\",\"width\":\"\",\"height\":33},\"cn\":[{\"cid\":\"label\",\"id\":\"hwLabel4\",\"layoutConfig\":{},\"userConfig\":{\"x\":10,\"y\":60,\"text\":\"选择从表:\",\"flex\":35}},{\"cid\":\"vmdCombo\",\"id\":\"combo\",\"layoutConfig\":{},\"userConfig\":{\"x\":70,\"y\":50,\"width\":120,\"flex\":80,\"margins\":\"\"}}]},{\"cid\":\"container\",\"id\":\"hwDiv6\",\"layoutConfig\":{\"align\":\"middle\"},\"userConfig\":{\"border\":false,\"region\":\"west\",\"flex\":30,\"layout\":\"hbox\",\"width\":\"\",\"height\":28},\"cn\":[{\"cid\":\"vmdButton\",\"id\":\"button\",\"layoutConfig\":{},\"userConfig\":{\"x\":170,\"y\":50,\"text\":\"添加\",\"icon\":\"icon-plus\",\"type\":\"primary\",\"click\":\"button_click\"}}]}]},{\"cid\":\"container\",\"id\":\"hwDiv4\",\"layoutConfig\":{\"align\":\"middle\",\"padding\":\"0 0 0 10\"},\"userConfig\":{\"anchor\":\"100% 45%\",\"border\":false,\"height\":30,\"layout\":\"hbox\",\"hidden\":true},\"cn\":[{\"cid\":\"label\",\"id\":\"hwLabel2\",\"layoutConfig\":{},\"userConfig\":{\"x\":10,\"y\":100,\"text\":\"从表\",\"region\":\"east\"}},{\"cid\":\"label\",\"id\":\"hwLabel3\",\"layoutConfig\":{},\"userConfig\":{\"x\":40,\"y\":100,\"text\":\"——————————————————\",\"style\":\"color:#d8d8d8;\",\"width\":240}}]}]},{\"cid\":\"container\",\"id\":\"hwDiv1\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"center\",\"border\":false,\"style\":\"/*border-top: 1px lightgray solid;*/\",\"autoScroll\":true,\"layout\":\"auto\",\"afterrender\":\"hwDiv1_afterrender\",\"width\":295,\"height\":\"\",\"split\":false},\"cn\":[{\"cid\":\"vmd.ux.MSRelationsConfig\",\"id\":\"hwMSRelationsConfig\",\"layoutConfig\":{},\"userConfig\":{\"hidden\":true,\"disabled\":true}},{\"cid\":\"container\",\"id\":\"hwDiv7\",\"layoutConfig\":{\"align\":\"middle\",\"padding\":\"0 0 0 20\"},\"userConfig\":{\"region\":\"south\",\"width\":211,\"border\":false,\"layout\":\"hbox\",\"margins\":\"0 0 0 20\",\"hidden\":false},\"cn\":[{\"cid\":\"vmdButton\",\"id\":\"button1\",\"layoutConfig\":{},\"userConfig\":{\"click\":\"button1_click\",\"text\":\"添加\",\"type\":\"primary\",\"icon\":\"icon-plus\"}}]}]},{\"cid\":\"vmdMenu\",\"id\":\"hwMenu\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"west\"}}]}]}","vmdevents":"function hwDiv1_afterrender(sender) {}\n\nvar mstore;\nvar MSRelationsCmps = []\n\nfunction initMSRelations(masterstore) {\n    //初始化，先清空从表对应关系，对应关系组件；\n\n    for (var i = 0; i < MSRelationsCmps.length; i++) {\n        hwDiv1.remove(MSRelationsCmps[i].cmp)\n    }\n\n    hwDiv1.doLayout()\n    MSRelationsCmps = []\n    //combo.setValue(\"\")\n    //combo.setText(\"\")\n    //combo.clearAll()\n    //设置当前操作的主表\n    mstore = masterstore\n    if (!mstore) //未设置主表 返回\n        return;\n    hwLabel1.setText(mstore.id); //设置主表名称\n    mstoreslave = mstore.getConfigValue('slave') || [] //获取主表的从表信息\n    _setStoreIsMaster(mstore); //设置主表  目前是否为主从表\n    //如果存在从表，遍历从表信息，并添加到主从配置中\n    if (mstoreslave && mstoreslave.length > 0) {\n        for (var i = 0; i < mstoreslave.length; i++) {\n            var slavestore = xds.inspector.nodeHash[mstoreslave[i]]\n            if (!slavestore)\n                continue;\n            slavestore = slavestore.component;\n            //循环添加从表组件\n            var MSRelationsConfig = new vmd.ux.MSRelationsConfig({\n                id: \"MSRelationsConfig_\" + mstoreslave[i],\n                anchor: \"100% \"\n            });\n            //动态添加地址替换组件，根据有多少不同的地址进行添加\n            hwDiv1.insert(MSRelationsCmps.length, MSRelationsConfig)\n            //添加从表字段对应关系的组件移除事件\n            MSRelationsConfig.on('removeRelation', function(sender) {\n                var removemscmp;\n                //从组件列表中找到移除的组件\n                for (var i = 0; i < MSRelationsCmps.length; i++) {\n                    if (MSRelationsCmps[i].id === this.id) {\n                        removemscmp = MSRelationsCmps[i]\n                        break;\n                    }\n                }\n                //获取移除组件的数据集\n                removestore = removemscmp.cmp.getSstore();\n                //设置从表移除后的主从关系调整\n                changeStoreInfo(mstore, removestore, 'remove');\n                //将从表组件从配置界面中移除\n                MSRelationsCmps.remove(removemscmp);\n                hwDiv1.remove(this);\n                hwDiv1.doLayout();\n                //调整移除从表后，主表是否还是主从表\n                _setStoreIsMaster(mstore);\n                //调整移除后的数据表是否为主从表\n                _setStoreIsMaster(removestore);\n                //移除之后设置下拉中只有能够添加为从表的数据表\n                resetComboList();\n                settablename()\n            })\n            //处理从表的对应管理改变的逻辑\n            MSRelationsConfig.on('relationChange', function(sender) {\n                var editmscmp\n                //获取编辑的从表组件\n                for (var i = 0; i < MSRelationsCmps.length; i++) {\n                    if (this.id == MSRelationsCmps[i].id) {\n                        editmscmp = MSRelationsCmps[i]\n                        break;\n                    }\n                }\n                //修改从表改变后的数据集调整\n                changeStoreInfo(mstore, editmscmp.cmp.getSstore(), 'edit')\n            }) //处理从表的对应管理改变的逻辑\n            MSRelationsConfig.on('sizechange', function(sender) {\n                if (this.openstate()) {\n                    this.setHeight(40);\n                } else\n                    this.setHeight(190);\n                this.doLayout()\n                hwDiv1.doLayout();\n                return true;\n            })\n            //从表组件列表\n            MSRelationsCmps.push({\n                id: \"MSRelationsConfig_\" + mstoreslave[i],\n                cmp: MSRelationsConfig\n            })\n            hwDiv1.doLayout();\n            //初始化当前主表的主从关系配置界面\n            MSRelationsConfig.initRelation(mstore, slavestore);\n        }\n    }\n    //hwDiv1.add(hwDiv7)\n    hwDiv1.doLayout();\n    //初始化完成之后设置下拉中只有能够添加为从表的数据表\n    //resetComboList();\n    settablename()\n}\n//设置下拉框中允许添加为从表的数据表\nfunction resetComboList() {\n    //获取能够作为子表的数据表\n    var SlaveStore = getSlaveStore() || [];\n    scomlist = [];\n    for (var i = 0; i < SlaveStore.length; i++) {\n        scomlist.push({\n            value: SlaveStore[i],\n            text: SlaveStore[i]\n        });\n    }\n    combo.clearAll();\n    combo.addOption(scomlist);\n}\n\n//设置数据集是否为主从表\nfunction _setStoreIsMaster(_store) {\n    //根据是否包含主表master和从表slave属性来判断 ，设置isMaster\n    _storeslave = _store.getConfigValue('slave') || []\n    if (_storeslave.length <= 0 && !_store.getConfigValue(\"master\")) {\n        _store.setConfig('isMaster', false);\n        _store.node.setIconCls('icon-datatable')\n    } else {\n        if (_storeslave.length <= 0)\n            _store.node.setIconCls('icon-datatable')\n        if (_storeslave.length > 0)\n            _store.node.setIconCls('icon-maindatatable')\n        _store.setConfig('isMaster', true);\n    }\n}\n\n\nvar comData = []\nvar storeStore = new vmd.data.Store({\n    data: comData,\n    fields: ['id', 'name']\n})\n\n\n//从表选择界面的确定时间\nfunction submitStore(storename) {\n    if (!storename)\n        return\n    var slaveStore = xds.inspector.nodeHash[storename]\n    if (!slaveStore)\n        return;\n    slaveStore = slaveStore.component\n    //创建添加的从表配置组件\n    var MSRelationsConfig = new vmd.ux.MSRelationsConfig({\n        id: \"MSRelationsConfig_\" + storename,\n        anchor: \"100% \"\n    });\n    //动态添加地址替换组件，根据有多少不同的地址进行添加\n    hwDiv1.insert(MSRelationsCmps.length, MSRelationsConfig);\n    //添加从表字段对应关系的组件移除事件\n    MSRelationsConfig.on('removeRelation', function(sender) {\n        var removemscmp\n        //从组件列表中找到移除的组件\n        for (var i = 0; i < MSRelationsCmps.length; i++) {\n            if (MSRelationsCmps[i].id === this.id) {\n                var removemscmp = MSRelationsCmps[i];\n                break;\n            }\n        }\n        //获取移除组件的数据集对象\n        removestore = removemscmp.cmp.getSstore();\n        //设置从表移除后的主从关系调整\n        changeStoreInfo(mstore, removestore, 'remove')\n        //将从表组件从配置界面中移除\n        MSRelationsCmps.remove(removemscmp)\n        hwDiv1.remove(this);\n        hwDiv1.doLayout()\n        //调整移除从表后，主表是否还是主从表\n        _setStoreIsMaster(mstore);\n        //调整移除后的数据表是否为主从表\n        _setStoreIsMaster(removestore);\n        //移除之后设置下拉中只有能够添加为从表的数据表\n        //resetComboList();\n\n        settablename()\n    })\n    //处理从表组件编辑事件\n    MSRelationsConfig.on('relationChange', function(sender) {\n        var editmscmp\n        //从组件列表中找到编辑的组件\n        for (var i = 0; i < MSRelationsCmps.length; i++) {\n            if (this.id == MSRelationsCmps[i].id) {\n                editmscmp = MSRelationsCmps[i]\n            }\n        }\n        //修改从表改变后的数据集调整\n        changeStoreInfo(mstore, editmscmp.cmp.getSstore(), 'edit')\n    }) //处理从表的对应管理改变的逻辑\n    MSRelationsConfig.on('sizechange', function(sender) {\n        if (this.openstate()) {\n            this.setHeight(40);\n        } else\n            this.setHeight(190);\n        this.doLayout()\n        hwDiv1.doLayout();\n        return true;\n    })\n    //添加从表组件到列表中\n    MSRelationsCmps.push({\n        id: \"MSRelationsConfig_\" + storename,\n        cmp: MSRelationsConfig\n    })\n    hwDiv1.doLayout()\n    //初始化从表组件对象\n    MSRelationsConfig.initRelation(mstore, slaveStore);\n    //添加从表后，设置主从表的 主从信息\n    changeStoreInfo(mstore, MSRelationsConfig.getSstore(), 'add')\n    //添加从表后，将重新判断并处理 设置当前的主表 是否为 主从表，添加的从表 是否为 主从表\n    _setStoreIsMaster(mstore)\n    _setStoreIsMaster(slaveStore)\n    settablename()\n}\n\nfunction button_click(sender, e) {\n\n    if (combo.getValue()) {\n        submitStore(combo.getValue())\n    }\n    //初始化完成之后设置下拉中只有能够添加为从表的数据表\n    resetComboList();\n}\n//处理添加从表、修改从表、删除从表  主从表属性的设置\nfunction changeStoreInfo(_mstore, _sstore, type) {\n    if (type == 'add') {\n        //将表添加到主表序列中，并设置从表数据表的主表信息。 \n        var mstoreSlave = _mstore.getConfigValue('slave') || [];\n        if (mstoreSlave.indexOf(_sstore.id) < 0) {\n            mstoreSlave.push(_sstore.id)\n        }\n        //设置主表的从表信息\n        _mstore.setConfig('slave', mstoreSlave);\n        //设置从表的主表信息\n        _sstore.setConfig('master', _mstore.id);\n        //设置从表的字段对应关系\n        for (var i = 0; i < MSRelationsCmps.length; i++) {\n            if (\"MSRelationsConfig_\" + _sstore.id == MSRelationsCmps[i].id) {\n                _sstore.setConfig('relation', MSRelationsCmps[i].cmp.getMSRelationInfo());\n            }\n        }\n    } else if (type == 'remove') {\n        //将移除的从表从 主表的 从表序列中移除。\n        var mstoreSlave = _mstore.getConfigValue('slave') || []\n        if (mstoreSlave.indexOf(_sstore.id) >= 0) {\n            mstoreSlave.remove(_sstore.id)\n        }\n        //设置主表的从表信息\n        _mstore.setConfig('slave', mstoreSlave);\n        //设置从表的主表信息\n        _sstore.setConfig('master', \"\");\n        //设置从表的字段对应关系\n        _sstore.setConfig('relation', \"\");\n        _sstore.setConfig('cascadeDel', false);\n    } else if (type == 'edit') {\n        //_sstore.master = _mstore.id;\n        //设置从表的  主从字段对应关系\n        for (var i = 0; i < MSRelationsCmps.length; i++) {\n            if (\"MSRelationsConfig_\" + _sstore.id == MSRelationsCmps[i].id) {\n                _sstore.setConfig('relation', MSRelationsCmps[i].cmp.getMSRelationInfo());\n            }\n        }\n    }\n}\n\n\n//获取允许添加的从表\nfunction getSlaveStore() {\n    if (mstore) {\n        //获取主表所在数据集下的所有数据表\n        var stores = [];\n        if (mstore.owner && mstore.owner.cid == \"vmdDataSet\") //mstore.owner.node.childNodes)\n        {\n            for (var i = 0; i < mstore.owner.node.childNodes.length; i++) {\n                stores.push(mstore.owner.node.childNodes[i].component)\n            }\n        }\n        //允许选择的从表信息\n        var allowAddStores = [];\n        for (var i = 0; i < stores.length; i++) {\n            //过滤掉当前的主表\n            if (stores[i].id == mstore.id) {\n                continue;\n            }\n            var storeMaster = stores[i].getConfigValue('master') || '';\n            //过滤掉已添加为从表的表\n            if (storeMaster == mstore.id) {\n                continue;\n            }\n            //判断其他表是否满足作为从表的条件，禁止重复设置、禁止死循环。\n            xds.vmd.getStoreByDsName('store1', true)\n            if (checkAllowAdd(mstore, stores[i])) {\n                allowAddStores.push(stores[i].id)\n            }\n        }\n        return allowAddStores; //.join(',')\n    }\n}\n\n//检测数据标是否是允许被添加为从表\nfunction checkAllowAdd(_mstore, _sstore) {\n    if (_sstore.id == _mstore.id)\n        return false\n    //4中情况，1主、从都为空；2主、从都不为空；3主空、从不空；4从空、主不空\n    //如果 选择的从表已经包含主表信息了 则返回false     \n    //排除2、4\n    if (_sstore.getConfigValue(\"master\"))\n        return false;\n    //如果选择的从表不包含从表信息，则从表不是其他表的主表，该情况下可以作为从表添加，返回true    \n    //排除1\n    if (!_sstore.getConfigValue('slave') || _sstore.getConfigValue('slave').length <= 0)\n        return true;\n    //处理主表空、从表非空的情况，需要递归从表，判断是否递归\n    return !recursiveStore(_sstore, _mstore)\n}\n//递归处理，避免主从关系出现死循环\nfunction recursiveStore(_sstore, _mstore, recursivecount) {\n    //避免递归死循环，通过记录递归的序号进行判断，递归次数超出100 中断，返回false\n    if (!recursivecount)\n        recursivecount = 1\n    else\n        recursivecount++\n    if (recursivecount > 100)\n        return false;\n    var checkResult = false;\n    //获取从表的 从表list\n    var _sstoreSlaves = _sstore.getConfigValue('slave') || []\n    //处理判断从表的从表list是否存在递归循环问题\n    for (var i = 0; i < _sstoreSlaves.length; i++) {\n        var _ssstore = xds.inspector.nodeHash[_sstoreSlaves[i]];\n        if (!_ssstore)\n            continue;\n        var ssstore = _ssstore.component;\n        if (ssstore.id == _mstore.id)\n            return true;\n        if (_sstore.getConfigValue('slave') || _sstore.getConfigValue('slave').length >= 0) {\n            checkResult = recursiveStore(ssstore, _mstore, recursivecount);\n        }\n    }\n    return checkResult || false;\n}\n\nfunction button1_click(sender, e) {\n    //添加菜单\n    resmenudata = []\n    var allSlaves = getSlaveStore();\n    //动态添加菜单\n    hwMenu.removeAll();\n    for (var i = 0; i < allSlaves.length; i++) {\n        var obj = {\n            text: allSlaves[i],\n            name: allSlaves[i],\n            id: 'menu_' + allSlaves[i],\n            iconCls: 'ion-res',\n            listeners: {\n                click: function(menu, item, e) {\n                    debugger\n                    submitStore(menu.name)\n                    hwDiv1.doLayout();\n                }\n            }\n        }\n        resmenudata.push(obj);\n    }\n    hwMenu.add(resmenudata);\n    hwMenu.doLayout();\n    if (resmenudata.length > 0)\n        hwMenu.showAt(e.xy)\n}\n\nfunction settablename() {\n    for (var i = 0; i <MSRelationsCmps.length; i++) {\n        MSRelationsCmps[i].cmp.setTitle('从表' + (i + 1)+\"：\");\n\n    }\n}\n\nfunction MSRelations_beforerender(sender) {\n\n}","vmdcss":"","vmdprops":"\"\"","type":"ux","vmdevents_controller":"","vmdinterface":"{\"components\":[{\"cid\":\"vmduxprops\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmduxmethods\",\"id\":\"方法\",\"layoutConfig\":{},\"userConfig\":{},\"cn\":[{\"cid\":\"uxmethod\",\"id\":\"initMSRelations\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"initMSRelations\",\"params\":\"mstore\",\"desc\":\"\",\"isPublic\":\"on\",\"code\":\"//直接填写方法内容\\ninitMSRelations(mstore)\",\"returnType\":\"\"}}]},{\"cid\":\"vmduxevents\",\"id\":\"事件\",\"layoutConfig\":{},\"userConfig\":{}}]}","vmdresource":"{\"components\":[{\"cid\":\"vmdrescsss\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdresjss\",\"layoutConfig\":{},\"userConfig\":{},\"cn\":[{\"cid\":\"resjs\",\"id\":\"controller.js\",\"layoutConfig\":{},\"userConfig\":{}}]},{\"cid\":\"vmdresimgs\",\"layoutConfig\":{},\"userConfig\":{}}]}"}