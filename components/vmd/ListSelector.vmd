{"vmdversion":"2.0.4.20190417","vmdlayout":"{\"components\":[{\"cid\":\"uxpanel\",\"id\":\"ListSelector\",\"layoutConfig\":{},\"userConfig\":{\"layout\":\"auto\",\"header\":false,\"width\":732,\"height\":390,\"afterrender\":\"ListSelector_afterrender\",\"autoHeight\":true,\"beforerender\":\"ListSelector_beforerender\",\"disabled\":false}}]}","vmdevents":"var thisComponent;\nvar page = this;\nfunction ListSelector_afterrender(sender){\n    \n    //获取参数并处理\n    thisComponent = new hw.comps.tech.ListSelector({\n        options:{\n            skin: page.skin || 'listselector-default',//皮肤\n            //树组件\n            showTree: page.showTree,//是否展示树\n            treeStore: page.treeStore,//树数据集\n            parentField: page.parentField,//父节点字段\n            valueField: page.valueField,//值字段\n            displayField: page.displayField,//显示字段\n            folderIcon: page.folderIcon,//文件夹图标\n            leafIcon: page.leafIcon,//叶子节点图标\n            allowCheckbox: page.allowCheckbox,//是否展示复选框\n            showRoot: page.showRoot,//是否展示根节点\n            rootText: page.rootText,//根节点名称\n            rootValue: page.rootValue,//根节点值\n            //待选列表\n            unSelectedTitle: page.unSelectedTitle,//标题\n            allowSearchbar: page.allowSearchbar,//是否展示搜索栏\n            unSelectedStore: page.unSelectedStore,// 数据集\n            searchbarPlaceholder: page.searchbarPlaceholder,//搜索栏placeholder\n            searchField: page.searchField,//搜索用字段\n            headers: page.headers,//列表表头\n            columnIds: page.columnIds,//表列ID\n            colWidth: page.colWidth,//列宽\n            colAlign: page.colAlign,//列对齐方式\n            associateId: page.associateId || 'id',//关联ID\n            //已选列表\n            selectedTitle: page.selectedTitle,//标题\n            selectedStore: page.selectedStore//数据集\n        },\n        events:{\n            onSelect: function(param1){\n                page.fireEvent('onSelect', page, param1);\n            },\n            onUnselect: function(param1){\n                page.fireEvent('onUnselect', page, param1);\n            },\n            onTreeSelect: function(param1){\n                page.fireEvent('onTreeSelect', page, param1);\n            },\n            onTreeChecked: function(param1){\n                page.fireEvent('onTreeChecked', page, param1);\n            },\n            onRightClick: function(param1){\n                page.fireEvent('onRightClick', page, param1);\n            },\n            onTreeDbClick: function(param1){\n                page.fireEvent('onTreeDbClick', page, param1);\n            },\n            onTreeRightClick: function(param1){\n                page.fireEvent('onTreeRightClick', page, param1);\n            },\n        }\n    }, sender);\n    \n    //数据绑定 \n    //for test\n    if(page.treeStore) {\n\t\t//var store = Ext.getCmp(page.treeStore);\n\t\tvar store = page.treeStore;\n\t\tif(store) {\n\n\t\t\tstore = Ext.StoreMgr.lookup(store);\n\t\t\tstore.on({\n\t\t\t\tscope: this,\n\t\t\t\tdatachanged: function(){\n        \t\t\tvar records = page.treeStore.getRange();\n        \t\t\tvar dhxdata = [];\n        \t\t\tif(records.length < 1) {\n            \t\t} else {\n            \t\t\t//返回dhx组件数据的格式，将dhxcombostore的源码放到此处\n            \t\t\tfor(var i = 0; i < records.length; i++) {\n            \t\t\t\tvar item = Ext.apply(records[i].data, {\n            \t\t\t\t    id: records[i].data[page.associateId],\n            \t\t\t\t    value: records[i].data[page.valueField],\n            \t\t\t\t    text: records[i].data[page.displayField]\n            \t\t\t\t})\n            \t\t\t\tdhxdata.push(item);\n            \t\t\t}\n            \t\t}\n            \t\tthisComponent._setTreeData(dhxdata);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\t\n\t//待选列表数据集\n    if(page.unSelectedStore) {\n\t\t//var store = Ext.getCmp(page.treeStore);\n\t\tvar store2 = page.unSelectedStore;\n\t\tif(store2) {\n\n\t\t\tstore2 = Ext.StoreMgr.lookup(store2);\n\t\t\tstore2.on({\n\t\t\t\tscope: this,\n\t\t\t\tdatachanged: function(){\n        \t\t\tvar records = page.unSelectedStore.getRange();\n        \t\t\tvar dhxdata = [];\n            \t\tif(records.length < 1) {\n            \t\t} else {\n            \t\t\t//返回dhx组件数据的格式，将dhxcombostore的源码放到此处\n            \t\t\t\n            \t\t\tfor(var i = 0; i < records.length; i++) {\n            \t\t\t\tvar item = Ext.apply(records[i].data, {\n            \t\t\t\t    id: records[i].data[page.associateId]\n            \t\t\t\t})\n            \t\t\t\tdhxdata.push(item);\n            \t\t\t}\n            \t\t}\n            \t\tthisComponent._setListData(dhxdata);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n    //已选列表数据集\n    if(page.selectedStore) {\n\t\tvar store3 = page.selectedStore;\n\t\tif(store3) {\n\n\t\t\tstore3 = Ext.StoreMgr.lookup(store3);\n\t\t\tstore3.on({\n\t\t\t\tscope: this,\n\t\t\t\tdatachanged: function(){\n        \t\t\tvar records = page.selectedStore.getRange();\n        \t\t\tvar dhxdata = [];\n            \t\tif(records.length < 1) {\n            \t\t} else {\n            \t\t    //组织数据\n            \t\t\tfor(var i = 0; i < records.length; i++) {\n            \t\t\t\tvar item = Ext.apply(records[i].data, {\n            \t\t\t\t    id: records[i].data[page.associateId]\n            \t\t\t\t})\n            \t\t\t\tdhxdata.push(item);\n            \t\t\t}\n            \t\t}\n            \t\tconsole.info(dhxdata);\n            \t\tthisComponent._setSelectedListData(dhxdata);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n    \n}\n\nfunction ListSelector_beforerender(sender){\n    \n}\n\n","vmdcss":"/* listselector-default 默认皮肤*/\n/*树*/\n.listselector-default .tree-container{\n    float:left;\n    border:1px solid #CCC;\n    margin-right:10px;\n}\n/*待选列表*/\n.listselector-default div.gridbox_material.gridbox table.hdr tr:nth-child(2) td {\n    border-top: 1px solid white;\n    border-right: 1px solid #CCC;\n}\n.listselector-default div.gridbox_material.gridbox table.obj.row20px tr td {\n    padding-top: 0;\n    padding-bottom: 0;\n    height: 32px;\n    line-height: 32px;\n    border-bottom: 1px solid #dfdfdf;\n    border-right: 1px solid #dfdfdf;\n}\n.listselector-default .list-container{\n    float:left;\n    border:1px solid #CCC;\n    margin-left:5px;\n}\n/*待选列表标题*/\n.listselector-default .list-title{\n    width:100%;\n    height:30px;\n    display:none;\n    font-size: 14px;\n    text-align: center;\n    height: 30px;\n    line-height: 30px;\n    font-weight: bold;\n    background: rgb(252, 251, 251);\n    border-bottom: 1px solid rgb(228, 228, 228);\n}\n/*搜索栏*/\n.listselector-default .list-searchbar {\n    position: relative;\n    width:100%;\n    height:30px;\n}\n/*搜索栏输入框*/\n.listselector-default .list-searchbar input {\n    width:99%;\n    height: 27px;\n    line-height: 27px;\n    padding-left: 8px;\n    background-color: #fff;\n    border: 1px solid #b2bdc5;\n    border-radius: 4px;\n    font-size: 14px;\n    color: #5f5f5f;\n}\n/*待选列表*/\n.listselector-default .list-grid {\n    \n}\n/*按钮区*/\n.listselector-default .button-container{\n    float:left;\n    padding:0 7px 0 7px;\n}\n/*按钮*/\n.listselector-default .button-container button{\n    width:34px;\n    margin-bottom:15px;\n        display: inline-block;\n    line-height: 1;\n    white-space: nowrap;\n    cursor: pointer;\n    background: #fff;\n    border: 1px solid #c4c4c4;\n    color: #1f2d3d;\n    -webkit-appearance: none;\n    text-align: center;\n    /* box-sizing: border-box; */\n    -webkit-box-sizing: content-box;\n    outline: 0;\n    -moz-user-select: none;\n    -webkit-user-select: none;\n    -ms-user-select: none;\n    font-size: 14px;\n    border-radius: 4px;\n    font-size: 12px;\n    border-radius: 4px;\n    padding:7px 0 7px 0;\n}\n/*已选列表*/\n.listselector-default .list2-container{\n    float:left;\n    border:1px solid #CCC;\n}\n/*已选列表标题*/\n.listselector-default .list2-title{\n    width: 100%;\n    height: 30px;\n    display: none;\n    font-size: 14px;\n    border: 1px solid #CCC;\n    border-top:none;\n    text-align: center;\n    line-height: 30px;\n    font-weight: bold;\n    background: rgb(252, 251, 251);\n    border-bottom: 1px solid rgb(228, 228, 228);\n}\n/*搜索栏*/\n.listselector-default .list2-searchbar {\n    border: 1px solid #CCC;\n}\n/*搜索栏图标*/\n.listselector-default .searchbar-icon{\n    width: 25px;\n    height: 25px;\n    position: absolute;\n    right: 1px;\n    top: 2px;\n    cursor: pointer;\n    /*background: url('{vmduxpath}/components/ux/listselectortcomponent/1.0/img/query.png') no-repeat center;*/\n}\n/*待选列表*/\n.listselector-default .list2-grid {\n    \n}\n\n/* listselector-test 测试皮肤*/\n/*树*/\n.listselector-test .tree-container{\n    float:left;\n    border:1px solid #F00;\n    margin-right:10px;\n}\n/*待选列表*/\n.listselector-test .list-container{\n    float:left;\n    border:1px solid #CCC;\n    margin-left:5px;\n}\n/*待选列表标题*/\n.listselector-test .list-title{\n    width:100%;\n    height:30px;\n    display:none;\n    font-size: 14px;\n    text-align: center;\n    height: 30px;\n    line-height: 30px;\n    font-weight: bold;\n    background: rgb(252, 251, 251);\n    border-bottom: 1px solid rgb(228, 228, 228);\n}\n/*搜索栏*/\n.listselector-test .list-searchbar {\n    position: relative;\n    width:100%;\n    height:30px;\n}\n/*搜索栏输入框*/\n.listselector-test .list-searchbar input {\n    width:99%;\n    height: 27px;\n    line-height: 27px;\n    padding-left: 8px;\n    background-color: #fff;\n    border: 1px solid #b2bdc5;\n    border-radius: 4px;\n    font-size: 14px;\n    color: #5f5f5f;\n}\n/*待选列表*/\n.listselector-test .list-grid {\n    \n}\n/*按钮区*/\n.listselector-test .button-container{\n    float:left;\n    padding:0 7px 0 7px;\n}\n/*按钮*/\n.listselector-test .button-container button{\n    width:34px;\n    margin-bottom:15px;\n        display: inline-block;\n    line-height: 1;\n    white-space: nowrap;\n    cursor: pointer;\n    background: #fff;\n    border: 1px solid #c4c4c4;\n    color: #1f2d3d;\n    -webkit-appearance: none;\n    text-align: center;\n    /* box-sizing: border-box; */\n    -webkit-box-sizing: content-box;\n    outline: 0;\n    -moz-user-select: none;\n    -webkit-user-select: none;\n    -ms-user-select: none;\n    font-size: 14px;\n    border-radius: 4px;\n    font-size: 12px;\n    border-radius: 4px;\n    padding:7px 0 7px 0;\n}\n/*已选列表*/\n.listselector-test .list2-container{\n    float:left;\n    border:1px solid #CCC;\n}\n/*已选列表标题*/\n.listselector-test .list2-title{\n    width: 100%;\n    height: 30px;\n    font-size: 14px;\n    text-align: center;\n    display: none;\n    line-height: 30px;\n    font-weight: bold;\n    background: rgb(252, 251, 251);\n    border-bottom: 1px solid rgb(228, 228, 228);\n}\n/*搜索栏*/\n.listselector-test .list2-searchbar {\n    border: 1px solid #CCC;\n}\n/*搜索栏图标*/\n.listselector-test .searchbar-icon{\n    width: 25px;\n    height: 25px;\n    position: absolute;\n    right: 1px;\n    top: 2px;\n    cursor: pointer;\n    /*background: url('{vmduxpath}/components/ux/listselectortcomponent/1.0/img/query.png') no-repeat center;*/\n}\n/*待选列表*/\n.listselector-test .list2-grid {\n    \n}","vmdprops":"\"\"","type":"ux","vmdevents_controller":"Ext.define('hw.comps.tech.ListSelector', {\n    xtype: 'hw.comps.tech.ListSelector',\n\n    tmpl: '<div class=\"{{compClass}}\" style=\"{{compStyle}}\" id=\"{{compId}}\">' +\n        '<div class=\"tree-container\"></div>' +\n        '<div class=\"list-container\">' +\n        '<div class=\"list-title\"></div>' +\n        '<div class=\"list-searchbar\">' +\n        '<input type=\"text\" />' +\n        '<img class=\"searchbar-icon\" src=\"/components/ux/listselectortcomponent/1.0/img/query.png\"/>' +\n        '</div>' +\n        '<div class=\"list-grid\"></div>' +\n        '</div>' +\n        '<div class=\"button-container\">' +\n        '<button class=\"list-select\">></button><button class=\"list-unselect\"><</button>' +\n        '<button class=\"list-selectall\">>></button><button class=\"list-unselectall\"><<</button>' +\n        '</div>' +\n        '<div class=\"list2-container\">' +\n        '<div class=\"list2-title\"></div>' +\n        '<div class=\"list2-grid\"></div>' +\n        '</div>' +\n        '</div>',\n    defaultOpts: { //默认配置项\n        options: {\n            /*容器属性*/\n            container: '',\n            width: 500,\n            height: 300,\n            /*样式属性*/\n            componentCls: 'listselector-default',\n            /*功能属性*/\n            //树组件\n            showTree: false, //是否展示树\n            parentField: '', //父节点字段\n            valueField: '', //值字段\n            displayField: '', //显示字段\n            folderIcon: '', //文件夹图标\n            leafIcon: '', //叶子节点图标\n            allowCheckbox: false, //是否展示复选框\n            showRoot: false, //展示根节点\n            rootText: '', //根节点名称\n            rootValue: '', //根节点值\n            //待选列表\n            unSelectedTitle: '', //标题\n            allowSearchbar: false, //是否展示搜索栏\n            searchbarPlaceholder: '', //搜索栏placeholder\n            searchField: '', //搜索用字段\n            headers: '', //列表表头(英文逗号分隔)\n            columnIds: '', //表列ID(英文逗号分隔)\n            colWidth: '', //列宽(英文逗号分隔)\n            colAlign: '', //列对齐方式(英文逗号分隔)\n            associateId: 'id', //关联ID\n            //已选列表\n            selectedTitle: '' //标题\n        },\n        events: {\n\n        }\n\n    },\n    //构造函数，默认初始化组件\n    constructor: function(options, containerobj) {\n\n        this.context = {\n            tree: null, //树组件\n            list: null, //待选列表\n            list2: null //已选列表\n        }\n\n        this.context.opts = $.extend({}, this.defaultOpts.options, options.options);\n        this.context.events = $.extend({}, this.defaultOpts.options, options.events);\n        //编译模板\n        var htmldata = this._initTmpl();\n\n        //渲染到容器中\n        if (containerobj) {\n            this.context.env = 'vmd';\n            containerobj.update(htmldata);\n            this.context.container = $(\"#\" + this.context.compId);\n            this._init(containerobj);\n        } else if (this.context.opts.container) {\n            this.context.env = 'dev';\n            this.context.container.html(htmldata);\n            this.context.container = typeof(this.context.opts.container) == \"object\" ? $(this.context.opts.container) : $(\"#\" + this.context.opts.container);\n            var container = {};\n            container.lastSize = {\n                height: this.context.container.height(),\n                width: this.context.container.width()\n            };\n            this._init(container);\n        }\n    },\n    //初始化模板\n    _initTmpl: function() {\n        var tmplconf = {\n            // compClass: this.context.opts.componentCls,\n            compClass: this.context.opts.skin,\n            compStyle: '',\n            compId: this._guid(),\n            compLabelText: this.context.opts.labelText,\n            compSpace: this.context.opts.labelInputMargin ? 'width:' + this.context.opts.labelInputMargin + 'px' : '',\n            compPlaceholder: this.context.opts.inputPlaceholder,\n            compReadonly: this.context.opts.readonly ? 'readonly=\"true\"' : ''\n        };\n\n        if (this.context.opts.with) tmplconf.compstyle += ';width:' + this.context.opts.with + 'px';\n        if (this.context.opts.height) tmplconf.compstyle += ';height:' + this.context.opts.height + 'px';\n        if (this.context.opts.lineHeight) tmplconf.compstyle += ';line-height:' + this.context.opts.lineHeight + 'px';\n\n        var htmldata = template.compile(this.tmpl)(tmplconf);\n\n        this.context.compId = tmplconf.compId; //设置组件id\n\n        return htmldata;\n    },\n    _init: function(containerobj) {\n        //左侧树组件\n        var btnWidth = 50;\n        var listWidth = 0; //列表宽度\n        var listHeight = containerobj.lastSize.height; //列表高度\n        //是否展示树组件\n        if (this.context.opts.showTree) {\n            listWidth = (containerobj.lastSize.width - 50 - 25) / 3;\n            this.context.container.find(\".tree-container\").width(listWidth).height(listHeight);\n            //渲染树\n            this._initTree();\n        } else {\n            listWidth = (containerobj.lastSize.width - 50 - 10) / 2;\n            this.context.container.find(\".tree-container\").remove();\n        }\n        //待选列表\n        this.context.container.find(\".list-container\").width(listWidth).height(listHeight);\n        //根据配置展示搜索栏\n        var unSelectedHeight = listHeight;\n        var selectedHieght = listHeight;\n        if (this.context.opts.allowSearchbar) {\n            this.context.container.find(\".list-searchbar\").width(listWidth - 2)\n            this.context.container.find(\".list-searchbar input\").width(listWidth - 12).attr('placeholder', this.context.opts.searchbarPlaceholder);\n            unSelectedHeight = listHeight - 30 - 3;\n        } else {\n            this.context.container.find(\".list-searchbar\").remove();\n            unSelectedHeight = listHeight;\n        }\n        //根据配置展示待选、已选标题\n        if (this.context.opts.unSelectedTitle) {\n            unSelectedHeight -= 30;\n            this.context.container.find(\".list-title\").html(this.context.opts.unSelectedTitle).show();\n        }\n        if (this.context.opts.selectedTitle) {\n            selectedHieght -= 30;\n            this.context.container.find(\".list2-title\").html(this.context.opts.selectedTitle).show();\n        }\n        this.context.container.find(\".list-grid\").width(listWidth).height(unSelectedHeight - 2);\n        //按钮 按钮部分总高度135px,垂直居中需要(总高度-135)/2 的margin-top\n        this.context.container.find(\".button-container\").width(34).height(135).css(\"margin-top\", (listHeight - 135) / 2);\n        //已选列表\n        this.context.container.find(\".list2-container\").width(listWidth).height(listHeight);\n        this.context.container.find(\".list2-grid\").width(listWidth - 1).height(selectedHieght - 2);\n        //初始化待选、已选列表\n        this._initList();\n        //初始化事件绑定\n        this._initEvent();\n    },\n    //初始化树组件\n    _initTree: function() {\n        var tree = new dhtmlXTreeObject(this.context.container.find(\".tree-container\")[0], '100%', '100%', 0);\n        tree.setSkin('dhx_skyblue');\n        tree.setImagePath(\"/lib/dhtmlx/imgs/dhxtree_material/\");\n        tree.enableDragAndDrop(true);\n        //是否展示复选框\n        if (this.context.opts.allowCheckbox) {\n            tree.enableCheckBoxes(true);\n            tree.enableThreeStateCheckboxes(true);\n            //选中文本自动选中复选框\n            var that = this;\n            tree.attachEvent(\"onClick\", function(id) {\n                if (that.context.tree.isItemChecked(id)) {\n                    that.context.tree.setCheck(id, 0);\n                } else {\n                    that.context.tree.setCheck(id, 1);\n                }\n\n            });\n        }\n        //是否展示根节点\n        if (this.context.opts.showRoot) {\n            tree.loadJSArray([\n                [this.context.opts.rootValue != '' ? this.context.opts.rootValue : 'root', 0, this.context.opts.rootText != '' ? this.context.opts.rootText : '根节点']\n            ]);\n        }\n        this.context.tree = tree;\n    },\n    //加载树组件数据\n    _setTreeData: function(data) {\n        if (!this.context.opts.showTree) return;\n        //数据转换 二维表转数组\n        var treeData = [];\n        var that = this;\n        //是否展示根节点\n        //先清空为设计模式添加的父节点，防止重复\n        this.context.tree.deleteChildItems(0);\n        if (that.context.opts.showRoot) {\n            treeData.push([this.context.opts.rootValue != '' ? this.context.opts.rootValue : 'root', 0, this.context.opts.rootText != '' ? this.context.opts.rootText : '根节点']);\n            $.each(data, function(index, item) {\n                if (item[that.context.opts.parentField] == 0) {\n                    item[that.context.opts.parentField] = that.context.opts.rootValue != '' ? that.context.opts.rootValue : 'root';\n                }\n                treeData.push([item[that.context.opts.valueField], item[that.context.opts.parentField], item[that.context.opts.displayField]]);\n            })\n        } else {\n\n            $.each(data, function(index, item) {\n                treeData.push([item[that.context.opts.valueField], item[that.context.opts.parentField], item[that.context.opts.displayField]]);\n            })\n        }\n\n        this.context.tree.loadJSArray(treeData);\n    },\n    //初始化待选列表及已选列表\n    _initList: function() {\n        //待选列表\n        var mygrid = new dhtmlXGridObject(this.context.container.find(\".list-container .list-grid\")[0]);\n        mygrid.setImagePath(\"../../../codebase/imgs/\");\n        //已选列表\n        var mygrid2 = new dhtmlXGridObject(this.context.container.find(\".list2-container .list2-grid\")[0]);\n        mygrid2.setImagePath(\"../../../codebase/imgs/\");\n        var columnCount = 1;\n        //根据配置展示表头\n        if (this.context.opts.columnIds && this.context.opts.columnIds.length > 0) {\n            columnCount = this.context.opts.columnIds.split(/,/g).length;\n        }\n\n        var colTypes = \"ro\";\n        var colSorting = \"str\";\n        var colAlign = \"center\";\n        var colWidth = \"*\";\n        var colTitle = \"标题\";\n        //根据列数拼接参数\n        var tempColTypes = [];\n        var tempColAlign = [];\n        var tempColSorting = [];\n        var tempWidth = [];\n        var tempTitle = [];\n\n        if (columnCount > 1) {\n            for (var i = columnCount; i > 0; i--) {\n                tempColTypes.push(colTypes);\n                tempColSorting.push(colSorting);\n                tempColAlign.push(\"center\");\n                tempTitle.push(colTitle);\n                if (i == 0) {\n                    tempWidth.push(this.context.container.find(\".list-container .list-grid\") / columnCount);\n                } else {\n                    tempWidth.push(\"*\");\n                }\n            }\n            mygrid.setInitWidths(this.context.opts.colWidth ? this.context.opts.colWidth : tempWidth.join(','));\n            mygrid.setColAlign(this.context.opts.colAlign ? this.context.opts.colAlign : tempColAlign.join(','));\n            mygrid.setHeader(this.context.opts.headers ? this.context.opts.headers : tempTitle.join(','));\n            mygrid2.setInitWidths(this.context.opts.colWidth ? this.context.opts.colWidth : tempWidth.join(','));\n            mygrid2.setColAlign(this.context.opts.colAlign ? this.context.opts.colAlign : tempColAlign.join(','));\n            mygrid2.setHeader(this.context.opts.headers ? this.context.opts.headers : tempTitle.join(','));\n        } else {\n            mygrid.setInitWidths(this.context.opts.colWidth ? this.context.opts.colWidth : colWidth);\n            mygrid.setColAlign(this.context.opts.colAlign ? this.context.opts.colAlign : colAlign);\n            mygrid.setHeader(colTitle);\n            mygrid2.setInitWidths(this.context.opts.colWidth ? this.context.opts.colWidth : colWidth);\n            mygrid2.setColAlign(this.context.opts.colAlign ? this.context.opts.colAlign : colAlign);\n            mygrid2.setHeader(colTitle);\n        }\n        mygrid.setColTypes(tempColTypes.length ? tempColTypes.join(',') : colTypes);\n        mygrid.setColSorting(tempColAlign.length ? tempColAlign.join(',') : colSorting);\n        mygrid.setColumnIds(this.context.opts.columnIds);\n        mygrid.enableMultiselect(true); //允许多选\n\n        mygrid2.setColTypes(tempColTypes.length ? tempColTypes.join(',') : colTypes);\n        mygrid2.setColSorting(tempColAlign.length ? tempColAlign.join(',') : colSorting);\n        mygrid2.setColumnIds(this.context.opts.columnIds);\n        mygrid2.enableMultiselect(true); //允许多选\n\n        mygrid.init();\n        mygrid2.init();\n\n        //如果未配置header则隐藏表头\n        if (!(this.context.opts.headers && this.context.opts.headers.length > 0)) {\n            this.context.container.find(\".xhdr\").hide();\n            //单独处理待选表格和已选表格\n            this.context.container.find(\".list-grid .objbox\").height(this.context.container.find(\".list-grid .objbox\").height() + 32).css(\"overflow-x\", \"hidden\");\n            this.context.container.find(\".list2-grid .objbox\").height(this.context.container.find(\".list2-grid .objbox\").height() + 32).css(\"overflow-x\", \"hidden\");\n        }\n\n        /*初始化datastore*/\n        mygrid.datastore = new dhtmlXDataStore();\n        mygrid2.datastore = new dhtmlXDataStore();\n\n        //绑定数据集更新事件，进行待选列表过滤使用\n        var that = this;\n        mygrid.datastore.attachEvent(\"onXLE\", function(id, data, mode) {\n            //重新加载数据，先清空搜索栏\n            that.context.container.find('.list-searchbar input').val()\n            //过滤\n            that._filter();\n        });\n        mygrid2.datastore.attachEvent(\"onXLE\", function(id, data, mode) {\n            //过滤\n            that._filter();\n        });\n        //左选右时触发\n        mygrid2.datastore.attachEvent(\"onAfterAdd\", function(id, data, mode) {\n            //过滤\n            that._filter();\n        });\n        //右选左时触发\n        mygrid2.datastore.attachEvent(\"onAfterDelete\", function(id, data, mode) {\n            //过滤\n            that._filter();\n        });\n\n        /*关联*/\n        mygrid.sync(mygrid.datastore);\n        mygrid2.sync(mygrid2.datastore);\n\n        this.context.list = mygrid;\n        this.context.selectedList = mygrid2;\n\n    },\n    //过滤待选、已选列表\n    _filter: function() {\n        //判断待选列表的条目是否在已选列表，如果存在则使用过滤器过滤\n        var that = this;\n        this.context.list.datastore.filter(function(obj) {\n            //右侧不存在，左侧存在的需要回复显示\n            if (that.context.selectedList.datastore.exists(obj.id)) {\n                return false;\n            } else {\n                //如果有关键字过滤，则需要先判断是否需要过滤\n                var searchKey = that.context.container.find('.list-searchbar input').val()\n                if (that.context.opts.searchField && that.context.opts.searchField.length > 0) {\n                    that.context.opts.searchField = that.context.opts.searchField ? that.context.opts.searchField : that.context.opts.columnIds.split(/,/g)[0];\n                }\n                // that.context.list.datastore.filter(that.context.opts.searchField, searchKey);\n                //如果录入了关键字，则匹配的展示，不匹配的不展示\n                if (searchKey && searchKey.length > 0) {\n                    if (obj[that.context.opts.searchField].indexOf(searchKey) != -1) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }\n                return true;\n            }\n\n        });\n    },\n    //设置待选列表数据\n    _setListData: function(data) {\n        this.context.list.datastore.clearAll();\n        this.context.list.datastore.parse(data);\n    },\n    //设置已选列表数据\n    _setSelectedListData: function(data) {\n        this.context.selectedList.datastore.clearAll();\n        this.context.selectedList.datastore.parse(data);\n    },\n    //绑定事件\n    _initEvent: function() {\n        var that = this;\n\n        //树组件\n        if (this.context.opts.showTree) {\n            //选中事件\n            if (this.context.opts.allowCheckbox) {\n                //选中文本自动选中复选框\n                var that = this;\n                this.context.tree.attachEvent(\"onClick\", function(id) {\n                    if (Object.prototype.toString.call(that.context.events.onTreeSelect) === '[object Function]') {\n                        that.context.events.onTreeSelect(id);\n                    }\n                    if (Object.prototype.toString.call(that.context.events.onTreeChecked) === '[object Function]') {\n                        that.context.events.onTreeChecked(that.context.tree.getAllChecked());\n                    }\n                });\n                this.context.tree.attachEvent(\"onCheck\", function(id) {\n                    if (Object.prototype.toString.call(that.context.events.onTreeChecked) === '[object Function]') {\n                        that.context.events.onTreeChecked(that.context.tree.getAllChecked());\n                    }\n                });\n            } else {\n                //选中文本自动选中复选框\n                var that = this;\n                this.context.tree.attachEvent(\"onClick\", function(id) {\n                    if (Object.prototype.toString.call(that.context.events.onTreeSelect) === '[object Function]') {\n                        that.context.events.onTreeSelect(id);\n                    }\n                });\n            }\n            //树节点右击\n            this.context.tree.attachEvent(\"onRightClick\", function(id, ev) {\n                if (Object.prototype.toString.call(that.context.events.onTreeRightClick) === '[object Function]') {\n                    that.context.events.onTreeRightClick(id);\n                }\n            });\n\n            //树节点双击\n            this.context.tree.attachEvent(\"onDblClick\", function(id) {\n                if (Object.prototype.toString.call(that.context.events.onTreeDbClick) === '[object Function]') {\n                    that.context.events.onTreeDbClick(id);\n                }\n            });\n        }\n\n\n        //待选列表\n        //点击搜索按钮搜索 \n        that.context.container.find('.searchbar-icon').on('click', function() {\n            //过滤\n            that._filter();\n        });\n\n        //双击\n        that.context.list.attachEvent(\"onRowDblClicked\", function(rId, cInd) {\n            that.context.selectedList.datastore.add(that.context.list.datastore.item(rId));\n            if (Object.prototype.toString.call(that.context.events.onSelect) === '[object Function]') {\n                that.context.events.onSelect(that.getSelectedList());\n            }\n        });\n\n        //选中后按钮点击按钮\n        that.context.container.find(\".list-select,.list-selectall\").on('click', function() {\n            //获取选中的列表id\n            if (this.className.indexOf('list-selectall') != -1) {\n                that.context.list.selectAll();\n            }\n            var selectList = that.context.list.getSelectedRowId().split(/,/g);\n            //将datastore中选中的待选项添加到已选列表\n            $.each(that.context.list.datastore.data.pull, function(index, item) {\n                $.each(selectList, function(ind, ite) {\n                    if (item.id == ite) {\n                        that.context.selectedList.datastore.add(that.context.list.datastore.item(item.id));\n                    }\n                })\n            })\n            if (Object.prototype.toString.call(that.context.events.onSelect) === '[object Function]') {\n                that.context.events.onSelect(that.getSelectedList());\n            }\n        });\n\n\n        //已选列表\n        //双击\n        that.context.selectedList.attachEvent(\"onRowDblClicked\", function(rId, cInd) {\n            var unSelectList = [];//反选列表\n            //将datastore中选中的已选项添加到待选列表，并删除已选\n            $.each(that.context.selectedList.datastore.data.pull, function(index, item) {\n                if (item.id == rId) {\n                    unSelectList.push(that.context.selectedList.datastore.item(item.id));\n                }\n            })\n            // that.context.list.datastore.add(that.context.selectedList.datastore.item(rId));\n            that.context.selectedList.datastore.remove(rId);\n            //select事件触发\n            if (Object.prototype.toString.call(that.context.events.onSelect) === '[object Function]') {\n                that.context.events.onSelect(that.getSelectedList());\n            }\n            //触发反选事件\n            if (Object.prototype.toString.call(that.context.events.onSelect) === '[object Function]') {\n                that.context.events.onUnselect(unSelectList);\n            }\n        });\n\n        //选中后按钮点击按钮\n        that.context.container.find(\".list-unselect,.list-unselectall\").on('click', function() {\n            //获取选中的列表id\n            if (this.className.indexOf('list-unselectall') != -1) {\n                that.context.selectedList.selectAll();\n            }\n            var selectList = that.context.selectedList.getSelectedRowId().split(/,/g);\n            var unSelectList = [];//反选列表\n            //将datastore中选中的已选项添加到待选列表，并删除已选\n            $.each(that.context.selectedList.datastore.data.pull, function(index, item) {\n                $.each(selectList, function(ind, ite) {\n                    if (item.id == ite) {\n                        unSelectList.push(that.context.selectedList.datastore.item(item.id));\n                        // that.context.list.datastore.add(that.context.selectedList.datastore.item(item.id));\n                        that.context.selectedList.datastore.remove(item.id);\n                    }\n                })\n            })\n            //触发选择事件\n            if (Object.prototype.toString.call(that.context.events.onSelect) === '[object Function]') {\n                that.context.events.onSelect(that.getSelectedList());\n            }\n            //触发反选事件\n            if (Object.prototype.toString.call(that.context.events.onSelect) === '[object Function]') {\n                that.context.events.onUnselect(unSelectList);\n            }\n            \n        });\n\n        //待选列表右击\n        that.context.container.find(\".list2-grid\").bind(\"contextmenu\",\n            function() {\n                return false;\n            }\n        ).mousedown(function(e) {\n            if (3 == e.which) {\n                if (Object.prototype.toString.call(that.context.events.onRightClick) === '[object Function]') {\n                    that.context.events.onRightClick();\n                }\n            }\n        })\n\n    },\n    _guid: function() {\n\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = Math.random() * 16 | 0,\n                v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n\n    },\n    //获取待选列表数据\n    getList: function() {\n        return this.context.list.datastore.data.pull;\n    },\n    //获取已选列表数据\n    getSelectedList: function() {\n        return this.context.selectedList.datastore.data.pull;\n    },\n    //设置树数据\n    setTreeData: function(data) {\n        this._setTreeData(data);\n    },\n    //设置待选列表数据\n    setListData: function(data) {\n        this._setListData(data);\n    },\n    //设置已选列表数据\n    setSelectedListData: function(data) {\n        this._setSelectedListData(data);\n    },\n    //清空已选\n    clearSelectedList: function() {\n        this._setSelectedListData([]);\n    },\n    //设置组件皮肤\n    setSkin: function(skin) {\n        if (skin && skin.length > 0) {\n            this.context.container.removeClass(this.context.opts.skin).addClass(skin);\n            this.context.opts.skin = skin;\n        }\n    },\n    getUnselectedGrid: function(){\n        return this.context.list;\n    },\n    getSelectedGrid: function(){\n        return this.context.selectedList;\n    }\n\n})","vmdinterface":"{\"components\":[{\"cid\":\"vmduxprops\",\"layoutConfig\":{},\"userConfig\":{},\"cn\":[{\"cid\":\"uxprop\",\"id\":\"skin\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"skin\",\"zhname\":\"皮肤\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"group\":\"\",\"cmptype\":\"combo\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"[\\\\n    {text:'默认',value:'listselector-default'},\\\\n    {text:'测试',value:'listselector-test'}\\\\n]\\\"}\",\"storesource\":\"\"}},{\"cid\":\"uxpropgroup\",\"id\":\"树\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"树\",\"cid\":\"uxpropgroup\"},\"cn\":[{\"cid\":\"uxprop\",\"id\":\"showTree\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"showTree\",\"zhname\":\"展示树形条件区\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"group\":\"树\",\"cmptype\":\"boolean\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"\"}},{\"cid\":\"uxprop\",\"id\":\"treeStore\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"treeStore\",\"zhname\":\"数据集\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"group\":\"树\",\"cmptype\":\"store\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"treeStore\"}},{\"cid\":\"uxprop\",\"id\":\"displayField\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"displayField\",\"zhname\":\"展示值\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"group\":\"树\",\"cmptype\":\"storeField\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"treeStore\"}},{\"cid\":\"uxprop\",\"id\":\"valueField\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"valueField\",\"zhname\":\"实际值\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"group\":\"树\",\"cmptype\":\"storeField\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"treeStore\"}},{\"cid\":\"uxprop\",\"id\":\"parentField\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"parentField\",\"zhname\":\"父节点字段\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"group\":\"树\",\"cmptype\":\"storeField\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"treeStore\"}},{\"cid\":\"uxprop\",\"id\":\"folderIcon\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"folderIcon\",\"zhname\":\"文件夹图标\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"group\":\"树\",\"cmptype\":\"string\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"treeStore\"}},{\"cid\":\"uxprop\",\"id\":\"leafIcon\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"leafIcon\",\"zhname\":\"叶子节点图标\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"group\":\"树\",\"cmptype\":\"string\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"treeStore\"}},{\"cid\":\"uxprop\",\"id\":\"allowCheckbox\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"allowCheckbox\",\"zhname\":\"展示复选框\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"group\":\"树\",\"cmptype\":\"boolean\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"\"}},{\"cid\":\"uxprop\",\"id\":\"showRoot\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"showRoot\",\"zhname\":\"隐藏根节点\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"group\":\"树\",\"cmptype\":\"boolean\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"\"}},{\"cid\":\"uxprop\",\"id\":\"rootText\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"rootText\",\"zhname\":\"根节点名称\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"group\":\"树\",\"cmptype\":\"string\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"treeStore\"}},{\"cid\":\"uxprop\",\"id\":\"rootValue\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"rootValue\",\"zhname\":\"根节点值\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"group\":\"树\",\"cmptype\":\"string\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"treeStore\"}}]},{\"cid\":\"uxpropgroup\",\"id\":\"待选列表\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"待选列表\",\"cid\":\"uxpropgroup\"},\"cn\":[{\"cid\":\"uxprop\",\"id\":\"unSelectedTitle\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"unSelectedTitle\",\"zhname\":\"标题(不配置不展示)\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"group\":\"待选列表\",\"cmptype\":\"string\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"\"}},{\"cid\":\"uxprop\",\"id\":\"allowSearchbar\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"allowSearchbar\",\"zhname\":\"展示搜索栏\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"group\":\"待选列表\",\"cmptype\":\"boolean\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"treeStore\"}},{\"cid\":\"uxprop\",\"id\":\"unSelectedStore\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"unSelectedStore\",\"zhname\":\"数据集\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"group\":\"待选列表\",\"cmptype\":\"store\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"treeStore\"}},{\"cid\":\"uxprop\",\"id\":\"searchbarPlaceholder\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"searchbarPlaceholder\",\"zhname\":\"搜索栏提示\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"group\":\"待选列表\",\"cmptype\":\"string\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"treeStore\"}},{\"cid\":\"uxprop\",\"id\":\"searchField\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"searchField\",\"zhname\":\"搜索字段\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"group\":\"待选列表\",\"cmptype\":\"storeField\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"unSelectedStore\"}},{\"cid\":\"uxprop\",\"id\":\"headers\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"headers\",\"zhname\":\"表头\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"group\":\"待选列表\",\"cmptype\":\"string\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"\"}},{\"cid\":\"uxprop\",\"id\":\"columnIds\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"columnIds\",\"zhname\":\"表列ID(逗号分隔)\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"group\":\"待选列表\",\"cmptype\":\"string\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"\"}},{\"cid\":\"uxprop\",\"id\":\"associateId\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"associateId\",\"zhname\":\"关联ID\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"group\":\"待选列表\",\"cmptype\":\"storeField\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"unSelectedStore\"}},{\"cid\":\"uxprop\",\"id\":\"colWidth\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"colWidth\",\"zhname\":\"列宽\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"group\":\"待选列表\",\"cmptype\":\"string\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"\"}},{\"cid\":\"uxprop\",\"id\":\"colAlign\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"colAlign\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"group\":\"待选列表\",\"cmptype\":\"string\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"\"}}]},{\"cid\":\"uxpropgroup\",\"id\":\"已选列表\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"已选列表\",\"cid\":\"uxpropgroup\"},\"cn\":[{\"cid\":\"uxprop\",\"id\":\"selectedTitle\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"selectedTitle\",\"zhname\":\"标题标题(不配置不展示)\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"group\":\"已选列表\",\"cmptype\":\"string\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"\"}},{\"cid\":\"uxprop\",\"id\":\"selectedStore\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"selectedStore\",\"zhname\":\"数据集\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"\",\"uxcid\":\"\",\"group\":\"已选列表\",\"cmptype\":\"store\",\"cmpsettings\":\"{\\\"isMulti\\\":false,\\\"data\\\":\\\"\\\"}\",\"storesource\":\"\",\"radio_puX8\":\"store\"}}]}]},{\"cid\":\"vmduxmethods\",\"id\":\"方法\",\"layoutConfig\":{},\"userConfig\":{},\"cn\":[{\"cid\":\"uxmethod\",\"id\":\"getList\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"getList\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"获取待选列表数据，返回数组\",\"uxcid\":\"\",\"params\":\"\",\"code\":\"//直接填写方法内容\\nreturn thisComponent.getList();\",\"returnType\":\"\"}},{\"cid\":\"uxmethod\",\"id\":\"getSelectedList\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"getSelectedList\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"获取已选列表\",\"uxcid\":\"\",\"params\":\"\",\"code\":\"//直接填写方法内容\\nreturn thisComponent.getSelectedList();\",\"returnType\":\"\"}},{\"cid\":\"uxmethod\",\"id\":\"setTreeData\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"setTreeData\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"设置树组件数据集\",\"uxcid\":\"\",\"params\":\"store\",\"code\":\"//直接填写方法内容\\nthisComponent.setTreeData(store);\",\"returnType\":\"\"}},{\"cid\":\"uxmethod\",\"id\":\"setListData\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"setListData\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"设置待选列表数据集\",\"uxcid\":\"\",\"params\":\"store\",\"code\":\"//直接填写方法内容\\nthisComponent.setListData(store);\",\"returnType\":\"\"}},{\"cid\":\"uxmethod\",\"id\":\"setSelectedListData\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"setSelectedListData\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"设置已选列表数据集\",\"uxcid\":\"\",\"params\":\"store\",\"code\":\"//直接填写方法内容\\nthisComponent.setSelectedListData(store);\",\"returnType\":\"\"}},{\"cid\":\"uxmethod\",\"id\":\"clearSelectedList\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"clearSelectedList\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"清空所有已选项\",\"uxcid\":\"\",\"params\":\"\",\"code\":\"//直接填写方法内容\\nthisComponent.clearSelectedList();\",\"returnType\":\"\"}},{\"cid\":\"uxmethod\",\"id\":\"setSkin\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"setSkin\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"on\",\"desc\":\"设置皮肤\",\"uxcid\":\"\",\"params\":\"skinName\",\"code\":\"//直接填写方法内容\\nthisComponent.setSkin(skinName);\",\"returnType\":\"\"}},{\"cid\":\"uxmethod\",\"id\":\"getSelectedGrid\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"getSelectedGrid\",\"params\":\"\",\"desc\":\"获取已选列表表格\",\"isPublic\":\"on\",\"code\":\"//直接填写方法内容\\nreturn thisComponent.getSelectedGrid();\",\"returnType\":\"\"}},{\"cid\":\"uxmethod\",\"id\":\"getUnselectedGrid\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"getUnselectedGrid\",\"params\":\"\",\"desc\":\"获取待选列表表格\",\"isPublic\":\"on\",\"code\":\"//直接填写方法内容\\nreturn thisComponent.getUnselectedGrid();\",\"returnType\":\"\"}}]},{\"cid\":\"vmduxevents\",\"id\":\"事件\",\"layoutConfig\":{},\"userConfig\":{},\"cn\":[{\"cid\":\"uxevent\",\"id\":\"onSelect\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"onSelect\",\"zhname\":\"\",\"bindCmp\":\"\",\"bindValue\":\"\",\"isPublic\":\"\",\"desc\":\"用于单选时，选项从左侧到右侧时触发 \",\"uxcid\":\"\",\"params\":\"param1\",\"code\":\"\"}},{\"cid\":\"uxevent\",\"id\":\"onTreeSelect\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"onTreeSelect\",\"params\":\"param1\",\"desc\":\"树节点单击时触发\"}},{\"cid\":\"uxevent\",\"id\":\"onUnselect\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"onUnselect\",\"params\":\"param1\",\"desc\":\"用于反选时，选项从右侧到左侧时触发 \"}},{\"cid\":\"uxevent\",\"id\":\"onTreeChecked\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"onTreeChecked\",\"params\":\"param1\",\"desc\":\"用于树组件节点选中时触发\"}},{\"cid\":\"uxevent\",\"id\":\"onRightClick\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"onRightClick\",\"params\":\"rowId,colIndex\",\"desc\":\"已选列表右击时触发,返回点击的行ID，列索引\"}},{\"cid\":\"uxevent\",\"id\":\"onTreeDbClick\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"onTreeDbClick\",\"params\":\"param1\",\"desc\":\"树节点双击时触发\"}},{\"cid\":\"uxevent\",\"id\":\"onTreeRightClick\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"onTreeRightClick\",\"params\":\"param1\",\"desc\":\"树组件右击时触发\"}}]}]}","vmdresource":"{\"components\":[{\"cid\":\"vmdrescsss\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdresjss\",\"layoutConfig\":{},\"userConfig\":{},\"cn\":[{\"cid\":\"resjs\",\"id\":\"controller.js\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"resjs\",\"id\":\"components/ux/listselector/1.0/js/template-web.js\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"components/ux/listselector/1.0/js/template-web.js\",\"path\":\"components/ux/listselector/1.0/js/template-web.js\",\"absolutePath\":\"{{vmduxpath}}/components/ux/listselector/1.0/js/template-web.js\",\"ext\":\"js\"}}]},{\"cid\":\"vmdresimgs\",\"layoutConfig\":{},\"userConfig\":{},\"cn\":[{\"cid\":\"resimg\",\"id\":\"components/ux/listselector/1.0/img/query.png\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"components/ux/listselector/1.0/img/query.png\",\"path\":\"components/ux/listselector/1.0/img/query.png\",\"absolutePath\":\"{{vmduxpath}}/components/ux/listselector/1.0/img/query.png\",\"ext\":\"png\"}}]}]}"}