{"vmdversion":"2.0.3.1031","vmdlayout":"{\"components\":[{\"cid\":\"viewport\",\"id\":\"MyViewport\",\"layoutConfig\":{},\"userConfig\":{\"layout\":\"border\",\"afterrender\":\"MyViewport_afterrender\",\"beforerender\":\"MyViewport_beforerender\"},\"cn\":[{\"cid\":\"panel\",\"id\":\"MyPanel_head\",\"layoutConfig\":{},\"userConfig\":{\"x\":0,\"y\":0,\"height\":60,\"layout\":\"border\",\"bodyStyle\":\"background-color: #409EFF;\",\"region\":\"north\",\"id\":\"MyPanel_head\",\"header\":false},\"cn\":[{\"cid\":\"panel\",\"id\":\"MyPanel_logo\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"west\",\"layout\":\"border\",\"width\":200,\"maskDisabled\":true,\"border\":false,\"bodyStyle\":\"background-color: #0676fe;\",\"id\":\"MyPanel_logo\",\"header\":false},\"cn\":[{\"cid\":\"container\",\"id\":\"MyC_Logoimg\",\"layoutConfig\":{},\"userConfig\":{\"width\":58,\"height\":42,\"style\":\"background: url('/system/img/main/vmdlogo.png') no-repeat center;    margin-left: 20px;    margin-top: 5px;\",\"x\":0,\"y\":0,\"region\":\"west\",\"id\":\"MyC_Logoimg\",\"border\":false}},{\"cid\":\"label\",\"id\":\"MyLb_name\",\"layoutConfig\":{},\"userConfig\":{\"x\":70,\"y\":10,\"text\":\"VMD2.0\",\"style\":\"font-family: \\\"Microsoft Yahei\\\";    font-size: 26px;    color: #ffffff;    margin-left: 20px;    margin-top: 4px;\",\"region\":\"center\",\"split\":false,\"cls\":\"lineHeight200\",\"id\":\"MyLb_name\",\"width\":180}}]},{\"cid\":\"panel\",\"id\":\"MyP_Htool\",\"layoutConfig\":{\"align\":\"middle\",\"pack\":\"end\",\"scrollOffset\":20},\"userConfig\":{\"region\":\"east\",\"width\":520,\"layout\":\"hbox\",\"border\":false,\"style\":\"background-color: skyblue;\",\"bodyStyle\":\"background-color: #0676FE;\",\"id\":\"MyP_Htool\",\"header\":false,\"margins\":\"\",\"padding\":\"\",\"cmargins\":\"\",\"split\":false,\"afterrender\":\"MyP_Htool_afterrender\"},\"cn\":[{\"cid\":\"container\",\"id\":\"div3\",\"layoutConfig\":{},\"userConfig\":{\"width\":40,\"border\":false,\"backgroundImage\":\"/system/modules/eQ9ULgcVb1/img/tips.png\",\"backgroundRepeat\":\"no-repeat\",\"backgroundPosition\":\"center center\",\"flex\":\"\",\"disableImage\":false,\"click\":\"div3_click\"}},{\"cid\":\"container\",\"id\":\"MyC_pro\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"MyC_pro\",\"border\":false,\"style\":\"background-image: url(/system/img/main/sysmange.png);    background-repeat: no-repeat;    background-position: 5px center;    background-size: 16px;    padding-left: 25px;\",\"height\":40,\"width\":80,\"overCls\":\"div-hove\"},\"cn\":[{\"cid\":\"vmdButton\",\"id\":\"btnPro\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"btnPro\",\"style\":\"font-size: 12px;    color: #ffffff;    margin-right: 10px;    line-height: 30px;\",\"type\":\"text\",\"text\":\"项目管理\",\"click\":\"btnPro_click\"}}]},{\"cid\":\"container\",\"id\":\"div\",\"layoutConfig\":{},\"userConfig\":{\"x\":83,\"y\":25,\"height\":40,\"width\":80,\"style\":\"background-image: url(/system/img/main/hjbl.png);    background-repeat: no-repeat;    margin-right: 10px;    background-position: 8px center;    padding-left: 30px;\",\"border\":false,\"region\":\"center\",\"margins\":\"\",\"cls\":\"hove\",\"overCls\":\"div-hove\"},\"cn\":[{\"cid\":\"vmdButton\",\"id\":\"btnWorkSpaceManagement\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"btnWorkSpaceManagement\",\"text\":\"工区管理\",\"type\":\"text\",\"style\":\"font-size: 12px;    color: #ffffff;    margin-right: 10px;    line-height: 30px;\",\"x\":110,\"y\":22,\"click\":\"btnWorkSpaceManagement_click\",\"width\":\"\",\"region\":\"west\",\"margins\":\"0 5 0 0\"}}]},{\"cid\":\"container\",\"id\":\"div2\",\"layoutConfig\":{},\"userConfig\":{\"width\":80,\"height\":40,\"backgroundImage\":\"/system/modules/eQ9ULgcVb1/img/复合组件1.png\",\"backgroundPosition\":\"top left\",\"style\":\"margin-right: 10px;    background-image: url('/system/modules/eQ9ULgcVb1/img/复合组件1.png');    background-repeat: no-repeat;    background-position: 5px center;    padding-left: 30px;    background-size: 22px;\",\"border\":false,\"overCls\":\"div-hove\"},\"cn\":[{\"cid\":\"vmdButton\",\"id\":\"btn_uxcom\",\"layoutConfig\":{},\"userConfig\":{\"type\":\"text\",\"id\":\"btn_uxcom\",\"click\":\"btn_uxcom_click\",\"style\":\"font-size: 12px;    color: #ffffff;    line-height: 30px;\",\"margins\":\"0 10 0 5\",\"text\":\"复合组件\"}}]},{\"cid\":\"container\",\"id\":\"MyC_zy\",\"layoutConfig\":{},\"userConfig\":{\"x\":270,\"y\":25,\"width\":80,\"id\":\"MyC_zy\",\"style\":\"background-image: url(/system/img/main/zy.png);    background-repeat: no-repeat;    background-position: 8px center;    padding-left: 28px;    background-size: 18px;\",\"height\":40,\"pageX\":\"\",\"pageY\":\"\",\"border\":false,\"overCls\":\"div-hove\"},\"cn\":[{\"cid\":\"vmdButton\",\"id\":\"btnZy\",\"layoutConfig\":{},\"userConfig\":{\"x\":200,\"y\":22,\"style\":\"font-size: 12px;    color: #ffffff;    line-height: 30px;\",\"text\":\"资源管理\",\"type\":\"text\",\"width\":\"\",\"id\":\"btnZy\",\"click\":\"btnZy_click\",\"margins\":\"0 5 0 0\"}}]},{\"cid\":\"container\",\"id\":\"MyC_hjbl\",\"layoutConfig\":{},\"userConfig\":{\"x\":270,\"y\":25,\"width\":1,\"style\":\"background-image: url(/system/img/main/xtpz.png);    background-repeat: no-repeat;    background-position: 8px center;    background-size: 18px;    padding-left: 28px;    display: none\",\"height\":40,\"id\":\"MyC_hjbl\",\"border\":false,\"overCls\":\"div-hove\"},\"cn\":[{\"cid\":\"vmdButton\",\"id\":\"btnXtpz\",\"layoutConfig\":{},\"userConfig\":{\"style\":\"font-size: 12px;    color: #ffffff;    line-height: 28px;\",\"text\":\"系统配置\",\"width\":\"\",\"type\":\"text\",\"y\":22,\"x\":290,\"id\":\"btnXtpz\",\"click\":\"btnXtpz_click\",\"margins\":\"0 5 0 0\"}}]},{\"cid\":\"container\",\"id\":\"MyC_grxx\",\"layoutConfig\":{},\"userConfig\":{\"x\":360,\"y\":25,\"width\":80,\"style\":\"background-image: url(/system/img/main/grxx.png);    background-repeat: no-repeat;    background-position: 5px center;    background-size: 18px;    padding-left: 25px;\",\"height\":40,\"id\":\"MyC_grxx\",\"border\":false,\"margins\":\"\",\"overCls\":\"\"},\"cn\":[{\"cid\":\"vmdButton\",\"id\":\"btnGrxx\",\"layoutConfig\":{},\"userConfig\":{\"style\":\"font-size: 12px;    color: #ffffff;    cursor: default;    line-height: 28px;\",\"text\":\"个人信息\",\"type\":\"text\",\"width\":\"\",\"id\":\"btnGrxx\",\"x\":380,\"y\":22,\"click\":\"btnGrxx_click\",\"margins\":\"0 10 0 0\"}}]},{\"cid\":\"container\",\"id\":\"MyC_tc\",\"layoutConfig\":{},\"userConfig\":{\"x\":430,\"y\":25,\"width\":60,\"style\":\"background-image: url(/system/img/main/tc.png);    background-repeat: no-repeat;    background-position: 5px center;    background-size: 16px;    padding-left: 25px;\",\"height\":40,\"id\":\"MyC_tc\",\"afterrender\":\"MyC_tc_afterrender\",\"border\":false,\"overCls\":\"div-hove\"},\"cn\":[{\"cid\":\"vmdButton\",\"id\":\"button\",\"layoutConfig\":{},\"userConfig\":{\"x\":440,\"y\":22,\"type\":\"text\",\"width\":\"\",\"style\":\"font-size: 12px;    color: #ffffff;    line-height: 28px;\",\"text\":\"退&nbsp;&nbsp;出\",\"id\":\"button\",\"click\":\"button_click\"}}]}]},{\"cid\":\"panel\",\"id\":\"panel3\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"center\",\"border\":false,\"header\":false,\"layout\":\"auto\",\"bodyStyle\":\"background-color: #0676FE;\",\"width\":\"\"},\"cn\":[{\"cid\":\"panel\",\"id\":\"panel4\",\"layoutConfig\":{},\"userConfig\":{\"bodyStyle\":\"background-color: #0676FE;\",\"border\":false,\"header\":false,\"height\":45},\"cn\":[{\"cid\":\"panel\",\"id\":\"panel6\",\"layoutConfig\":{},\"userConfig\":{\"border\":false,\"header\":false,\"bodyStyle\":\"background-color: #0676FE;\",\"height\":50,\"width\":211,\"afterrender\":\"panel6_afterrender\"},\"cn\":[{\"cid\":\"vmdButton\",\"id\":\"btnWorkSpaceName\",\"layoutConfig\":{},\"userConfig\":{\"text\":\"我的工区\",\"id\":\"btnWorkSpaceName\",\"type\":\"text\",\"style\":\"font-family: \\\"Microsoft Yahei\\\";    font-size: 18px;    color: #fff;    line-height: 55px;    background-image: icon-double-angle-down;    background-position: center left;\",\"y\":18,\"region\":\"center\",\"click\":\"btnWorkSpaceName_click\",\"icon\":\"icon-angle-down\"}},{\"cid\":\"vmdButton\",\"id\":\"btnMenu1\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"btnMenu1\",\"text\":\"\",\"click\":\"btnMenu1_click\",\"type\":\"text\",\"style\":\"font-size: 18px;    color: #fff;    margin-left: 10px;\",\"x\":100,\"y\":12,\"region\":\"east\",\"icon\":\"icon-cog\"}}]}]},{\"cid\":\"container\",\"id\":\"div1\",\"layoutConfig\":{},\"userConfig\":{\"height\":20,\"border\":false,\"style\":\"background-image: url('/system/modules/eQ9ULgcVb1/img/down.png');    background-repeat: no-repeat;    background-size: 17px 11px;    margin-right: 10px;    background-position: 30px 0;\",\"backgroundImage\":\"/system/modules/eQ9ULgcVb1/img/down.png\",\"hidden\":true}}]}]},{\"cid\":\"panel\",\"id\":\"MyP_info\",\"layoutConfig\":{},\"userConfig\":{\"x\":0,\"y\":60,\"height\":640,\"layout\":\"border\",\"region\":\"center\",\"id\":\"MyP_info\",\"header\":false,\"border\":false},\"cn\":[{\"cid\":\"panel\",\"id\":\"MyP_ModelTree\",\"layoutConfig\":{},\"userConfig\":{\"width\":220,\"height\":639,\"layout\":\"border\",\"x\":0,\"y\":0,\"region\":\"west\",\"id\":\"MyP_ModelTree\",\"header\":false,\"style\":\"background-color: white;\",\"bodyStyle\":\"background-color: white;\",\"split\":true,\"floatable\":false,\"collapseMode\":\"mini\",\"collapsible\":true,\"border\":false},\"cn\":[{\"cid\":\"panel\",\"id\":\"MyPanel2\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"north\",\"id\":\"MyPanel2\",\"layout\":\"border\",\"border\":true,\"header\":false,\"height\":40,\"afterrender\":\"MyPanel2_afterrender\"},\"cn\":[{\"cid\":\"panel\",\"id\":\"MyPanel\",\"layoutConfig\":{},\"userConfig\":{\"x\":0,\"y\":0,\"border\":false,\"header\":false,\"layout\":\"border\",\"width\":220,\"height\":40,\"region\":\"center\",\"autoHeight\":false,\"autoWidth\":false,\"id\":\"MyPanel\"},\"cn\":[{\"cid\":\"vmdButton\",\"id\":\"btnProjectName\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"btnProjectName\",\"text\":\"源头数据采集项目\",\"style\":\"font-family: Microsoft YaHei;    font-size: 16px;    text-align: left;    padding-left: 10px;    overflow: hidden;\",\"width\":167,\"height\":24,\"region\":\"center\",\"type\":\"text\",\"disabled\":false,\"hidden\":false,\"autoHide\":false,\"x\":3,\"y\":14,\"click\":\"btnProjectName_click\",\"icon\":\"icon-angle-down\"}},{\"cid\":\"vmdButton\",\"id\":\"ListBtn\",\"layoutConfig\":{},\"userConfig\":{\"x\":180,\"y\":5,\"width\":30,\"height\":20,\"id\":\"ListBtn\",\"text\":\"\",\"type\":\"text\",\"style\":\"font-size: 16px;    border: 0;\",\"region\":\"east\",\"cls\":\"\",\"icon\":\"icon-wrench\",\"click\":\"ListBtn_click\",\"disabled\":false}}]}]},{\"cid\":\"panel\",\"id\":\"MyPanel1\",\"layoutConfig\":{},\"userConfig\":{\"x\":70,\"y\":130,\"height\":300,\"border\":false,\"header\":false,\"region\":\"center\",\"layout\":\"fit\",\"width\":357},\"cn\":[{\"cid\":\"tabpanel\",\"id\":\"MyTabs\",\"layoutConfig\":{},\"userConfig\":{\"unstyled\":false,\"activeItem\":\"panel\",\"activeTab\":0,\"tabchange\":\"MyTabs_tabchange\"},\"cn\":[{\"cid\":\"panel\",\"id\":\"panel\",\"layoutConfig\":{},\"userConfig\":{\"title\":\"模块\",\"id\":\"panel\",\"border\":false,\"layout\":\"border\",\"afterrender\":\"panel_afterrender\"},\"cn\":[{\"cid\":\"panel\",\"id\":\"panel5\",\"layoutConfig\":{},\"userConfig\":{\"border\":false,\"header\":false,\"region\":\"north\",\"layout\":\"fit\",\"height\":28,\"afterrender\":\"panel5_afterrender\"},\"cn\":[{\"cid\":\"vmdComlist\",\"id\":\"mCombo\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"mCombo\",\"afterrender\":\"mCombo_afterrender\",\"selectChanged\":\"mCombo_selectChanged\",\"style\":\"border: 1px solid #dfdfdf;    border-right: 0;    border-top: 0;    font-size: 13px;\"}}]},{\"cid\":\"vmdTree\",\"id\":\"hwTree\",\"layoutConfig\":{},\"userConfig\":{\"x\":0,\"y\":0,\"afterrender\":\"hwTree_afterrender\",\"height\":\"\",\"width\":220,\"onOpenEnd\":\"hwTree_onOpenEnd\",\"nodeClick\":\"hwTree_nodeClick\",\"region\":\"center\",\"onOpenStart\":\"hwTree_onOpenStart\",\"onDblClick\":\"hwTree_onDblClick\",\"doubleClick\":\"\",\"nodeSelected\":\"\",\"beforerender\":\"hwTree_beforerender\",\"CheckBox\":false}}]},{\"cid\":\"panel\",\"id\":\"panel1\",\"layoutConfig\":{},\"userConfig\":{\"title\":\"工作流\",\"border\":false,\"layout\":\"fit\"},\"cn\":[{\"cid\":\"panel\",\"id\":\"panel7\",\"layoutConfig\":{},\"userConfig\":{\"border\":false,\"header\":false,\"layout\":\"fit\",\"afterrender\":\"panel7_afterrender\"},\"cn\":[{\"cid\":\"vmdTree\",\"id\":\"hwTreeWorkFlow\",\"layoutConfig\":{},\"userConfig\":{\"height\":580,\"width\":220,\"id\":\"hwTreeWorkFlow\",\"afterrender\":\"hwTreeWorkFlow_afterrender\",\"nodeClick\":\"hwTreeWorkFlow_nodeClick\",\"onOpenEnd\":\"hwTreeWorkFlow_onOpenEnd\",\"beforerender\":\"hwTreeWorkFlow_beforerender\"}}]}]},{\"cid\":\"panel\",\"id\":\"panel2\",\"layoutConfig\":{},\"userConfig\":{\"title\":\"数据服务\",\"border\":false,\"layout\":\"fit\"},\"cn\":[{\"cid\":\"panel\",\"id\":\"panel8\",\"layoutConfig\":{},\"userConfig\":{\"layout\":\"fit\",\"border\":false,\"header\":false,\"afterrender\":\"panel8_afterrender\"},\"cn\":[{\"cid\":\"vmdTree\",\"id\":\"hwTreeDataService\",\"layoutConfig\":{},\"userConfig\":{\"height\":580,\"width\":220,\"id\":\"hwTreeDataService\",\"afterrender\":\"hwTreeDataService_afterrender\",\"nodeClick\":\"hwTreeDataService_nodeClick\",\"beforerender\":\"hwTreeDataService_beforerender\"}}]}]}]}]}]},{\"cid\":\"panel\",\"id\":\"MyP_jcxx\",\"layoutConfig\":{},\"userConfig\":{\"width\":900,\"x\":220,\"y\":0,\"height\":640,\"layout\":\"anchor\",\"region\":\"center\",\"id\":\"MyP_jcxx\",\"header\":false,\"border\":false,\"afterrender\":\"MyP_jcxx_afterrender\"},\"cn\":[{\"cid\":\"container\",\"id\":\"divJcxx\",\"layoutConfig\":{},\"userConfig\":{\"layout\":\"anchor\",\"width\":869,\"height\":629,\"id\":\"divJcxx\",\"hidden\":true,\"anchor\":\"100% 100%\"}},{\"cid\":\"vmd.ux.WorkflowModuleInfo\",\"id\":\"WorkflowModuleInfo\",\"layoutConfig\":{},\"userConfig\":{\"hidden\":true}},{\"cid\":\"vmd.ux.DataServiceModuleInfo\",\"id\":\"DataServiceModuleInfo\",\"layoutConfig\":{},\"userConfig\":{\"hidden\":true}},{\"cid\":\"vmd.ux.ModuleInfo\",\"id\":\"ModuleInfo\",\"layoutConfig\":{},\"userConfig\":{\"anchor\":\"100% 100%\",\"hidden\":true}}]}]},{\"cid\":\"vmdMenu\",\"id\":\"hwMenuWorkSpaceList\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"west\",\"id\":\"hwMenuWorkSpaceList\",\"click\":\"hwMenuWorkSpaceList_click\",\"width\":120}},{\"cid\":\"vmdMenu\",\"id\":\"hwMenuWorkSpace\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"west\",\"id\":\"hwMenuWorkSpace\",\"click\":\"hwMenuWorkSpace_click\",\"width\":50},\"cn\":[{\"cid\":\"vmdMenuItem\",\"id\":\"hwMenuItemAddProject\",\"layoutConfig\":{},\"userConfig\":{\"text\":\"添加项目\",\"hidden\":false,\"id\":\"hwMenuItemAddProject\"}},{\"cid\":\"vmdMenuItem\",\"id\":\"hwMenuItemNewProject\",\"layoutConfig\":{},\"userConfig\":{\"text\":\"新建项目\",\"hidden\":true,\"id\":\"hwMenuItemNewProject\"}},{\"cid\":\"vmdMenuItem\",\"id\":\"hwMenuItemWorkSpaceConfig\",\"layoutConfig\":{},\"userConfig\":{\"text\":\"参数配置\",\"hidden\":false,\"id\":\"hwMenuItemWorkSpaceConfig\"}}]},{\"cid\":\"vmdMenu\",\"id\":\"hwMenuProject\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"east\",\"id\":\"hwMenuProject\",\"click\":\"hwMenuProject_click\",\"width\":50},\"cn\":[{\"cid\":\"vmdMenuItem\",\"id\":\"hwMenuItemProjectConfig\",\"layoutConfig\":{},\"userConfig\":{\"text\":\"项目配置\",\"id\":\"hwMenuItemProjectConfig\"}},{\"cid\":\"vmdMenuItem\",\"id\":\"ProjectNewFord\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"ProjectNewFord\",\"text\":\"新建分类\",\"hidden\":true}},{\"cid\":\"vmdMenuItem\",\"id\":\"ProjectNewMode\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"ProjectNewMode\",\"text\":\"新建模块\",\"hidden\":true}},{\"cid\":\"vmdMenuItem\",\"id\":\"hwMenuItemProjectDel\",\"layoutConfig\":{},\"userConfig\":{\"text\":\"删除\",\"id\":\"hwMenuItemProjectDel\"}}]},{\"cid\":\"vmdMenu\",\"id\":\"hwMenuProjectList\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"south\",\"id\":\"hwMenuProjectList\",\"width\":120,\"click\":\"hwMenuProjectList_click\"}},{\"cid\":\"vmdMenu\",\"id\":\"hwMenuProjectConfig\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"hwMenuProjectConfig\"},\"cn\":[{\"cid\":\"vmdMenuItem\",\"id\":\"projectInfo\",\"layoutConfig\":{},\"userConfig\":{\"text\":\"项目配置\",\"hidden\":false,\"id\":\"projectInfo\",\"click\":\"projectInfo_click\"}},{\"cid\":\"vmdMenuItem\",\"id\":\"RegInfo\",\"layoutConfig\":{},\"userConfig\":{\"text\":\"发布注册配置\",\"hidden\":false,\"id\":\"RegInfo\",\"click\":\"RegInfo_click\"}},{\"cid\":\"vmdMenuItem\",\"id\":\"varsInfo\",\"layoutConfig\":{},\"userConfig\":{\"text\":\"环境变量\",\"hidden\":false,\"id\":\"varsInfo\",\"click\":\"varsInfo_click\"}}]},{\"cid\":\"vmdMenu\",\"id\":\"hwMenuProMange\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"hwMenuProMange\"},\"cn\":[{\"cid\":\"vmdMenuItem\",\"id\":\"newProject\",\"layoutConfig\":{},\"userConfig\":{\"text\":\"新建项目\",\"hidden\":false,\"id\":\"newProject\",\"click\":\"newProject_click\"}},{\"cid\":\"vmdMenuItem\",\"id\":\"projectExp\",\"layoutConfig\":{},\"userConfig\":{\"text\":\"导出项目\",\"hidden\":false,\"id\":\"projectExp\",\"click\":\"projectExp_click\"}},{\"cid\":\"vmdMenuItem\",\"id\":\"projectImp\",\"layoutConfig\":{},\"userConfig\":{\"text\":\"项目导入\",\"hidden\":false,\"id\":\"projectImp\",\"click\":\"projectImp_click\"}}]},{\"cid\":\"vmd.ux.Uploader\",\"id\":\"Uploader\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"east\",\"width\":\"\",\"height\":\"\",\"hidden\":true}}]},{\"cid\":\"vmddataset\",\"id\":\"数据集\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdvariable\",\"id\":\"变量\",\"layoutConfig\":{},\"userConfig\":{},\"cn\":[{\"cid\":\"vmdVariable\",\"id\":\"hwvarWorkSpaceId\",\"layoutConfig\":{},\"userConfig\":{\"cid\":\"vmdVariable\",\"id\":\"hwvarWorkSpaceId\"}},{\"cid\":\"vmdVariable\",\"id\":\"hwproject_id\",\"layoutConfig\":{},\"userConfig\":{\"cid\":\"vmdVariable\",\"id\":\"hwproject_id\"}}]},{\"cid\":\"vmdsubviewport\",\"id\":\"SubView_Window\",\"layoutConfig\":{},\"userConfig\":{}}]}","vmdevents":"//上次点击的节点\nvar bselNodeId = \"\";\n//获取传递的设计模式\nvar allowedDesigner = false;\nvar einfo = Ext.util.Cookies.get('hwEcyLogin');\nvar login = Ext.util.Cookies.get('hwLogin');\n// 项目ID\nvar hwproject_id = '';\nvar lastWorkId = ''; //上一个活动工区 \nvar myMask, selectData = [],\n    cateData = [];\nvar store = new Ext.data.JsonStore({\n    proxy: new Ext.data.MemoryProxy(),\n    fields: ['id', 'name', 'category_id', 'project_id']\n});\n// vmd.workspace = {\n//     workflowIp: '',\n//     dataServiceIp: '',\n//     workspaceid: ''\n// }\n\n//初始化数据\nfunction hwTree_afterrender(sender) {\n    // 清空树原有的默认数据\n    hwTree.deleteChildItems(0);\n    hwTree.el.dom.setAttribute(\"data-step\", \"4\");\n    hwTree.el.dom.setAttribute(\"data-intro\", \"项目模块树，用于展示该项目的分类及模块，通过切换项目实现项目树信息的变化；\");\n    hwTree.el.dom.setAttribute(\"data-position\", \"right\");\n}\n\nfunction hwTree_onOpenEnd(sender, id) {\n    OpenNOde(id)\n}\n// 展开节点操作\nfunction OpenNOde(id, callback) {\n    var proId = id;\n    var mytree = hwTree;\n    mytree.newnode = false;\n    var hasChild = mytree.hasChildren(proId);\n    var selnode = mytree.itemObj[proId];\n    var selnodepath = selnode.path;\n    var projectId = hwproject_id.getValue();\n    var childParentId = id;\n\n    // return;\n    if(!selnode.loadChild && !selnode.isModel) {\n\n        var myMask = new Ext.LoadMask(Ext.getCmp(\"hwTree\").el, {\n            msg: \"数据加载中,请稍后...\",\n            msgCls: 'z-index:10000;'\n        });\n        myMask.show();\n\n        var bCategoryFlag = false;\n        var bInfoFlag = false;\n\n        hwDas.ajax({\n            das: {\n                idedas: true\n            },\n            url: \"CDEServcie/module/category\",\n            type: 'get',\n            timeout: 5000,\n            params: {\n                project_id: projectId,\n                parent_id: childParentId\n            },\n            success: function(result) {\n                var datajson = result.data[0].datas;\n                var treeDataJson = [];\n                for(var i = 0; i < datajson.length; i++) {\n                    mytree.insertNewChild(proId, datajson[i].id, datajson[i].name);\n                    mytree.setItemImage2(datajson[i].id, \"tree/folderClosed.gif\", \"tree/folderOpen.gif\", \"tree/folderClosed.gif\")\n                    mytree.insertNewChild(datajson[i].id, datajson[i].id + \"-0\", \"\");\n                    mytree.closeItem(datajson[i].id);\n                    var treenode = mytree.item(datajson[i].id);\n                    treenode.path = selnodepath + \"/\" + datajson[i].id;\n                    treenode.projectId = projectId;\n                    if(treenode) {\n                        treenode.isFord = true;\n                        treenode.loadChild = false;\n                    }\n                    mytree.itemObj[datajson[i].id] = treenode;\n                }\n\n                bCategoryFlag = true;\n                if(bCategoryFlag && bInfoFlag) {\n                    myMask.hide();\n                }\n                if(callback) {\n                    callback();\n                }\n            },\n            error: function(msg) {\n                bCategoryFlag = true;\n                if(bCategoryFlag && bInfoFlag) {\n                    myMask.hide();\n                }\n                Ext.Msg.alert(\"提示\", \"获取模块信息失败\", function() {})\n            }\n        })\n        if(!selnode.loadChild) {\n            mytree.deleteItem(id + \"-0\", false);\n        }\n        selnode.loadChild = true;\n        hwDas.ajax({\n            das: {\n                idedas: true\n            },\n            url: \"CDEServcie/module/info\",\n            type: 'get',\n            timeout: 5000,\n            params: {\n                category_id: childParentId,\n                project_id: projectId\n            },\n            success: function(result) {\n                var datajson = result.data[0].datas;\n                var treeDataJson = [];\n                for(var i = 0; i < datajson.length; i++) {\n                    mytree.insertNewChild(proId, datajson[i].id, datajson[i].name);\n                    mytree.setItemImage2(datajson[i].id, \"tree/model.png\", \"tree/model.png\", \"tree/model.png\")\n                    var treenode = mytree.item(datajson[i].id);\n                    treenode.path = selnodepath + \"/\" + datajson[i].id;\n                    treenode.projectId = projectId;\n                    if(treenode) {\n                        treenode.isModel = true;\n                        treenode.createuser = datajson[i].row_created_by;\n                        treenode.createtime = datajson[i].row_created_date;\n                        treenode.changetime = datajson[i].row_changed_date;\n                        treenode.changeuser = datajson[i].row_changed_by;\n                        treenode.remark = datajson[i].remark;\n                        treenode.code = datajson[i].code;\n                    }\n                    mytree.itemObj[datajson[i].id] = treenode;\n                }\n                bInfoFlag = true;\n                if(bCategoryFlag && bInfoFlag) {\n                    myMask.hide();\n                }\n                if(callback) {\n                    callback();\n                }\n            },\n            error: function(msg) {\n                bInfoFlag = true;\n                if(bCategoryFlag && bInfoFlag) {\n                    myMask.hide();\n                }\n                Ext.Msg.alert(\"提示\", \"获取模块信息失败\")\n            }\n        })\n    }\n}\nvar lastnodeType = \"-1\"; // 0:空白，1：分类，2：模板\n//点击树节点操作\nfunction hwTree_nodeClick(sender, id) {\n    var proId = id;\n    var mytree = hwTree;\n    mytree.newnode = false;\n    var hasChild = mytree.hasChildren(proId);\n    var selnode = mytree.itemObj[proId];\n    var selnodepath = selnode.path;\n    var projectId = btnProjectName.projectId;\n    var childParentId = \"0\";\n    // if(bselNodeId != id) \n    {\n        if(selnode.isModel) {\n            divJcxx.hide();\n            ModuleInfo.show();\n            WorkflowModuleInfo.hide();\n            DataServiceModuleInfo.hide();\n\n            ModuleInfo.refresh(hwTree, projectId, btnWorkSpaceName.workspaceId);\n            lastnodeType = \"2\"\n            // document.getElementById(\"iframe_page\").src = vmd.virtualPath + '/modules/eQ9ULgcVb1/eQ9ULgcVb5/hwa99a3307.html';\n        } else {\n            if(lastnodeType != \"1\") {\n                divJcxx.show();\n                ModuleInfo.hide()\n                WorkflowModuleInfo.hide();\n                DataServiceModuleInfo.hide();\n\n                document.getElementById(\"iframe_page\").src = vmd.virtualPath + '/modules/eQ9ULgcVb1/eQ9ULgcVb5/hw03cb4931.html';\n                //MyP_jcxx.body.update(\"<\" + \"iframe \" + \" src='/modules/eQ9ULgcVb1/eQ9ULgcVb5/hw03cb4931.html' \" + \" width=100% height=100% frameborder=0  \" + \">\" + \"sdsds\" + \"<\" + \"/\" + \"iframe\" + \">\");\n                // projectId = selnode.projectId;\n                childParentId = proId;\n                lastnodeType = \"1\";\n            }\n\n            // document.getElementById(\"iframe_page\").src = vmd.virtualPath + '/modules/eQ9ULgcVb1/eQ9ULgcVb5/hw03cb4931.html';\n        }\n    }\n    bselNodeId = id;\n}\n//创建分类按钮操作\nfunction creatFord() {\n    var addford = function(fordname, callback) {\n        var mytree = hwTree;\n        var selId = mytree.getSelectedItemId();\n        var selnode = mytree.itemObj[selId];\n        var selnodepath = selnode.path;\n        var parentId;\n        var projectId;\n        var nodename = fordname;\n        var newnodeid = newGuid(10);\n        var newcode = newGuid(10);\n        var xh = 10;\n        if(selnode.isProject) {\n            parentId = \"0\";\n            projectId = selId;\n        } else if(selnode.isModel) {\n            return;\n        } else if(selnode.isFord) {\n            parentId = selId;\n            projectId = selnode.projectId;\n        }\n        myMask = new Ext.LoadMask(Ext.getBody(), {\n            msg: \"加载中,请稍后...\"\n        });\n        myMask.show();\n        // 判断同一目录下是否存在相同名称分类\n        checkfordReName(projectId, parentId, newnodeid, nodename, function() {\n            if(callback) {\n                callback()\n            }\n            hwDas.ajax({\n                das: {\n                    idedas: true\n                },\n                url: \"CDEServcie/module/category\",\n                type: 'post',\n                contentType: 'application/json;charset=UTF-8',\n                timeout: 5000,\n                params: {\n                    parent_id: parentId,\n                    name: nodename,\n                    code: newcode,\n                    project_id: projectId,\n                    id: newnodeid,\n                    xh: xh\n                },\n                datas: [{\n                    parent_id: parentId,\n                    name: nodename,\n                    code: newcode,\n                    project_id: projectId,\n                    id: newnodeid,\n                    xh: xh\n                }],\n                success: function(result) {\n                    mytree.insertNewChild(selId, newnodeid, nodename);\n                    mytree.setItemImage2(newnodeid, \"tree/folderClosed.gif\", \"tree/folderOpen.gif\", \"tree/folderClosed.gif\")\n                    var treenode = mytree.item(newnodeid);\n                    treenode.path = selnodepath + \"/\" + newnodeid;\n                    treenode.projectId = projectId;\n                    selnode.loadChild = true;\n                    if(treenode) {\n                        treenode.isFord = true;\n                        treenode.loadChild = true;\n                    }\n                    mytree.itemObj[newnodeid] = treenode;\n                    myMask.hide();\n                },\n                error: function(msg) {\n                    myMask.hide();\n                    Ext.Msg.alert(\"提示\", \"新建目录失败\")\n                }\n            })\n        })\n    }\n    var fordname = new Ext.MyFordWin(addford, '');\n    fordname.show();\n}\n\n//删除目录 模块信息\nfunction button1_click(sender) {\n    var mytree = hwTree;\n    var selId = mytree.getSelectedItemId();\n    var selnode = mytree.itemObj[selId];\n    var haschild = mytree.hasChildren(selId);\n\n    if(selId == \"hwZ8jCmRKR\" || selId == \"eQ9ULgcVc5\" || selId == \"eQ9ULgcVb5\" || selId == \"hwa99a3307\" || selId == \"hwc6d63bc6\") {\n        Ext.Msg.alert(\"提示\", \"该模块禁止删除！\")\n        return\n    }\n\n    if(mytree.itemObj[selId].projectId == \"eQ9ULgcVb1\") {\n        Ext.Msg.confirm(\"提示\", \"删除的模块或项目为协同办公，请谨慎操作\", function(type) {\n            if(type == \"yes\") {\n                deleteNode();\n            } else\n                return;\n        })\n        return;\n    }\n    deleteNode();\n}\n\nfunction deleteNode() {\n    var mytree = hwTree;\n    var selId = mytree.getSelectedItemId();\n    var selnode = mytree.itemObj[selId];\n    var haschild = mytree.hasChildren(selId);\n\n    //删除文件夹\n    if(selnode.isProject) {\n        if(haschild > 0) {\n            Ext.Msg.alert(\"提示\", \"存在子目录或模块，请删除子目录或子模块后再删除该项目！\")\n            return\n        }\n        Ext.Msg.confirm(\"提示\", \"删除项目后，项目下的所有文件都将删除。确认要删除该项目！\", function(type) {\n            if(type == \"yes\") {\n                hwDas.ajax({\n                    das: {\n                        idedas: true\n                    },\n                    url: \"CDEServcie/project/info\",\n                    type: 'delete',\n                    timeout: 5000,\n                    params: {\n                        id: selId\n                    },\n                    success: function(result) {\n                        mytree.deleteItem(selId, true);\n                        getQueryData();\n                    },\n                    error: function(msg) {\n                        Ext.Msg.alert(\"提示\", \"删除项目失败\")\n                    }\n                })\n            }\n        })\n        return;\n    }\n    //删除文件夹\n    if(selnode.isFord) {\n        if(haschild > 0) {\n            Ext.Msg.alert(\"提示\", \"存在子目录或模块，请删除子目录或子模块后再删除该目录\")\n            return\n        }\n        Ext.Msg.confirm(\"提示\", \"确认要删除该目录！\", function(type) {\n            if(type == \"yes\") {\n                hwDas.ajax({\n                    das: {\n                        idedas: true\n                    },\n                    url: \"CDEServcie/module/category\",\n                    type: 'delete',\n                    timeout: 5000,\n                    params: {\n                        id: selId\n                    },\n                    success: function(result) {\n                        hwDas.remove(\"vmd\", 'modules' + selnode.path, function() {\n                            hwDas.remove(\"vmd\", 'modules' + selnode.path, function() {\n                                hwDas.remove(\"vmd\", 'modules' + selnode.path, function() {\n                                    Tips.tips(\"删除分类成功\", \"success\");\n                                    getQueryData();\n                                }, function(msg) {\n                                    Tips.tips(\"删除分类失败\", \"error\");\n                                })\n                            }, function(msg) {\n                                Tips.tips(\"删除分类失败\", \"error\");\n                            })\n                        }, function(msg) {\n                            Tips.tips(\"删除分类失败\", \"error\");\n                        })\n                        mytree.deleteItem(selId, true);\n                    },\n                    error: function(msg) {\n                        Ext.Msg.alert(\"提示\", \"删除分类失败\")\n                    }\n                })\n            }\n        })\n        return;\n    }\n    //删除模块\n    if(selnode.isModel) {\n        Ext.Msg.confirm(\"提示\", \"确认要删除该模块？\", function(type) {\n            if(type == \"yes\") {\n                //先删除模块信息\n                hwDas.ajax({\n                    das: {\n                        idedas: true\n                    },\n                    url: \"CDEServcie/module/info\",\n                    type: 'delete',\n                    timeout: 5000,\n                    params: {\n                        id: selId\n                    },\n                    success: function(result) {\n                        //删除模块文件对应关系\n                        // hwDas.ajax({\n                        //     das: {\n                        //         idedas: true\n                        //     },\n                        //     url: \"CDEServcie/module/file\",\n                        //     type: 'delete',\n                        //     timeout: 5000,\n                        //     params: {\n                        //         module_id: selId\n                        //     },\n                        //     success: function(result) {\n                        Tips.tips(\"删除模块成功\", \"success\");\n                        getQueryData();\n                        //     },\n                        //     error: function(msg) {\n                        //         Ext.Msg.alert(\"提示\", \"删除模块文件信息失败\")\n                        //     }\n                        // })\n                        mytree.deleteItem(selId); //, true);\n                    },\n                    error: function(msg) {\n                        Ext.Msg.alert(\"提示\", \"删除模块信息失败\")\n                        return\n                    }\n                })\n\n                //删除vmd文件\n                hwDas.remove(\"vmd\", 'modules' + selnode.path + '.vmd', function(result) {}, function(msg) {\n                    Ext.Msg.alert(\"提示\", \"删除vmd模块文件失败\")\n                })\n                //删除vmd文件\n                hwDas.remove(\"vmd\", 'modules' + selnode.path + '.html', function(result) {}, function(msg) {\n                    Ext.Msg.alert(\"提示\", \"删除vmd模块文件失败\")\n                })\n                hwDas.remove(\"vmd\", 'modules' + selnode.path + '_r.html', function(result) {}, function(msg) {\n                    Ext.Msg.alert(\"提示\", \"删除vmd模块文件失败\")\n                })\n                hwDas.remove(\"vmd\", 'modules' + selnode.path, function(result) {}, function(msg) {\n                    Ext.Msg.alert(\"提示\", \"删除vmd子模块文件失败\")\n                })\n            }\n        })\n        return;\n    }\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//自定义自定义方法\nfunction newGuid(len) {\n    var length = 32;\n    if(len)\n        length = len - 2\n    var guid = \"\";\n    arr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n    for(var i = 0; i < length; i++) {\n        pos = Math.round(Math.random() * (arr.length - 1));\n        guid += arr[pos];\n    }\n    return \"hw\" + guid;\n}\n\n//文件夹名称录入框\nExt.MyFordWin = Ext.extend(Ext.Window, {\n    xtype: \"window\",\n    title: \"文件夹对话框\",\n    width: 300,\n    height: 150,\n    layout: \"form\",\n    bodyStyle: 'padding:15px',\n    labelAlign: \"left\",\n    labelWidth: 40,\n    modal: true,\n    constructor: function(callback, name) {\n        this.valueName = name;\n        this.callback = callback;\n        this.callParent();\n    },\n    initComponent: function() {\n        var me = this;\n        this.fbar = [{\n            text: \"确定\",\n            handler: function() {\n                me.callback(Ext.getCmp('filename').getValue(), function() {\n                    me.close();\n                });\n            }\n        }, {\n            text: \"取消\",\n            handler: function() {\n                me.close();\n            }\n        }];\n        this.items = [{\n            id: 'filename',\n            xtype: \"textfield\",\n            fieldLabel: \"名称\",\n            anchor: \"100%\",\n            value: this.valueName\n        }]\n        Ext.MyFordWin.superclass.initComponent.call(this);\n    }\n})\n//右键菜单事件\nfunction onMenuClick(menuitemId) {\n    if(menuitemId == \"newFord\") { // 新建分类\n        creatFord();\n    } else if(menuitemId == \"newMode\") { // 新建模块\n        // 在空白处点击鼠标时，就取消原有节点的选中\n        // hwTree.clearSelection();\n        hwTree.newnode = true;\n        divJcxx.hide();\n        ModuleInfo.show();\n        WorkflowModuleInfo.hide();\n        DataServiceModuleInfo.hide();\n        ModuleInfo.refresh(hwTree, btnProjectName.projectId, btnWorkSpaceName.workspaceId);\n        // lastnodeType = \"1\";\n        // bselNodeId = hwTree.getSelectedItemId();\n        // hwTree.itemObj[bselNodeId].loadChild = true;\n        // hwTree.newnode = true;\n        // document.getElementById(\"iframe_page\").src = vmd.virtualPath + '/modules/eQ9ULgcVb1/eQ9ULgcVb5/hwa99a3307.html';\n    } else if(menuitemId == \"delete\") {\n        button1_click();\n    } else if(menuitemId == \"newPro\") {\n        hwTree.newnode = true;\n        document.getElementById(\"iframe_page\").src = vmd.virtualPath + '/modules/eQ9ULgcVb1/eQ9ULgcVb5/hwc6d63bc6.html';\n    } else if(menuitemId == \"copy\") {\n        nodeCopy();\n    } else if(menuitemId == \"cut\") {\n        // nodeCut();\n    } else if(menuitemId == \"paste\") {\n        nodePaste();\n    } else if(menuitemId == \"reName\") {\n        nodeReName()\n    } else if(menuitemId == \"expmodules\") {    \n        ExpModules()\n    }\n}\n\n///复制节点\nfunction nodeCopy() {\n    var mytree = hwTree;\n    var selId = mytree.getSelectedItemId();\n    // copyNodeId = selId;\n    // cutNodeId = \"\";\n    mytree.copyNodeId = selId;\n\n}\n\n//剪切节点(暂时不考虑)\nfunction nodeCut() {\n    var mytree = hwTree;\n    var selId = mytree.getSelectedItemId();\n    cutNodeId = selId;\n    copyNodeId = \"\";\n}\n\nfunction nodePaste() {\n    //创建一个form，填写name，备注\n    var copyNode = hwTree.itemObj[hwTree.copyNodeId];\n    var form = new Ext.form.FormPanel({\n        labelAlign: \"top\",\n        bodyStyle: \"padding: 10px\",\n        border: false,\n        items: [{\n            xtype: \"textfield\",\n            allowBlank: false,\n            anchor: \"100%\",\n            name: 'name',\n            height: 30,\n            fieldLabel: '将<span style=\"color:red;font-weight:bold\">' + copyNode.text + '</span>复制为',\n            emptyText: \"请输入模块名称\"\n        }, {\n            xtype: \"textarea\",\n            allowBlank: true,\n            name: 'remark',\n            anchor: \"100%\",\n            fieldLabel: \"备注\"\n        }]\n\n\n    })\n    var win = new Ext.Window({\n\n        width: 440,\n        height: 260,\n        title: '模块粘贴',\n        hidden: false,\n        layout: \"fit\",\n        border: false,\n        modal: true,\n        items: form,\n        fbar: [{\n            text: '确定',\n            handler: function() {\n                if(form.getForm().isValid()) {\n                    var values = form.form.getValues()\n                    doNodePaste(values.name, values.remark, function() {\n                        win.close()\n                    })\n                }\n            }\n        }, {\n            text: '取消',\n            handler: function() {\n                win.close()\n            }\n\n        }]\n    });\n    win.show()\n    form.form.setValues({\n        name: copyNode.text + '1'\n    })\n}\n\n//粘帖节点\nfunction doNodePaste(name, remark, callback) {\n    var mytree = hwTree;\n    //先粘贴，等粘贴成功后，将copynodeid置空\n    var copyNodeId = mytree.copyNodeId;\n    if(!copyNodeId) {\n        Ext.Msg.alert('错误', \"粘贴出错，请重新复制！\");\n        return;\n    }\n    //首先创建模块，等成功后再拷贝文件。\n    var selId = mytree.getSelectedItemId();\n    var selnode = mytree.itemObj[selId];\n    var selnodepath = selnode.path;\n    var category_id;\n    var projectId;\n    var remark = remark || selnode.remark;\n    if(selnode.isProject) {\n        projectId = C;\n        category_id = \"0\";\n    } else if(selnode.isFord) {\n        projectId = selnode.projectId;\n        category_id = selId;\n    } else {\n        projectId = btnProjectName.projectId;\n        category_id = \"0\";\n        selId = '0';\n    }\n    myMask = new Ext.LoadMask(Ext.getBody(), {\n        msg: \"加载中,请稍后...\"\n    });\n    myMask.show();\n    // 判断同一节点下是否存在相同名称的模块\n    checkModuleReName(projectId, category_id, name, function() {\n        if(callback) {\n            callback()\n        }\n        if(copyNodeId) {\n            var copyNode = mytree.itemObj[copyNodeId];\n            var copyFilePath = copyNode.path;\n            var ModeName = name || copyNode.text;\n            var id = newGuid(10);\n            var newcode = newGuid(32);\n            var row_created_by = Ext.util.Cookies.get('userName');\n            var row_created_date = Ext.Date.dateFormat(new Date(), 'Y-m-d H:i:s');\n\n            var saveCopyModelinfo = function() {\n\n                //保存模块基础信息\n                hwDas.ajax({\n                    das: {\n                        idedas: true\n                    },\n                    url: \"CDEServcie/module/info\",\n                    type: 'post',\n                    contentType: 'application/json;charset=UTF-8',\n                    timeout: 5000,\n                    params: {},\n                    data: [{\n                        id: id,\n                        code: newcode,\n                        type: \"0\",\n                        name: ModeName,\n                        remark: remark,\n                        category_id: category_id,\n                        project_id: projectId,\n                        row_created_by: row_created_by,\n                        row_created_date: row_created_date,\n                        row_changed_by: row_created_by,\n                        row_changed_date: row_created_date\n                    }],\n                    success: function(result) {\n                        if(selId == '0') {\n                            mytree.insertNewChild(selId, id, ModeName);\n                            mytree.setItemImage2(id, \"tree/model.png\", \"tree/model.png\", \"tree/model.png\")\n                        } else {\n                            if(mytree.itemObj[selId].loadChild == true) {\n                                mytree.insertNewChild(selId, id, ModeName);\n                                mytree.setItemImage2(id, \"tree/model.png\", \"tree/model.png\", \"tree/model.png\")\n                            }\n                        }\n                        var treenode = mytree.item(id);\n                        treenode.path = selnodepath + \"/\" + id;\n                        treenode.projectId = projectId;\n                        if(treenode) {\n                            treenode.isModel = true;\n                            treenode.text = ModeName;\n                            treenode.createuser = row_created_by;\n                            treenode.createtime = row_created_date;\n                            treenode.remark = remark;\n                            treenode.code = newcode\n                            treenode.newnode = false;\n                        }\n                        mytree.itemObj[id] = treenode;\n                        mytree.selectItem(id, false, false);\n                        mytree.newnode = false;\n                        //拷贝vmd文件\n                        hwDas.copy(\"vmd\", \"modules\" + copyFilePath + \".vmd\", \"modules\" + treenode.path + \".vmd\", function() {\n                            //重新刷新\n                            mytree.selectItem(id, true);\n                            mytree.copyNodeId = null;\n                            myMask.hide();\n                        }, function(msg) {\n                            if(msg.indexOf('不存在') != -1) {\n                                myMask.hide();\n                                mytree.selectItem(id, true);\n                                mytree.copyNodeId = null;\n                                vmd.tip(\"该模块未设计\", 'info', 2000);\n                            } else {\n                                Tips.tips(msg, \"error\");\n                            }\n                        });\n                        //拷贝html 预览界面\n                        hwDas.copy(\"vmd\", \"modules\" + copyFilePath + \".html\", \"modules\" + treenode.path + \".html\",\n                            function() {\n                                myMask.hide();\n                            },\n                            function(msg) {\n                                myMask.hide();\n                                //   Ext.Msg.alert('错误',msg);\n                            });\n                        //复制后对file文件信息进行生成   成兵20180816增加\n                        hwDas.ajax({\n                            das: {\n                                idedas: true\n                            },\n                            url: \"CDEServcie/module/file\",\n                            type: 'post',\n                            contentType: 'application/json;charset=UTF-8',\n                            timeout: 5000,\n                            params: {},\n                            data: [{\n                                filepath: selnodepath + \"/\" + id,\n                                version: 1,\n                                module_id: id\n                            }],\n                            success: function(result) {\n                                // Ext.Msg.alert(\"提示\", \"保存成功！\")\n                            },\n                            error: function(msg) {\n                                Ext.Msg.alert(\"提示\", \"保存模块版本信息失败\")\n                                return;\n                            }\n                        })\n                    },\n                    error: function(msg) {\n                        myMask.hide();\n                        Ext.Msg.alert(\"提示\", \"复制失败\")\n                        return;\n                    }\n                })\n            }\n            var saveSubwinInfo = function() {\n                //首先获取模块及所有子模块信息\n                hwDas.get(\"CDEServcie/module/getmoduleandsubmodule\", {}, {\n                        module_id: copyNodeId\n                    }, function(result) {\n                        var datas = result.data[0].datas;\n                        var newmoduleid = vmd.getGuid(10)\n                        var newcode = vmd.getGuid(36)\n                        //此处循环处理目标id  路径  层级关系\n                        var getchildWinIds = function(srcid, trgid, mainid, trgpath) {\n                            for(var i = 0; i < datas.length; i++) {\n                                if(srcid == datas[i].upmoduleid) {\n                                    newguid = vmd.getGuid(10)\n                                    datas[i].trgid = newguid;\n                                    datas[i].code = vmd.getGuid(36);\n                                    datas[i].trgpath = trgpath + \"/\" + newguid;\n                                    datas[i].trgupid = trgid;\n                                    datas[i].trgmainid = mainid;\n                                    datas[i].trgcateid = category_id;\n                                    getchildWinIds(datas[i].id, newguid, mainid, trgpath + \"/\" + newguid)\n                                }\n                            }\n                        }\n                        for(var i = 0; i < datas.length; i++) {\n                            if(copyNodeId == datas[i].id) {\n                                datas[i].trgid = newmoduleid;\n                                datas[i].trgpath = selnodepath + \"/\" + newmoduleid;\n                                datas[i].trgupid = \"\";\n                                datas[i].trgmainid = \"\";\n                                datas[i].trgcateid = category_id;\n                                datas[i].code = newcode;\n                                datas[i].name = ModeName;\n                                getchildWinIds(copyNodeId, newmoduleid, newmoduleid, selnodepath + \"/\" + newmoduleid)\n                                break;\n                            }\n                        }\n                        //此处保存复制的文件信息\n                        var paths = [];\n                        var saveData = [];\n                        for(var i = 0; i < datas.length; i++) {\n                            //用于替换path的信息\n                            paths.push({\n                                oldpath: datas[i].filepath + \".vmd\",\n                                newpath: datas[i].trgpath + \".vmd\"\n                            })\n                            //用于替换moduleid的信息\n                            paths.push({\n                                oldpath: \"moduleId:\\\"\" + datas[i].id + \"\\\"\",\n                                newpath: \"moduleId:\\\"\" + datas[i].trgid + \"\\\"\"\n                            }, {\n                                oldpath: \"moduleId\\\\\\\":\\\\\\\"\" + datas[i].id,\n                                newpath: \"moduleId\\\\\\\":\\\\\\\"\" + datas[i].trgid\n                            })\n                            //组织用于入库的模块信息\n                            saveData.push({\n                                project_id: datas[i].project_id,\n                                code: datas[i].code,\n                                upmoduleid: datas[i].trgupid,\n                                mainmoduleid: datas[i].trgmainid,\n                                module_id: datas[i].trgid,\n                                name: datas[i].name,\n                                remark: datas[i].remark,\n                                category_id: datas[i].category_id,\n                                type: datas[i].type,\n                                filepath: datas[i].trgpath\n                            })\n                        }\n                        //保存模块信息服务\n                        hwDas.save(\"CDEServcie/module/getchildmodule\", {}, {}, saveData, function() {\n                            //添加节点到树\n                            if(selId == '0') {\n                                mytree.insertNewChild(selId, newmoduleid, ModeName);\n                                mytree.setItemImage2(id, \"tree/model.png\", \"tree/model.png\", \"tree/model.png\")\n                            } else {\n                                if(mytree.itemObj[selId].loadChild == true) {\n                                    mytree.insertNewChild(selId, newmoduleid, ModeName);\n                                    mytree.setItemImage2(newmoduleid, \"tree/model.png\", \"tree/model.png\", \"tree/model.png\")\n                                }\n                            }\n                            var treenode = mytree.item(newmoduleid);\n                            treenode.path = selnodepath + \"/\" + newmoduleid;\n                            treenode.projectId = projectId;\n                            if(treenode) {\n                                treenode.isModel = true;\n                                treenode.text = ModeName;\n                                treenode.createuser = row_created_by;\n                                treenode.createtime = row_created_date;\n                                treenode.remark = remark;\n                                treenode.code = newcode\n                                treenode.newnode = false;\n                            }\n                            mytree.itemObj[newmoduleid] = treenode;\n                            mytree.selectItem(newmoduleid, false, false);\n                            mytree.newnode = false;\n\n                            //此处读取文件、替换、保存\n                            var count = 0;\n                            acount = datas.length * 2;\n                            var checkcount = function() {\n                                count++;\n                                if(count == acount) {\n                                    myMask.hide();\n                                }\n                            }\n                            for(var i = 0; i < datas.length; i++) {\n                                vmd.core.createCopyFile(\"modules\" + datas[i].filepath + \".vmd\", \"modules\" + datas[i].trgpath + \".vmd\", paths, \"text\", function() {\n                                    checkcount()\n                                }, function() {\n                                    checkcount()\n                                })\n                                vmd.core.createCopyFile(\"modules\" + datas[i].filepath + \".html\", \"modules\" + datas[i].trgpath + \".html\", paths, \"html\", function() {\n                                    checkcount()\n                                }, function() {\n                                    checkcount()\n                                })\n                            }\n                        }, function(msg) {\n                            console.log(msg)\n                            myMask.hide();\n                        })\n                    },\n                    function(msg) {\n                        console.log(msg)\n                        myMask.hide();\n                    })\n            }\n            //20180920 成兵 增加对是否包含子页面模块的判断\n            hwDas.get(\"CDEServcie/module/getchildmodule\", {}, {\n                mainmoduleid: copyNodeId\n            }, function(result) {\n                if(result.data.length > 0 && result.data[0].datas.length > 0) {\n                    saveSubwinInfo()\n                } else {\n                    saveCopyModelinfo()\n                }\n            }, function(msg) {\n                console.log(msg)\n            })\n        } else if(cutNodeId != \"\") {\n            var cutNode = mytree.itemObj[copyNodeId];\n            var cutFilePath = copyNode.path;\n            var ModeName = copyNode.text;\n            var remark = cutNode.remark;\n            var code = cutNode.code;\n            var id = cutNodeId;\n            var row_created_by = Ext.util.Cookies.get('userName');\n            var row_created_date = Ext.Date.dateFormat(new Date(), 'Y-m-d H:i:s');\n            var row_changed_by = Ext.util.Cookies.get('userName');\n            var row_changed_date = Ext.Date.dateFormat(new Date(), 'Y-m-d H:i:s');\n            //保存模块基础信息\n            hwDas.ajax({\n                das: {\n                    idedas: true\n                },\n                url: \"CDEServcie/module/info\",\n                type: 'put',\n                contentType: 'application/json;charset=UTF-8',\n                timeout: 5000,\n                params: {},\n                data: [{\n                    id: id,\n                    category_id: category_id,\n                    project_id: projectId,\n                    row_created_by: row_created_by,\n                    row_created_date: row_created_date,\n                    row_changed_by: row_changed_by,\n                    row_changed_date: row_changed_date\n                }],\n                success: function(result) {\n                    //将节点移除，再添加\n                    mytree.deleteItem(id);\n                    mytree.insertNewChild(selId, id, ModeName);\n                    mytree.setItemImage2(id, \"tree/model.png\", \"tree/model.png\", \"tree/model.png\")\n\n                    cutNode.path = selnodepath + \"/\" + id;\n                    cutNode.projectId = Project_id;\n                    cutNode.createuser = row_created_by;\n                    cutNode.createtime = row_created_date;\n                    cutNode.changetime = row_changed_date;\n                    cutNode.changeuser = row_changed_by;\n                    treenode.newnode = false;\n\n                    mytree.selectItem(id, false, false);\n                    mytree.newnode = false;\n                    //保存模块路径版本信息\n                    hwDas.ajax({\n                        das: {\n                            idedas: true\n                        },\n                        url: \"CDEServcie/module/file\",\n                        type: 'put',\n                        contentType: 'application/json;charset=UTF-8',\n                        timeout: 5000,\n                        params: {},\n                        data: [{\n                            filepath: selnodepath + \"/\" + id,\n                            version: 1,\n                            module_id: id\n                        }],\n                        success: function(result) {\n                            // Ext.Msg.alert(\"提示\", \"保存成功！\")\n                        },\n                        error: function(msg) {\n                            Ext.Msg.alert(\"提示\", \"保存模块版本信息失败\")\n                            return;\n                        }\n                    })\n                },\n                error: function(msg) {\n                    Ext.Msg.alert(\"提示\", \"复制失败\")\n                    myMask.hide();\n                    return;\n                }\n            })\n        }\n        copyCutNodeId = \"\";\n    })\n}\n// 重命名\nfunction nodeReName() {\n    var mytree = hwTree;\n    var selId = mytree.getSelectedItemId();\n    var selnode = mytree.itemObj[selId];\n    var nodeName = mytree.itemObj[selId].text;\n    var parentId;\n    if(mytree.getParentId(selId)) {\n        parentId = mytree.getParentId(selId)\n    } else {\n        parentId = '0'\n    }\n    var addford = function(fordname, callback) {\n        myMask = new Ext.LoadMask(Ext.getBody(), {\n            msg: \"加载中,请稍后...\"\n        });\n        myMask.show();\n        // 判断同一目录下是否存在相同名称分类\n        checkfordReName(btnProjectName.projectId, parentId, selId, fordname, function() {\n            if(callback) {\n                callback()\n            }\n            hwDas.edit(\"CDEServcie/module/category\", {}, {\n                    name: fordname,\n                    id: selId,\n                }, [{\n                    name: fordname,\n                    id: selId,\n                }],\n                function(result) {\n                    selnode.text = fordname;\n                    mytree.setItemText(selId, fordname);\n                    myMask.hide();\n                },\n                function(msg) {\n                    myMask.hide();\n                    Ext.Msg.alert(\"提示\", \"新建目录失败\")\n                }\n            )\n        })\n    }\n    var fordname = new Ext.MyFordWin(addford, nodeName);\n    fordname.show();\n}\n//页面加载完后事件\nfunction MyViewport_afterrender(sender) {\n    var einfo = Ext.util.Cookies.get('hwEcyLogin');\n    var login = Ext.util.Cookies.get('hwLogin');\n    btnGrxx.setText(Cookie.get('userName') || '个人信息');\n    MyP_Htool.doLayout()\n    divJcxx.show()\n    divJcxx.update(\"<iframe  id='iframe_page' src='\" + vmd.virtualPath + \"/modules/eQ9ULgcVb1/eQ9ULgcVb5/hw03cb4931.html' width=100% height=100% frameborder=0  ></iframe>\");\n\n    // MyP_jcxx.body.update(\"<iframe  id='iframe_page' src='\" + vmd.virtualPath + \"/modules/eQ9ULgcVb1/eQ9ULgcVb5/hw03cb4931.html' width=100% height=100% frameborder=0  ></iframe>\");\n    if(!allowedDesigner) {\n        MyC_tc.hide();\n        button.hide();\n    }\n    // 初始化工区切换菜单\n    initMenuWorkSpaceList();\n\n\n    $LAB.script('/lib/introjs/intro.js')\n        .wait(function() {\n            vmd.loadCss('/lib/introjs/introjs.css')\n            var vmdinittips = LocalData.get('vmdinittips');\n            if(!vmdinittips) {\n                introJs().setOptions({\n                    nextLabel: '下一步 &rarr;',\n                    prevLabel: '&larr; 上一步',\n                    skipLabel: '退出',\n                    doneLabel: '结束'\n                }).start();\n                LocalData.set('vmdinittips', true)\n            }\n        })\n}\n//退出图标的点击事件\nfunction MyC_tc_afterrender(sender) {\n    sender.el.on('click', function() {\n        outvmd();\n    })\n}\n//退出按钮操作\nfunction button_click(sender) {\n    outvmd();\n}\n//登出vmd2.0\nfunction outvmd() {\n\n    Ext.Msg.confirm(\"提示\", \"确定要退出vmd2.0吗？\", function(type) {\n\n        if(type == \"yes\") {\n            // Ext.util.Cookies.clear(\"hwLogin\");\n            Cookie.clear();\n            self.location = vmd.virtualPath + \"/modules/eQ9ULgcVb1/eQ9ULgcVb5/eQ9ULgcVc5.html\";\n        }\n\n    })\n}\n\n//页面初始化前方法 控制权限 记录编辑权限\nfunction MyViewport_beforerender(sender) {\n    if(Ext.isIE)\n        vmd.tip('为达到更好的用户体验，建议采用谷歌浏览器、360极速浏览器等webkit内核的浏览器进行操作。', 'info', 3000);\n    //模拟平台5的token传参登陆,默认设置cookie 为dbadmin 管理员\n    var urlToken = getUrlParam(\"token\");\n    if(urlToken != null && urlToken != \"\") {\n        Ext.util.Cookies.set('userName', \"管理员\");\n        Ext.util.Cookies.set('hwLogin', \"dbadmin\");\n        return\n    }\n    var userType = Ext.util.Cookies.get(\"userType\");\n    allowedDesigner = userType == \"vmdDesigner\" ? true : false;\n    // var login = Ext.util.Cookies.get(\"login\");\n    if(!login) {\n        self.location = vmd.virtualPath + \"/modules/eQ9ULgcVb1/eQ9ULgcVb5/eQ9ULgcVc5.html\";\n    }\n}\n\nvar selModeWin;\nwindow[\"selModeWin\"] = selModeWin;\n//新建模块时 打开模版选择页面 关闭时调用该方法，由子页面调用或该页面调用\nfunction closeSelMode(create) {\n    if(create) {\n        var mytree = hwTree;\n        var selId = mytree.getSelectedItemId();\n        var selnode = mytree.itemObj[selId];\n        selnode.newnode = false;\n        mytree.newnode = false;\n    }\n\n    selModeWin.close();\n}\nwindow[\"closeSelMode\"] = closeSelMode;\n//新建模块时 打开模版选择页面，由子页面调用或该页面调用\nfunction openSelMode(id, name, pdth, workspaceId) {\n    selModeWin = new vmdDesigner({\n        title: '<span style=\"color:blue\">' + name + '</span> 模版选择',\n        params: {\n            id: id,\n            name: name,\n            path: pdth,\n            workspaceid: workspaceId\n        },\n        auto: false,\n        width: 920,\n        height: 580,\n        // width: document.body.clientWidth - 200,\n        // height: document.body.clientHeight - 100,\n        url: vmd.virtualPath + '/modules/eQ9ULgcVb1/eQ9ULgcVb5/hw3b9ae460.html'\n    });\n    selModeWin.show(true);\n}\n//将选择模版方法放入window中\nwindow[\"openSelMode\"] = openSelMode;\nvar maskProgress = null;\n\n// 工作流是否加载过\nvar ifWorkflowLoaded = false;\n\nfunction hwTreeWorkFlow_afterrender(sender) {\n    ifWorkflowLoaded = true;\n    // 清空树原有的默认数据\n    hwTreeWorkFlow.deleteChildItems(0);\n    getWorkflowCategory();\n\n    // 设置没配置工作流的提示信息\n    panel1.add({\n        id: 'infoWorkflow_div',\n        tag: 'div',\n        html: '请配置工作流',\n        style: 'font-size:14px;font-family:Microsoft YaHei;color:#666666;margin:10px;'\n    });\n}\n\n// 重新加载工作流分类，用于项目配置完成后保存\nfunction reloadWorkflowCategory() {\n\n    if(ifWorkflowLoaded) {\n        hwTreeWorkFlow.deleteChildItems(0);\n        getWorkflowCategory();\n    }\n}\n\nfunction getWorkflowCategory() {\n    if(!ifWorkflowLoaded) {\n        return;\n    }\n    // 进度条\n    var myMask = new Ext.LoadMask(Ext.getCmp(\"hwTreeWorkFlow\").el, {\n        msg: \"数据加载中,请稍后...\",\n        msgCls: 'z-index:10000;'\n    });\n    myMask.show();\n    maskProgress = new Ext.LoadMask(Ext.getBody(), {\n        msg: \"数据加载中,请稍后...\",\n        msgCls: 'z-index:10000;'\n    });\n    maskProgress.hide();\n\n    // 获取项目中配置的工作流分类\n    hwDas.get(\n        \"DataServiceWorkSpace/projectInfo/ProjcetServiceCategory\", {}, {\n            \"projectid\": btnProjectName.projectId,\n            \"type\": 0\n        },\n        function(resultChecked) {\n            // 根据获取的数据赋值基本信息Tab页\n            if(null === resultChecked && undefined === resultChecked) {\n                showWorkflowHintInfo();\n                return;\n            }\n\n            if(null != resultChecked.data && undefined != resultChecked.data) {\n                if(resultChecked.data.length > 0) {\n\n                    // if(null != resultChecked.data[0].datas && undefined != resultChecked.data[0].datas) {}\n\n                    if(resultChecked.data[0].datas.length > 0) {\n\n                        // 获取所有工作流分类\n                        var mytree = hwTreeWorkFlow;\n                        var firstNode = \"\";\n                        mytree.deleteChildItems(0);\n                        mytree.loadJSONObject({\n                            id: 0,\n                            text: \"工作流\",\n                            item: []\n                        });\n                        mytree.itemObj = {};\n                        mytree.newnode = false;\n                        var urlService = \"http://\" + (vmd.workspace.workflowIp || vmdSettings.workflowIp) + \"/activiti-rest/service/repository/categorys/root?info=kermit\";\n                        // if(vmdSettings.workflowIp) {\n                        //     var info = \"kermit\";\n                        //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/categorys/root?info=\" + info;\n\n                        //     // if(einfo && einfo != undefined && einfo != \"undefined\") {\n                        //     //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/categorys/root?einfo=\" + einfo;\n                        //     // } else {\n                        //     //     var info = login;\n                        //     //     if(!info) {\n                        //     //         info = \"kermit\";\n                        //     //     }\n                        //     //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/categorys/root?info=\" + info;\n                        //     // }\n                        // }\n\n                        // 获取根节点下的文件夹节点信息\n                        hwDas.ajax({\n                            // das: {\n                            //     idedas: false\n                            // },\n                            url: urlService,\n                            type: 'get',\n                            timeout: 10000,\n                            params: {},\n                            success: function(result) {\n                                var bFlag = false;\n\n                                ////////////////////////////////////////////////////////////////////\n                                for(var j = 0; j < resultChecked.data[0].datas.length; j++) {\n\n                                    // 获取数据后解析形成树形节点；\n                                    for(var i = 0; i < result.data.length; i++) {\n                                        if(result.data[i].id ==\n                                            resultChecked.data[0].datas[j].service_category_id) {\n\n                                            bFlag = true;\n                                            mytree.insertNewChild(0, result.data[i].id, result.data[i].name);\n                                            mytree.setItemImage2(result.data[i].id, \"tree/projectclose.png\", \"tree/projectopen.png\", \"tree/projectclose.png\");\n                                            mytree.setItemColor(result.data[i].id, '#000000', '#000000');\n                                            mytree.insertNewChild(result.data[i].id, result.data[i].id + \"-0000\", \"\");\n                                            mytree.closeItem(result.data[i].id);\n                                            var treenode = mytree.item(result.data[i].id);\n                                            if(treenode) {\n                                                treenode.isTemplate = false; // 标识是否是模板文件\n                                                // treenode.childLoaded = false; // 标识是否加载了子节点\n                                                treenode.isDeployment = false; // 标识是否发布\n                                                treenode.url = result.data[i].url;\n                                                // 标识当前分类节点下的分类节点是否加载完成\n                                                treenode.childCategoryLoaded = false;\n                                                // 标识当前分类节点下的模板节点是否加载完成\n                                                treenode.childModelLoaded = false;\n                                            }\n                                            var objKey = \"hw\" + result.data[i].id;\n                                            mytree.itemObj[objKey] = treenode;\n                                        }\n                                    }\n                                }\n\n                                if(bFlag) {\n                                    hwTreeWorkFlow.show();\n                                } else {\n\n                                    hwTreeWorkFlow.hide();\n                                }\n                                // ifWorkflowLoaded = true;\n                                myMask.hide();\n                            },\n                            error: function(msg) {\n                                showWorkflowHintInfo();\n                                myMask.hide();\n                                // Ext.Msg.alert(\"提示\", \"获取模块信息失败\", function() {})\n                            }\n                        })\n\n                        //绑定右键菜单\n                        var menu = new dhtmlXMenuObject();\n                        menu.renderAsContextMenu();\n                        menu.attachEvent(\"onClick\", onMenuWorkFlowClick);\n                        menu.addNewChild(menu.topId, 0, \"newWorkFlowCategory\", \"新建分类\", false);\n                        menu.addNewChild(menu.topId, 1, \"newWorkFlowTemplate\", \"新建模板\", false);\n                        menu.addNewChild(menu.topId, 2, \"editWorkFlow\", \"编辑\", false);\n                        menu.addNewChild(menu.topId, 3, \"deleteWorkFlow\", \"删除\", false);\n                        menu.addNewChild(menu.topId, 4, \"viewWorkFlow\", \"查看\", false);\n                        menu.addNewChild(menu.topId, 5, \"publishWorkFlow\", \"发布\", false);\n                        mytree.enableDragAndDrop(\"temporary_disabled\");\n                        mytree.enableContextMenu(menu);\n\n                        mytree.attachEvent(\"onBeforeContextMenu\", function(itemId) {\n                            var mytree = hwTreeWorkFlow;\n                            var selId = mytree.getSelectedItemId();\n                            var objKey = \"hw\" + selId;\n                            var selnode = mytree.itemObj[objKey];\n                            if(!selnode) {\n                                return;\n                            }\n                            // 模板节点\n                            if(selnode.isTemplate) {\n                                menu.hideItem('newWorkFlowCategory');\n                                menu.hideItem('newWorkFlowTemplate');\n                                menu.showItem('editWorkFlow');\n                                menu.showItem('viewWorkFlow');\n                                if(selnode.isDeployment) {\n                                    menu.hideItem('deleteWorkFlow');\n                                    menu.hideItem('publishWorkFlow');\n                                } else {\n                                    menu.showItem('publishWorkFlow');\n                                    menu.showItem('deleteWorkFlow');\n                                }\n                            } else // 分类节点\n                            {\n                                menu.showItem('newWorkFlowCategory');\n                                menu.showItem('newWorkFlowTemplate');\n                                menu.showItem('editWorkFlow');\n                                menu.showItem('deleteWorkFlow');\n                                menu.hideItem('viewWorkFlow');\n                                menu.hideItem('publishWorkFlow');\n                            }\n\n                            return true;\n                        })\n\n                        //绑定右键事件 设置右键选中节点\n                        mytree.attachEvent('onRightClick', function(id) {\n                            mytree.selectItem(id);\n                        })\n                    } else {\n                        showWorkflowHintInfo();\n                        myMask.hide();\n                    }\n                } else {\n                    showWorkflowHintInfo();\n                    myMask.hide();\n                }\n            } else {\n                showWorkflowHintInfo();\n                myMask.hide();\n            }\n            // Tips.tips(\"查询成功！\", \"success\");\n        },\n        function(msg) {\n            showWorkflowHintInfo();\n            myMask.hide();\n        });\n}\n\nfunction showWorkflowHintInfo() {\n\n    hwTreeWorkFlow.hide();\n    // panel1.add({\n    //     id: 'infoWorkflow_div',\n    //     tag: 'div',\n    //     html: '请配置工作流',\n    //     style: 'font-size:14px;font-family:Microsoft YaHei;color:#666666;margin:10px;'\n    // });\n}\n// function hwTreeWorkFlow_afterrender(sender) {\n//     // 进度条\n//     var myMask = new Ext.LoadMask(Ext.getCmp(\"hwTreeWorkFlow\").el, {\n//         msg: \"数据加载中,请稍后...\",\n//         msgCls: 'z-index:10000;'\n//     });\n//     myMask.show();\n//     maskProgress = new Ext.LoadMask(Ext.getBody(), {\n//         msg: \"数据加载中,请稍后...\",\n//         msgCls: 'z-index:10000;'\n//     });\n//     maskProgress.hide();\n\n//     var mytree = hwTreeWorkFlow;\n//     var firstNode = \"\";\n//     mytree.deleteChildItems(0);\n//     mytree.loadJSONObject({\n//         id: 0,\n//         text: \"工作流\",\n//         item: []\n//     });\n//     mytree.itemObj = {};\n//     mytree.newnode = false;\n//     var urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/categorys/root?info=kermit\";\n//     if(vmdSettings.workflowIp) {\n//         var info = \"kermit\";\n//         urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/categorys/root?info=\" + info;\n\n//         // if(einfo && einfo != undefined && einfo != \"undefined\") {\n//         //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/categorys/root?einfo=\" + einfo;\n//         // } else {\n//         //     var info = login;\n//         //     if(!info) {\n//         //         info = \"kermit\";\n//         //     }\n//         //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/categorys/root?info=\" + info;\n//         // }\n//     }\n\n//     // 获取根节点下的文件夹节点信息\n//     hwDas.ajax({\n//         // das: {\n//         //     idedas: false\n//         // },\n//         url: urlService,\n//         type: 'get',\n//         timeout: 5000,\n//         params: {},\n//         success: function(result) {\n//             // 获取数据后解析形成树形节点；\n//             for(var i = 0; i < result.data.length; i++) {\n\n//                 mytree.insertNewChild(0, result.data[i].id, result.data[i].name);\n//                 mytree.setItemImage2(result.data[i].id, \"tree/projectclose.png\", \"tree/projectopen.png\", \"tree/projectclose.png\");\n//                 mytree.setItemColor(result.data[i].id, '#000000', '#000000');\n//                 mytree.insertNewChild(result.data[i].id, result.data[i].id + \"-0000\", \"\");\n//                 mytree.closeItem(result.data[i].id);\n//                 var treenode = mytree.item(result.data[i].id);\n//                 if(treenode) {\n//                     treenode.isTemplate = false; // 标识是否是模板文件\n//                     // treenode.childLoaded = false; // 标识是否加载了子节点\n//                     treenode.isDeployment = false; // 标识是否发布\n//                     treenode.url = result.data[i].url;\n//                     // 标识当前分类节点下的分类节点是否加载完成\n//                     treenode.childCategoryLoaded = false;\n//                     // 标识当前分类节点下的模板节点是否加载完成\n//                     treenode.childModelLoaded = false;\n//                 }\n//                 var objKey = \"hw\" + result.data[i].id;\n//                 mytree.itemObj[objKey] = treenode;\n//             }\n\n//             myMask.hide();\n//         },\n//         error: function(msg) {\n//             myMask.hide();\n//             Ext.Msg.alert(\"提示\", \"获取模块信息失败\", function() {})\n//         }\n//     })\n\n//     //绑定右键菜单\n//     var menu = new dhtmlXMenuObject();\n//     menu.renderAsContextMenu();\n//     menu.attachEvent(\"onClick\", onMenuWorkFlowClick);\n//     menu.addNewChild(menu.topId, 0, \"newWorkFlowCategory\", \"新建分类\", false);\n//     menu.addNewChild(menu.topId, 1, \"newWorkFlowTemplate\", \"新建模板\", false);\n//     menu.addNewChild(menu.topId, 2, \"editWorkFlow\", \"编辑\", false);\n//     menu.addNewChild(menu.topId, 3, \"deleteWorkFlow\", \"删除\", false);\n//     menu.addNewChild(menu.topId, 4, \"viewWorkFlow\", \"查看\", false);\n//     menu.addNewChild(menu.topId, 5, \"publishWorkFlow\", \"发布\", false);\n//     mytree.enableDragAndDrop(\"temporary_disabled\");\n//     mytree.enableContextMenu(menu);\n\n//     mytree.attachEvent(\"onBeforeContextMenu\", function(itemId) {\n//         var mytree = hwTreeWorkFlow;\n//         var selId = mytree.getSelectedItemId();\n//         var objKey = \"hw\" + selId;\n//         var selnode = mytree.itemObj[objKey];\n//         if(!selnode) {\n//             return;\n//         }\n//         // 模板节点\n//         if(selnode.isTemplate) {\n//             menu.hideItem('newWorkFlowCategory');\n//             menu.hideItem('newWorkFlowTemplate');\n//             menu.showItem('editWorkFlow');\n//             menu.showItem('viewWorkFlow');\n//             if(selnode.isDeployment) {\n//                 menu.hideItem('deleteWorkFlow');\n//                 menu.hideItem('publishWorkFlow');\n//             } else {\n//                 menu.showItem('publishWorkFlow');\n//                 menu.showItem('deleteWorkFlow');\n//             }\n//         } else // 分类节点\n//         {\n//             menu.showItem('newWorkFlowCategory');\n//             menu.showItem('newWorkFlowTemplate');\n//             menu.showItem('editWorkFlow');\n//             menu.showItem('deleteWorkFlow');\n//             menu.hideItem('viewWorkFlow');\n//             menu.hideItem('publishWorkFlow');\n//         }\n\n//         return true;\n//     })\n\n//     //绑定右键事件 设置右键选中节点\n//     mytree.attachEvent('onRightClick', function(id) {\n//         mytree.selectItem(id);\n//     })\n// }\n\n/*1.使用MessageBox.wait()方法实现进度条*/\nfunction Read1() {\n    Ext.Msg.wait(\"内容\", \"Extjs进度条应用\", {\n        text: \"正在加载。。。\"\n    });\n}\n//右键菜单事件\nfunction onMenuWorkFlowClick(menuitemId) {\n    if(menuitemId == \"newWorkFlowCategory\") { // 新建类别\n        newWorkFlowCategoryFun();\n    } else if(menuitemId == \"newWorkFlowTemplate\") { // 新建模板\n        newWorkFlowTemplateFun();\n    } else if(menuitemId == \"editWorkFlow\") { // 编辑\n        editWorkFlowFun();\n    } else if(menuitemId == \"deleteWorkFlow\") { //删除\n        deleteWorkFlowFun();\n    } else if(menuitemId == \"viewWorkFlow\") { //查看\n        viewWorkFlowFun();\n    } else if(menuitemId == \"publishWorkFlow\") { //发布\n        publishWorkFlowFun();\n    }\n}\n\n//工作流空白处右键菜单事件\nfunction onMenuWorkFlowPanelClick(menuitemId) {\n    // 在空白处点击鼠标时，就取消原有节点的选中\n    hwTreeWorkFlow.clearSelection();\n    newWorkFlowCategoryFun();\n}\n\n// 新建工作流分类\nfunction newWorkFlowCategoryFun() {\n    var addTreeNode = function(fordname, callback) {\n        var mytree = hwTreeWorkFlow;\n        var selId = mytree.getSelectedItemId();\n        var parentId = selId;\n        var iconPathOpen = \"tree/folderOpen.gif\";\n        var iconPathClose = \"tree/folderClosed.gif\";\n        if('' == selId) {\n            selId = \"00000000000000000000000000000000\";\n            parentId = \"0\";\n            iconPathOpen = \"tree/projectopen.png\";\n            iconPathClose = \"tree/projectclose.png\";\n        }\n        var nodename = fordname;\n        myMask = new Ext.LoadMask(Ext.getBody(), {\n            msg: \"正在执行新建操作...\",\n            msgCls: 'z-index:10000;'\n        });\n        myMask.show();\n        checkFlowfordReName(parentId, selId, nodename, function() {\n            if(callback) {\n                callback();\n            }\n            var urlService = \"http://\" + (vmd.workspace.workflowIp || vmdSettings.workflowIp) + \"/activiti-rest/service/repository/categorys?info=kermit\";\n            // if(vmdSettings.workflowIp) {\n            //     var info = \"kermit\";\n            //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/categorys?info=\" + info;\n\n            //     // if(einfo && einfo != undefined && einfo != \"undefined\") {\n            //     //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/categorys?einfo=\" + einfo;\n            //     // } else {\n            //     //     var info = login;\n            //     //     if(!info) {\n            //     //         info = \"kermit\";\n            //     //     }\n            //     //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/categorys?info=\" + info;\n            //     // }\n            // }\n            hwDas.ajax({\n                url: urlService,\n                type: 'post',\n                timeout: 5000,\n                contentType: 'application/json;charset=UTF-8',\n                data: { // body传参\n                    'superId': selId,\n                    'name': nodename,\n                    'xh': 1\n                },\n                success: function(result) {\n\n                    if(result == \"\") {\n                        return;\n                    }\n                    // 获取数据后解析形成树形节点；\n                    mytree.insertNewChild(parentId, result.id, result.name);\n                    mytree.setItemColor(result.id, '#000000', '#000000');\n                    mytree.setItemImage2(result.id, iconPathClose, iconPathOpen, iconPathClose);\n                    // mytree.insertNewChild(result.id, result.id + \"-0000\", \"\");\n                    mytree.closeItem(result.id);\n                    var treenode = mytree.item(result.id);\n                    if(treenode) {\n                        treenode.isTemplate = false; // 标识是否是目标文件\n                        // treenode.childLoaded = true; // 标识是否加载了子节点\n                        treenode.isDeployment = false; // 标识是否发布\n                        treenode.url = result.url;\n                        // 标识当前分类节点下的分类节点是否加载完成\n                        treenode.childCategoryLoaded = true;\n                        // 标识当前分类节点下的模板节点是否加载完成\n                        treenode.childModelLoaded = true;\n                    }\n                    var objKey = \"hw\" + result.id;\n                    mytree.itemObj[objKey] = treenode;\n\n                    hwTreeWorkFlow.show();\n\n                    connectWorkflowProject(result.id);\n\n                    myMask.hide();\n                },\n                error: function(msg) {\n                    myMask.hide();\n                    Ext.Msg.alert(\"提示\", \"新建分类失败！\")\n                }\n            })\n        })\n\n    }\n    var winForm = new Ext.winWorkFlowCategory(addTreeNode, \"\");\n    winForm.show();\n}\n\n// 新建工作流分类后，同步关联与项目的关系\nfunction connectWorkflowProject(id) {\n    var objWorkflow = {\n        'projectid': btnProjectName.projectId,\n        'servicecategoryid': id,\n        'type': 0\n    };\n    hwDas.add(\n        \"DataServiceWorkSpace/projectInfo/ProjcetServiceCategory\", {}, {}, objWorkflow,\n        function(result) {\n            // // 清空树原有的默认数据\n            // hwTreeWorkFlow.deleteChildItems(0);\n            // getWorkflowCategory();\n\n            // Tips.tips(\"保存成功！\", \"success\");\n        },\n        function(msg) {\n            // Tips.tips(\"保存失败！\", \"error\");\n        }\n    );\n}\n\n// 新建工作流模板\nfunction newWorkFlowTemplateFun() {\n\n    var addTreeNode = function(fordname, keyword, callback) {\n        var mytree = hwTreeWorkFlow;\n        var selId = mytree.getSelectedItemId();\n        var nodeNameSel = mytree.getSelectedItemText();\n        var nodename = fordname;\n        var nodeKeyWord = keyword;\n        var userName = Ext.util.Cookies.get('userName');\n        myMask = new Ext.LoadMask(Ext.getBody(), {\n            msg: \"正在新建模板...\",\n            msgCls: 'z-index:10000;'\n        });\n        myMask.show();\n        CheckFlowMoudlRename(selId, '', nodename, function() {\n            if(callback) {\n                callback();\n            }\n            var urlService = \"http://\" + (vmd.workspace.workflowIp || vmdSettings.workflowIp) + \"/activiti-rest/service/repository/hwmodels?info=kermit\";\n            // if(vmdSettings.workflowIp) {\n            //     var info = \"kermit\";\n            //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/hwmodels?info=\" + info;\n\n            //     // if(einfo && einfo != undefined && einfo != \"undefined\") {\n            //     //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/hwmodels?einfo=\" + einfo;\n            //     // } else {\n            //     //     var info = login;\n            //     //     if(!info) {\n            //     //         info = \"kermit\";\n            //     //     }\n            //     //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/hwmodels?info=\" + info;\n            //     // }\n            // }\n\n            hwDas.ajax({\n                url: urlService,\n                type: 'post',\n                timeout: 5000,\n                contentType: 'application/json;charset=UTF-8',\n                data: { // body传参\n                    'name': nodename,\n                    'key': nodeKeyWord,\n                    'category': nodeNameSel,\n                    'categoryId': selId,\n                    'creator': userName,\n                    'reviser': userName\n                },\n                success: function(result) {\n\n                    if(result == \"\") {\n                        return;\n                    }\n                    // 获取数据后解析形成树形节点；\n                    mytree.insertNewChild(selId, result, nodename);\n                    mytree.setItemColor(result, '#808080', '#808080');\n                    mytree.setItemImage2(result, \"tree/model.png\", \"tree/model.png\", \"tree/model.png\");\n                    mytree.closeItem(result);\n\n                    var treenode = mytree.item(result);\n                    if(treenode) {\n                        treenode.isTemplate = true; // 标识是否是模板文件\n                        // treenode.childLoaded = true; // 标识是否加载了子节点\n                        treenode.isDeployment = false; // 标识是否发布（新建的模板是未发布的）\n                        // treenode.url = result.data.url; // 返回值只有一个ID，没有URL\n                        // 标识当前分类节点下的分类节点是否加载完成\n                        treenode.childCategoryLoaded = true;\n                        // 标识当前分类节点下的模板节点是否加载完成\n                        treenode.childModelLoaded = true;\n\n                        // treenode.path = \"/\" + result.data[j].datas[i].ID;\n                        // treenode.isModel = true;\n                        // treenode.createuser = datajson[i].row_created_by;\n                        treenode.createtime = Ext.Date.dateFormat(new Date(), 'Y-m-d H:i:s');\n                        treenode.changetime = Ext.Date.dateFormat(new Date(), 'Y-m-d H:i:s');\n\n                        // treenode.changeuser = datajson[i].row_changed_by;\n                        // treenode.remark = datajson[i].remark;\n                        treenode.code = result;\n                    }\n                    var objKey = \"hw\" + result;\n                    mytree.itemObj[objKey] = treenode;\n\n                    mytree.selectItem(result, true, false);\n\n                    // 显示基本信息页面\n                    var eleIFrame = document.getElementById(\"iframe_page\");\n                    if(eleIFrame) {\n                        eleIFrame.src = vmd.virtualPath + '/modules/eQ9ULgcVb1/hw4acf2f8b/hw28e7092c.html';\n                    }\n                    // // 调用设计器HTML页面\n                    // document.getElementById(\"iframe_page\").src = '/activiti/modeler.html?mode=design&modelId=' + result + '&info=kermit';\n\n                    myMask.hide();\n                },\n                error: function(msg) {\n                    myMask.hide();\n                    Ext.Msg.alert(\"提示\", \"新建模板失败！\")\n                }\n            })\n        })\n    }\n    var winForm = new Ext.winWorkFlowTemplate(addTreeNode);\n    winForm.show();\n}\n\n// 用于响应工作流加载完成后隐藏进度条\nfunction workflowPageLoaded() {\n    if(maskProgress) {\n        maskProgress.hide();\n    }\n}\n\n// 工作流分类编辑\nfunction editWorkFlowFun() {\n    var mytreeTmp = hwTreeWorkFlow;\n    var nodeIdTmp = mytreeTmp.getSelectedItemId();\n    var nodeNameSelTmp = mytreeTmp.getSelectedItemText();\n    var objKeyTmp = \"hw\" + nodeIdTmp;\n    var nodeItemObjTmp = mytreeTmp.itemObj[objKeyTmp];\n    var userName = Ext.util.Cookies.get('userName');\n    if(nodeItemObjTmp) {\n        // 模板节点\n        if(nodeItemObjTmp.isTemplate) {\n            // 调用设计器HTML页面\n            var infoLogin = '&info=kermit';\n            // var info = login;\n            // if(einfo && einfo != undefined && einfo != \"undefined\") {\n            //     infoLogin = '&einfo=' + einfo;\n            // } else if(info && info != undefined && info != \"undefined\") {\n            //     infoLogin = '&info=' + info;\n            // }\n            divJcxx.show();\n            ModuleInfo.hide();\n            WorkflowModuleInfo.hide();\n            DataServiceModuleInfo.hide();\n            var pageSrc = '/activiti/modeler.html?mode=design&modelId=' + nodeIdTmp + infoLogin;\n\n            // 显示工作流HTML页面\n            if(maskProgress) {\n                // maskProgress.show();\n            }\n            // if(progressBar) {\n            //     // progressBar.show();\n            // }\n            document.getElementById(\"iframe_page\").src = pageSrc;\n        } else { // 分类节点\n            var callbackFunc = function(fordname, callback) {\n                var mytree = hwTreeWorkFlow;\n                var nodeId = mytree.getSelectedItemId();\n                var nodeNameSel = fordname;\n                var objKey = \"hw\" + nodeId;\n                var nodeItemObj = mytree.itemObj[objKey];\n                var parentId;\n                if(mytree.getParentId(nodeId)) {\n                    parentId = mytree.getParentId(nodeId)\n                } else {\n                    parentId = '0'\n                }\n                myMask = new Ext.LoadMask(Ext.getBody(), {\n                    msg: \"加载中,请稍后...\"\n                });\n                myMask.show();\n                checkFlowfordReName(parentId, nodeId, fordname, function() {\n                    if(callback) {\n                        callback();\n                    }\n                    var urlService = \"http://\" + (vmd.workspace.workflowIp || vmdSettings.workflowIp) + \"/activiti-rest/service/repository/categorys/\" + nodeId + \"?info=kermit\";\n                    // if(vmdSettings.workflowIp) {\n                    //     var info = \"kermit\";\n                    //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/categorys/\" + nodeId + \"?info=\" + info;\n\n                    //     // if(einfo && einfo != undefined && einfo != \"undefined\") {\n                    //     //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/categorys/\" + nodeId + \"?einfo=\" + einfo;\n                    //     // } else {\n                    //     //     var info = login;\n                    //     //     if(!info) {\n                    //     //         info = \"kermit\";\n                    //     //     }\n                    //     //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/categorys/\" + nodeId + \"?info=\" + info;\n                    //     // }\n                    // }\n                    if(nodeItemObj) {\n                        // 模板节点\n                        hwDas.ajax({\n                            // das: {\n                            //     idedas: true\n                            // },\n                            url: urlService,\n                            type: 'put',\n                            timeout: 5000,\n                            contentType: 'application/json;charset=UTF-8',\n                            data: { // body传参\n                                'name': nodeNameSel\n                            },\n                            success: function(result) {\n                                // 获取数据后解析形成树形节点；\n                                mytree.setItemText(result.id, result.name, result.name);\n                                myMask.hide();\n                            },\n                            error: function(msg) {\n                                myMask.hide();\n                                Ext.Msg.alert(\"提示\", \"编辑分类失败！\")\n                            }\n                        })\n                    }\n                })\n            }\n            var winForm = new Ext.winWorkFlowCategory(callbackFunc, nodeNameSelTmp);\n            winForm.show();\n        }\n    }\n}\n\n// 删除\nfunction deleteWorkFlowFun() {\n    Ext.Msg.confirm(\"提示!\", \"确定要删除?\", function(btn) {\n        if(btn == \"yes\") {\n            var mytree = hwTreeWorkFlow;\n            var selId = mytree.getSelectedItemId();\n            var objKey = \"hw\" + selId;\n            var nodeItemObj = mytree.itemObj[objKey];\n\n            if(!nodeItemObj) {\n                return;\n            }\n\n            var urlService = \"http://\" + (vmd.workspace.workflowIp || vmdSettings.workflowIp) + \"/activiti-rest/service/repository/categorys/\" + selId + \"?info=kermit\";\n            // if(vmdSettings.workflowIp) {\n            //     var info = \"kermit\";\n            //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/categorys/\" + selId + \"?info=\" + info;\n\n            //     // if(einfo && einfo != undefined && einfo != \"undefined\") {\n            //     //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/categorys/\" + selId + \"?einfo=\" + einfo;\n            //     // } else {\n            //     //     var info = login;\n            //     //     if(!info) {\n            //     //         info = \"kermit\";\n            //     //     }\n            //     //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/categorys/\" + selId + \"?info=\" + info;\n            //     // }\n            // }\n            // 分类节点\n            if(!nodeItemObj.isTemplate) {\n\n                var myMask = new Ext.LoadMask(Ext.getBody(), {\n                    msg: \"正在执行删除操作...\",\n                    msgCls: 'z-index:10000;'\n                });\n                myMask.show();\n\n                hwDas.ajax({\n                    // das: {\n                    //     idedas: true\n                    // },\n                    url: urlService,\n                    type: 'delete',\n                    timeout: 5000,\n                    data: null,\n                    dataType: 'text', // 返回的数据的格式\n                    contentType: 'application/json',\n                    success: function(result) {\n                        delWorkflowProject(id);\n                        mytree.deleteChildItems(selId);\n                        mytree.deleteItem(selId);\n                        if(mytree.hasChildren(0)) {\n                            mytree.show();\n                        } else {\n                            mytree.hide();\n                        }\n\n                        myMask.hide();\n                    },\n                    error: function(msg) {\n                        myMask.hide();\n                        Ext.Msg.alert(\"提示\", \"删除分类失败！\");\n                    }\n                })\n            } else // 模板节点\n            {\n                var urlService = \"http://\" + (vmd.workspace.workflowIp || vmdSettings.workflowIp) + \"/activiti-rest/service/repository/models/\" + selId + \"?info=kermit\";\n                // if(vmdSettings.workflowIp) {\n                //     var info = \"kermit\";\n                //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/models/\" + selId + \"?info=\" + info;\n\n                //     // if(einfo && einfo != undefined && einfo != \"undefined\") {\n                //     //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/models/\" + selId + \"?einfo=\" + einfo;\n                //     // } else {\n                //     //     var info = logini;\n                //     //     if(!info) {\n                //     //         info = \"kermit\";\n                //     //     }\n                //     //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/models/\" + selId + \"?info=\" + info;\n                //     // }\n                // }\n\n                var myMask = new Ext.LoadMask(Ext.getBody(), {\n                    msg: \"正在执行删除操作...\",\n                    msgCls: 'z-index:10000;'\n                });\n                myMask.show();\n                hwDas.ajax({\n                    // das: {\n                    //     idedas: true\n                    // },\n                    url: urlService,\n                    type: 'delete',\n                    timeout: 5000,\n                    data: null,\n                    dataType: 'text', // 返回的数据的格式\n                    // contentType: \"\", // 传入数据的内容格式\n                    success: function(result) {\n                        mytree.deleteItem(selId);\n                        // Ext.Msg.alert(\"提示\", \"删除模板成功！\")\n                        myMask.hide();\n                    },\n                    error: function(msg) {\n                        myMask.hide();\n                        Ext.Msg.alert(\"提示\", \"删除模板失败！\")\n                    }\n                })\n            }\n        } else {\n\n        }\n    });\n}\n\n// 同步删除工作流与项目的关联关系\nfunction delWorkflowProject(id) {\n\n    hwDas.del(\n        \"DataServiceWorkSpace/projectInfo/ProjcetServiceCategory\", {}, {\n            'projectid': btnProjectName.projectId,\n            'servicecategoryid': id,\n            'type': 0\n        },\n        function(result) {\n            // Tips.tips(\"删除成功！\", \"success\");\n        },\n        function(msg) {\n            // Tips.tips(\"删除失败！\", \"error\");\n        }\n    );\n}\n\n// 查看\nfunction viewWorkFlowFun() {\n\n    var mytree = hwTreeWorkFlow;\n    var nodeId = mytree.getSelectedItemId();\n    var objKey = \"hw\" + nodeId;\n    var nodeItemObj = mytree.itemObj[objKey];\n    if(nodeItemObj) {\n        // 模板节点\n        if(nodeItemObj.isTemplate) {\n            divJcxx.show();\n            ModuleInfo.hide();\n            WorkflowModuleInfo.hide();\n            DataServiceModuleInfo.hide();\n            if(maskProgress) {\n                // maskProgress.show();\n            }\n            // if(progressBar) {\n            //     // progressBar.show();\n            // }\n            // 调用设计器HTML页面\n            document.getElementById(\"iframe_page\").src = vmd.virtualPath + '/modules/eQ9ULgcVb1/hw4acf2f8b/hw8ad68408.html?modelId=' + nodeId;\n        } else // 分类节点\n        {\n            return;\n        }\n    }\n}\n\n// 发布\nfunction publishWorkFlowFun() {\n\n    var mytree = hwTreeWorkFlow;\n    var selId = mytree.getSelectedItemId();\n    var nodeNameSel = mytree.getSelectedItemText();\n\n    var info = \"kermit\";\n    var urlService = \"http://\" + (vmd.workspace.workflowIp || vmdSettings.workflowIp) + \"/activiti-rest/service/repository/deployments/deployModel?info=\" + info;\n    // var urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/deployments/deployModel?info=kermit\";\n    // if(vmdSettings.workflowIp) {\n    //     var info = \"kermit\";\n    //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/deployments/deployModel?info=\" + info;\n\n    //     // if(einfo && einfo != undefined && einfo != \"undefined\") {\n    //     //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/deployments/deployModel?einfo=\" + einfo;\n    //     // } else {\n    //     //     var info = login;\n    //     //     if(!info) {\n    //     //         info = \"kermit\";\n    //     //     }\n    //     //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/deployments/deployModel?info=\" + info;\n    //     // }\n    // }\n\n    var myMask = new Ext.LoadMask(Ext.getBody(), {\n        msg: \"数据加载中,请稍后...\",\n        msgCls: 'z-index:10000;'\n    });\n    myMask.show();\n\n    hwDas.ajax({\n        // das: {\n        //     idedas: true\n        // },\n        url: urlService,\n        type: 'post',\n        timeout: 5000,\n        contentType: 'application/json;charset=UTF-8',\n        data: { // body传参\n            'id': selId,\n            'name': nodeNameSel\n        },\n        success: function(result) {\n\n            mytree.setItemColor(selId, \"#000000\", \"#000000\");\n            myMask.hide();\n        },\n        error: function(msg) {\n            myMask.hide();\n            Ext.Msg.alert(\"提示\", \"模板发布失败！\");\n        }\n    })\n}\n\n//分类名称录入框\nExt.winWorkFlowCategory = Ext.extend(Ext.Window, {\n    xtype: \"window\",\n    title: \"分类\",\n    width: 300,\n    height: 150,\n    layout: \"form\",\n    bodyStyle: 'padding:15px',\n    labelAlign: \"left\",\n    labelWidth: 40,\n    modal: true,\n    constructor: function(callback, valueText) {\n        this.callback = callback;\n        this.valueText = valueText;\n        this.callParent();\n    },\n    initComponent: function() {\n        var me = this;\n        this.fbar = [{\n            text: \"确定\",\n            handler: function() {\n                me.callback(Ext.getCmp('filename').getValue(), function() {\n                    me.close();\n                });\n            }\n        }, {\n            text: \"取消\",\n            handler: function() {\n                me.close();\n            }\n        }];\n\n        this.items = [{\n            id: 'filename',\n            xtype: \"textfield\",\n            fieldLabel: \"名称\",\n            anchor: \"100%\",\n            value: this.valueText\n        }]\n\n        Ext.winWorkFlowCategory.superclass.initComponent.call(this);\n    }\n})\n\n//模板名称录入框\nExt.winWorkFlowTemplate = Ext.extend(Ext.Window, {\n    xtype: \"window\",\n    title: \"模板名称\",\n    width: 300,\n    height: 150,\n    layout: \"form\",\n    bodyStyle: 'padding:15px',\n    labelAlign: \"left\",\n    labelWidth: 40,\n    modal: true,\n    constructor: function(callback) {\n        this.callback = callback;\n        this.callParent();\n    },\n    initComponent: function() {\n        var me = this;\n        this.fbar = [{\n            text: \"确定\",\n            handler: function() {\n                var keyValue = randomWord(true, 3, 10);\n                me.callback(Ext.getCmp('filename').getValue(), keyValue, function() {\n                    me.close();\n                });\n            }\n        }, {\n            text: \"取消\",\n            handler: function() {\n                me.close();\n            }\n        }];\n\n        this.items = [{\n            id: 'filename',\n            xtype: \"textfield\",\n            fieldLabel: \"名称\",\n            anchor: \"100%\"\n        }]\n        Ext.winWorkFlowTemplate.superclass.initComponent.call(this);\n    }\n})\n/*\n ** randomWord 产生任意长度随机字母数字组合\n ** randomFlag-是否任意长度 min-任意长度最小位[固定位数] max-任意长度最大位\n ** xuanfeng 2014-08-28\n */\nfunction randomWord(randomFlag, min, max) {\n    var str = \"\",\n        range = min,\n        arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n    // arr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n\n    // 随机产生\n    if(randomFlag) {\n        range = Math.round(Math.random() * (max - min)) + min;\n    }\n    for(var i = 0; i < range; i++) {\n        pos = Math.round(Math.random() * (arr.length - 1));\n        str += arr[pos];\n    }\n    return str;\n}\n// 点击工作流树形节点\nfunction hwTreeWorkFlow_nodeClick(sender, id) {\n    divJcxx.show();\n    ModuleInfo.hide();\n    WorkflowModuleInfo.hide();\n    DataServiceModuleInfo.hide();\n\n    var nodeId = id;\n    var mytree = hwTreeWorkFlow;\n    var objKey = \"hw\" + nodeId;\n    var selnode = mytree.itemObj[objKey];\n\n    var eleIFrame = document.getElementById(\"iframe_page\");\n    if(eleIFrame) {\n        if(selnode.isTemplate) {\n\n            divJcxx.hide();\n            WorkflowModuleInfo.show();\n            WorkflowModuleInfo.refresh(mytree, btnProjectName.projectId, btnWorkSpaceName.workspaceId);\n\n            // eleIFrame.src = vmd.virtualPath + '/modules/eQ9ULgcVb1/hw4acf2f8b/hw28e7092c.html';\n        } else {\n            eleIFrame.src = vmd.virtualPath + '/modules/eQ9ULgcVb1/eQ9ULgcVb5/hw03cb4931.html';\n        }\n    }\n}\n\n// 获取子节点中的分类节点\nfunction getChildCategoryNodes(nodeParentId, maskLoading) {\n\n    var nodeId = nodeParentId;\n    var mytree = hwTreeWorkFlow;\n    var objKeyTmp = \"hw\" + nodeId;\n    var selnode = mytree.itemObj[objKeyTmp];\n    if(!selnode) {\n        return;\n    }\n    var info = \"kermit\";\n    urlService = \"http://\" + (vmd.workspace.workflowIp || vmdSettings.workflowIp) + \"/activiti-rest/service/repository/categorys/\" + nodeParentId + \"/members?info=\" + info;\n\n    // var urlService = \"http://\" + (vmd.workspace.workflowIp || vmdSettings.workflowIp) + \"/activiti-rest/service/repository/categorys/\" + nodeParentId + \"/members?info=kermit\";\n    // if(vmdSettings.workflowIp) {\n    //     var info = \"kermit\";\n    //     urlService = \"http://\" + (vmd.workspace.workflowIp || vmdSettings.workflowIp) + \"/activiti-rest/service/repository/categorys/\" + nodeParentId + \"/members?info=\" + info;\n\n    //     // if(einfo && einfo != undefined && einfo != \"undefined\") {\n    //     //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/categorys/\" + nodeParentId + \"/members?einfo=\" + einfo;\n    //     // } else {\n    //     //     var info = login;\n    //     //     if(!info) {\n    //     //         info = \"kermit\";\n    //     //     }\n    //     //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/categorys/\" + nodeParentId + \"/members?info=\" + info;\n    //     // }\n    // }\n    // 获取根节点下的文件夹节点信息\n    hwDas.ajax({\n        url: urlService,\n        type: 'get',\n        timeout: 10000,\n        params: {},\n        success: function(result) {\n\n            // 获取分类节点数据后解析形成树形节点；\n            for(var i = 0; i < result.data.length; i++) {\n\n                mytree.insertNewChild(nodeId, result.data[i].id, result.data[i].name);\n                mytree.setItemColor(result.data[i].id, '#000000', '#000000');\n                mytree.setItemImage2(result.data[i].id, \"tree/folderClosed.gif\", \"tree/folderOpen.gif\", \"tree/folderClosed.gif\");\n                mytree.insertNewChild(result.data[i].id, result.data[i].id + \"-0000\", \"\");\n                mytree.closeItem(result.data[i].id);\n                var treenode = mytree.item(result.data[i].id);\n                if(treenode) {\n                    treenode.isTemplate = false; // 标识是否是目标文件\n                    // treenode.childLoaded = false; // 标识是否加载了子节点\n                    treenode.isDeployment = false; // 标识是否发布\n                    treenode.url = result.data[i].url;\n                    // 标识当前分类节点下的分类节点是否加载完成\n                    treenode.childCategoryLoaded = false;\n                    // 标识当前分类节点下的模板节点是否加载完成\n                    treenode.childModelLoaded = false;\n                }\n                var objKey = \"hw\" + result.data[i].id;\n                mytree.itemObj[objKey] = treenode;\n            }\n\n            selnode.childCategoryLoaded = true;\n            // selnode.childLoaded = true;\n            if(selnode.childCategoryLoaded && selnode.childModelLoaded) {\n                if(maskLoading) {\n                    maskLoading.hide();\n                }\n            }\n        },\n        error: function(msg) {\n            selnode.childCategoryLoaded = true;\n            if(selnode.childCategoryLoaded && selnode.childModelLoaded) {\n                if(maskLoading) {\n                    maskLoading.hide();\n                }\n            }\n            Ext.Msg.alert(\"提示\", \"获取分类节点信息失败\", function() {})\n        }\n    })\n}\n\n// 获取子节点中的模板节点\nfunction getChildTemplateNodes(nodeParentId, maskLoading) {\n\n    var nodeId = nodeParentId;\n    var mytree = hwTreeWorkFlow;\n    var objKeyTmp = \"hw\" + nodeId;\n    var selnode = mytree.itemObj[objKeyTmp];\n    if(!selnode) {\n        return;\n    }\n    var info = \"kermit\";\n    urlService = \"http://\" + (vmd.workspace.workflowIp || vmdSettings.workflowIp) + \"/activiti-rest/service/repository/hwmodels?categoryId=\" + nodeParentId + \"&info=\" + info;\n\n    // 获取根节点下的文件夹节点信息\n    hwDas.ajax({\n        // das: {\n        //     idedas: true\n        // },\n\n        url: urlService,\n        type: 'get',\n        timeout: 10000,\n        params: {},\n        success: function(result) {\n\n            // 获取分类节点数据后解析形成树形节点；\n            for(var j = 0; j < result.data.length; j++) {\n\n                for(var i = 0; i < result.data[j].datas.length; i++) {\n\n                    mytree.insertNewChild(nodeId, result.data[j].datas[i].ID, result.data[j].datas[i].NAME);\n                    if(result.data[j].datas[i].ISDEPLOYMENT) {\n                        mytree.setItemColor(result.data[j].datas[i].ID, '#000000', '#000000');\n                    } else {\n                        mytree.setItemColor(result.data[j].datas[i].ID, '#808080', '#808080');\n                    }\n                    mytree.setItemImage2(result.data[j].datas[i].ID, \"tree/model.png\", \"tree/model.png\", \"tree/model.png\");\n                    mytree.closeItem(result.data[j].datas[i].ID);\n                    var treenode = mytree.item(result.data[j].datas[i].ID);\n                    if(treenode) {\n                        treenode.isTemplate = true; // 标识是否是目标文件\n                        // treenode.childLoaded = true; // 标识是否加载了子节点\n                        treenode.isDeployment = result.data[j].datas[i].ISDEPLOYMENT; // 标识是否发布\n                        treenode.url = result.data[j].datas[i].URL;\n                        // 标识当前分类节点下的分类节点是否加载完成\n                        treenode.childCategoryLoaded = false;\n                        // 标识当前分类节点下的模板节点是否加载完成\n                        treenode.childModelLoaded = false;\n\n                        // treenode.path = \"/\" + result.data[j].datas[i].ID;\n                        // treenode.isModel = true;\n                        // treenode.createuser = datajson[i].row_created_by;\n                        var dateCreate = new Date(result.data[j].datas[i].CREATETIME);\n                        var dateUpdate = new Date(result.data[j].datas[i].LASTUPDATETIME);\n\n                        treenode.createtime = Ext.Date.dateFormat(dateCreate, 'Y-m-d H:i:s');\n                        treenode.changetime = Ext.Date.dateFormat(dateUpdate, 'Y-m-d H:i:s');\n                        // console.log(JSON.parse(result.data[j].datas[i].METAINFO).reviser)\n                        treenode.changeuser = JSON.parse(result.data[j].datas[i].METAINFO).reviser;\n                        // treenode.remark = datajson[i].remark;\n                        treenode.code = result.data[j].datas[i].ID;\n                    }\n                    var objKey = \"hw\" + result.data[j].datas[i].ID;\n                    mytree.itemObj[objKey] = treenode;\n                }\n            }\n            selnode.childModelLoaded = true;\n            // selnode.childLoaded = true;\n            if(selnode.childCategoryLoaded && selnode.childModelLoaded) {\n                if(maskLoading) {\n                    maskLoading.hide();\n                }\n            }\n        },\n        error: function(msg) {\n            selnode.childModelLoaded = true;\n            if(selnode.childCategoryLoaded && selnode.childModelLoaded) {\n                if(maskLoading) {\n                    maskLoading.hide();\n                }\n            }\n            Ext.Msg.alert(\"提示\", \"获取分类节点信息失败\", function() {})\n        }\n    })\n}\n\nfunction hwTreeWorkFlow_onOpenEnd(sender, id, state) {\n    var nodeId = id;\n    var mytree = hwTreeWorkFlow;\n    var objKey = \"hw\" + nodeId;\n    var selnode = mytree.itemObj[objKey];\n    if(!selnode) {\n        return;\n    }\n    if(selnode.childCategoryLoaded || selnode.childModelLoaded) {\n        return;\n    }\n    var maskLoading = new Ext.LoadMask(Ext.getCmp(\"hwTreeWorkFlow\").el, {\n        msg: \"数据加载中,请稍后...\",\n        msgCls: 'z-index:10000;'\n    });\n    maskLoading.show();\n    // 如果是文件夹节点\n    if(!selnode.isTemplate) {\n        var nodeNullId = nodeId + \"-0000\";\n        var nIndex = mytree.getIndexById(nodeNullId);\n        if(null != nIndex) {\n            if(nIndex > -1) {\n                mytree.deleteItem(nodeNullId);\n            }\n        }\n\n        // 获取文件夹下的分类节点和模板节点\n        // 分类节点\n        getChildCategoryNodes(nodeId, maskLoading);\n        // 模板节点\n        getChildTemplateNodes(nodeId, maskLoading);\n    }\n\n    // myMask.hide();\n}\n\n\n\n//20171122 chengbing  主页面窗口\nfunction openWin(obj, html, parname, par) {\n    window[parname] = par;\n    var openWinFrom = new Ext.Window(obj || {\n        title: \"节点绑定表单\",\n        modal: true,\n        maximized: false,\n        height: 600,\n        width: 800,\n        maximizable: true,\n        resizable: true,\n        bodyStyle: \"background-color:#fff\",\n        closeAction: 'close'\n\n    })\n    Ext.defer(function() {\n        openWinFrom.html = html; //\"<iframe src='\"+vmd.core.getVirtualPath()+\"modules/eQ9ULgcVb1/hw4acf2f8b/hw3b434d49.html?r=\" + new Date().getTime() + \"' frameborder=0 scrolling=no style='height:100%;width:100%'></iframe>\";\n        openWinFrom.show()\n    }, 50)\n\n    window[\"openWinFrom\"] = openWinFrom;\n    return openWinFrom;\n}\nwindow[\"openWin\"] = openWin;\n\n//20171125 sgw  工作流页面保存后调用的方法，用于更新工作流节点的是否发布的状态\nfunction designTemplate(id) {\n\n    var mytree = hwTreeWorkFlow;\n    var nodeId = id;\n    if(nodeId == \"\" || !nodeId) {\n        return;\n    }\n    // 显示默认页面\n    divJcxx.show();\n    ModuleInfo.hide();\n    WorkflowModuleInfo.hide();\n    DataServiceModuleInfo.hide();\n    // 调用设计器HTML页面\n    var eleIFrame = document.getElementById(\"iframe_page\");\n    if(eleIFrame) {\n        // eleIFrame.src = '/activiti/modeler.html?mode=design&modelId=' + nodeId + '&info=kermit';\n\n        var infoLogin = '&info=kermit';\n        //var info = Ext.util.Cookies.get('login');\n        // if(einfo && einfo != undefined && einfo != \"undefined\") {\n        //     infoLogin = '&einfo=' + einfo;\n        // } else if(info && info != undefined && info != \"undefined\") {\n        //     infoLogin = '&info=' + info;\n        // }\n        var pageSrc = '/activiti/modeler.html?mode=design&modelId=' + nodeId + infoLogin;\n        eleIFrame.src = pageSrc;\n    }\n\n}\n\n// 2017.11.25 sgw: 声明全局函数\nwindow[\"designTemplate\"] = designTemplate;\n\n//20171128 sgw  工作流页面基本信息的保存\nfunction saveModelInfo(name, description) {\n    var mytree = hwTreeWorkFlow;\n    var selId = mytree.getSelectedItemId();\n    if(selId == \"\" || !selId) {\n        return;\n    }\n    var objKey = \"hw\" + selId;\n    var selnode = mytree.itemObj[objKey];\n    if(!selnode) {\n        return;\n    }\n    if(!selnode.isTemplate) {\n        return;\n    }\n    selnode.text = name;\n    var userName = Ext.util.Cookies.get('userName');\n    var pid = mytree.getParentId(selId)\n    CheckFlowMoudlRename(pid, selId, name, function() {\n        // var urlService = \"http://\" + (vmd.workspace.workflowIp || vmdSettings.workflowIp) + \"/activiti-rest/service/repository/models/\" + selId + \"?info=kermit\";\n        // if(vmdSettings.workflowIp) {\n        //     var info = \"kermit\";\n        //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/models/\" + selId + \"?info=\" + info;\n\n        //     // if(einfo && einfo != undefined && einfo != \"undefined\") {\n        //     //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/models/\" + selId + \"?einfo=\" + einfo;\n        //     // } else {\n        //     //     var info = login;\n        //     //     if(!info || info == undefined || info == \"undefined\") {\n        //     //         info = \"kermit\";\n        //     //     }\n        //     //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/models/\" + selId + \"?info=\" + info;\n        //     // }\n        // }\n\n        // var urlService = \"activiti-rest/service/repository/models/\" + selId + \"?info=kermit\";\n\n        // var urlparam = {\n        //     host: (vmd.workspace.workflowIp || vmdSettings.workflowIp),\n        //     url: urlService\n        // }\n\n        // // 更改活动工区状态\n        // hwDas.edit(\n        //     urlparam, {}, {}, [{ // body传参\n        //         'name': name,\n        //         'metaInfo': \"{\\\"name\\\":\\\"\" + name + \"\\\",\\\"description\\\":\\\"\" + description + \"\\\",\\\"reviser\\\":\\\"\" + userName + \"\\\"}\"\n        //     }],\n        //     function(result) {\n        //         // 获取数据后解析形成树形节点；\n        //         mytree.setItemText(selId, name, name);\n        //         Ext.Msg.alert(\"提示\", \"保存成功！\");\n        //     },\n        //     function(msg) {\n        //         Ext.Msg.alert(\"提示\", \"保存模板基本信息失败！\")\n        //     }\n        // );\n\n        var urlService = \"http://\" + (vmd.workspace.workflowIp || vmdSettings.workflowIp) + \"/activiti-rest/service/repository/models/\" + selId + \"?info=kermit\";\n\n        // var tmp = \"{\\\"name\\\":\\\"\" + name + \"\\\",\\\"description\\\":\\\"\" + description + \"\\\",\\\"reviser\\\":\\\"\" + userName + \"\\\"}\";\n        hwDas.ajax({\n            // das: {\n            //     idedas: true\n            // },\n            url: urlService,\n            type: 'put',\n            timeout: 5000,\n            contentType: 'application/json;charset=UTF-8',\n            data: { // body传参\n                'name': name,\n                'metaInfo': \"{\\\"name\\\":\\\"\" + name + \"\\\",\\\"description\\\":\\\"\" + description + \"\\\",\\\"reviser\\\":\\\"\" + userName + \"\\\"}\"\n                // 'metaInfo': {'name':name,'description':description,'reviser':userName}\n            },\n            success: function(result) {\n                // 获取数据后解析形成树形节点；\n                mytree.setItemText(selId, name, name);\n                WorkflowModuleInfo.hwText4.setValue(Ext.util.Cookies.get('userName'));\n                WorkflowModuleInfo.hwText5.setValue(Ext.Date.dateFormat(new Date(), 'Y-m-d H:i:s'))\n                Ext.Msg.alert(\"提示\", \"保存成功！\")\n            },\n            error: function(msg) {\n                Ext.Msg.alert(\"提示\", \"保存模板基本信息失败！\")\n            }\n        })\n    })\n}\n\n// 2017.11.25 sgw: 声明全局函数\nwindow[\"saveModelInfo\"] = saveModelInfo;\n\n//20171125 sgw  工作流页面保存后调用的方法，用于更新工作流节点的是否发布的状态\nfunction modelDeployment(id) {\n\n    var mytree = hwTreeWorkFlow;\n    var selId = id;\n    if(selId == \"\" || !selId) {\n        return;\n    }\n\n    var nodeNameSel = mytree.getItemText(selId);\n\n    var urlService = \"http://\" + (vmd.workspace.workflowIp || vmdSettings.workflowIp) + \"/activiti-rest/service/repository/deployments/deployModel?info=kermit\";\n    // if(vmdSettings.workflowIp) {\n    //     var info = \"kermit\";\n    //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/deployments/deployModel?info=\" + info;\n\n    //     // if(einfo && einfo != undefined && einfo != \"undefined\") {\n    //     //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/deployments/deployModel?einfo=\" + einfo;\n    //     // } else {\n    //     //     var info = login;\n    //     //     if(!info || info == undefined || info == \"undefined\") {\n    //     //         info = \"kermit\";\n    //     //     }\n    //     //     urlService = \"http://\" + vmdSettings.workflowIp + \"/activiti-rest/service/repository/deployments/deployModel?info=\" + info;\n    //     // }\n    // }\n    hwDas.ajax({\n        // das: {\n        //     idedas: true\n        // },\n        url: urlService,\n        type: 'post',\n        timeout: 5000,\n        contentType: 'application/json;charset=UTF-8',\n        data: { // body传参\n            'id': selId,\n            'name': nodeNameSel\n        },\n        success: function(result) {\n            selnode.isDeployment = false;\n\n            var nodeId = mytree.getSelectedItemId();\n            var objKey = \"hw\" + nodeId;\n            var selnode = mytree.itemObj[objKey];\n            if(selnode) {\n                // 如果是文件夹节点\n                if(selnode.isTemplate) {\n                    selnode.isDeployment = true;\n                    mytree.setItemColor(selId, \"#000000\", \"#000000\");\n                }\n            }\n\n\n\n        },\n        error: function(msg) {\n            Ext.Msg.alert(\"提示\", \"模板发布失败！\");\n        }\n    })\n\n}\n\n// 2017.11.25 sgw: 声明全局函数\nwindow[\"modelDeployment\"] = modelDeployment;\n\n//20171125 sgw  工作流页面保存后调用的方法，用于更新工作流节点的是否发布的状态\nfunction updateDeploymentState() {\n\n    var mytree = hwTreeWorkFlow;\n    var nodeId = mytree.getSelectedItemId();\n    var objKey = \"hw\" + nodeId;\n    var selnode = mytree.itemObj[objKey];\n    if(!selnode) {\n        return;\n    }\n    // 如果是文件夹节点\n    if(selnode.isTemplate) {\n        selnode.isDeployment = false;\n        mytree.setItemColor(nodeId, '#808080', '#808080');\n    }\n}\n\n// 2017.11.25 sgw: 声明全局函数\nwindow[\"updateDeploymentState\"] = updateDeploymentState;\n\n// 数据服务是否加载过\nvar ifDataServiceLoaded = false;\n\nfunction hwTreeDataService_afterrender(sender) {\n\n    ifDataServiceLoaded = true;\n    // 清空树原有的默认数据\n    hwTreeDataService.deleteChildItems(0);\n    getDataServiceCategory();\n\n    // 没配置数据服务时的提示信息\n    panel2.add({\n        id: 'infoDataService_div',\n        tag: 'div',\n        html: '请配置数据服务',\n        style: 'font-size:14px;font-family:Microsoft YaHei;color:#666666;margin:10px;'\n    });\n}\n\n// 重新加载数据服务分类，用于项目配置完成后保存\nfunction reloadDataServiceCategory() {\n    if(ifDataServiceLoaded) {\n        // 清空树原有的默认数据\n        hwTreeDataService.deleteChildItems(0);\n        getDataServiceCategory();\n    }\n}\n\nfunction getDataServiceCategory() {\n    if(!ifDataServiceLoaded) {\n        return;\n    }\n    // 进度条\n    var myMask = new Ext.LoadMask(Ext.getCmp(\"hwTreeDataService\").el, {\n        msg: \"数据加载中,请稍后...\",\n        modal: true,\n        msgCls: 'z-index:10000;'\n    });\n    myMask.show();\n\n    var mytree = hwTreeDataService;\n    var firstNode = \"\";\n    mytree.deleteChildItems(0);\n    mytree.loadJSONObject({\n        id: 0,\n        text: \"数据服务\",\n        item: []\n    });\n    mytree.itemObj = {};\n    mytree.newnode = false;\n\n    // 获取项目中配置的数据服务\n    hwDas.get(\n        \"DataServiceWorkSpace/projectInfo/ProjcetServiceCategory\", {}, {\n            \"projectid\": btnProjectName.projectId,\n            \"type\": 1\n        },\n        function(resultChecked) {\n            // 根据获取的数据赋值基本信息Tab页\n            if(null === resultChecked && undefined === resultChecked) {\n                showDataServiceHintInfo();\n                return;\n            }\n\n            if(null != resultChecked.data && undefined != resultChecked.data) {\n                if(resultChecked.data.length > 0) {\n                    if(null != resultChecked.data[0].datas && undefined != resultChecked.data[0].datas) {\n                        if(resultChecked.data[0].datas.length > 0) {\n\n                            var urlparam = {\n                                host: vmd.workspace.dataServiceIp || vmdSettings.dataServiceIp,\n                                url: \"DataService/Service/Project\"\n                            }\n                            hwDas.get(urlparam, {}, {\n                                    develop: \"true\"\n                                }, function(result) {\n\n                                    var bFlag = false;\n                                    ////////////////////////////////////////////////\n                                    for(var k = 0; k < resultChecked.data[0].datas.length; k++) {\n\n                                        // 获取分类节点数据后解析形成树形节点；\n                                        for(var j = 0; j < result.data.length; j++) {\n\n                                            for(var i = 0; i < result.data[j].datas.length; i++) {\n                                                if(result.data[j].datas[i].id ==\n                                                    resultChecked.data[0].datas[k].service_category_id) {\n\n                                                    bFlag = true;\n                                                    mytree.insertNewChild(0, result.data[j].datas[i].id, result.data[j].datas[i].name);\n                                                    mytree.setItemImage2(result.data[j].datas[i].id, \"tree/model.png\", \"tree/model.png\", \"tree/model.png\");\n                                                    mytree.closeItem(result.data[j].datas[i].id);\n                                                    var treenode = mytree.item(result.data[j].datas[i].id);\n                                                    if(treenode) {\n                                                        treenode.builtin = result.data[j].datas[i].builtin;\n                                                        treenode.code = result.data[j].datas[i].code;\n                                                        treenode.remark = result.data[j].datas[i].remark;\n                                                    }\n                                                    var objKey = \"hw\" + result.data[j].datas[i].id;\n                                                    mytree.itemObj[objKey] = treenode;\n                                                }\n\n                                            }\n                                        }\n                                    }\n                                    if(bFlag) {\n                                        hwTreeDataService.show();\n                                    } else {\n\n                                        hwTreeDataService.hide();\n                                    }\n                                    // 隐藏进度条\n                                    myMask.hide();\n                                },\n                                function(msg) {\n                                    showDataServiceHintInfo();\n                                    // 隐藏进度条\n                                    myMask.hide();\n                                })\n\n\n                            //绑定右键菜单\n                            var menu = new dhtmlXMenuObject();\n                            menu.renderAsContextMenu();\n                            menu.attachEvent(\"onClick\", onMenuDataServiceClick);\n                            // menu.attachEvent(\"onClick\", onMenuWorkFlowClick);\n                            // menu.addNewChild(menu.topId, 0, \"newDataService\", \"添加\", false);\n                            // menu.addNewChild(menu.topId, 1, \"editDataService\", \"编辑\", false);\n                            // menu.addNewChild(menu.topId, 2, \"deleteDataService\", \"删除\", false);\n                            menu.addNewChild(menu.topId, 3, \"viewDataService\", \"查看\", false);\n                            mytree.enableDragAndDrop(\"temporary_disabled\");\n                            mytree.enableContextMenu(menu);\n\n\n                            // 右键菜单的显示隐藏\n                            mytree.attachEvent(\"onBeforeContextMenu\", function(itemId) {\n\n                                // menu.showItem('newDataService');\n                                // menu.showItem('editDataService');\n                                // menu.showItem('deleteDataService');\n                                menu.showItem('viewDataService');\n                                return true;\n                            })\n\n                            //绑定右键事件 设置右键选中节点\n                            mytree.attachEvent('onRightClick', function(id) {\n                                mytree.selectItem(id);\n                            })\n                        } else {\n                            showDataServiceHintInfo();\n                            // 隐藏进度条\n                            myMask.hide();\n                        }\n\n                    } else {\n                        showDataServiceHintInfo();\n                        // 隐藏进度条\n                        myMask.hide();\n                    }\n                } else {\n                    showDataServiceHintInfo();\n                    // 隐藏进度条\n                    myMask.hide();\n                }\n            } else {\n                showDataServiceHintInfo();\n                // 隐藏进度条\n                myMask.hide();\n            }\n        },\n        function(msg) {\n            showDataServiceHintInfo();\n            // 隐藏进度条\n            myMask.hide();\n        });\n}\n\nfunction showDataServiceHintInfo() {\n    hwTreeDataService.hide();\n    // panel2.add({\n    //     id: 'infoDataService_div',\n    //     tag: 'div',\n    //     html: '请配置数据服务',\n    //     style: 'font-size:14px;font-family:Microsoft YaHei;color:#666666;margin:10px;'\n    // });\n}\n// function hwTreeDataService_afterrender(sender) {\n\n//     // 进度条\n//     var myMask = new Ext.LoadMask(Ext.getCmp(\"hwTreeDataService\").el, {\n//         msg: \"数据加载中,请稍后...\",\n//         modal: true,\n//         msgCls: 'z-index:10000;'\n//     });\n//     myMask.show();\n\n//     var mytree = hwTreeDataService;\n//     var firstNode = \"\";\n//     mytree.deleteChildItems(0);\n//     mytree.loadJSONObject({\n//         id: 0,\n//         text: \"数据服务\",\n//         item: []\n//     });\n//     mytree.itemObj = {};\n//     mytree.newnode = false;\n\n//     // 获取根节点下的文件夹节点信息\n\n//     hwDas.ajax({\n//         das: {\n//             idedas: true\n//         },\n//         url: \"DataService/Service/Project\",\n//         type: 'get',\n//         timeout: 5000,\n//         params: {\n//             develop: \"true\"\n//         },\n//         success: function(result) {\n\n//             // 获取分类节点数据后解析形成树形节点；\n//             for(var j = 0; j < result.data.length; j++) {\n\n//                 for(var i = 0; i < result.data[j].datas.length; i++) {\n\n//                     mytree.insertNewChild(0, result.data[j].datas[i].id, result.data[j].datas[i].name);\n//                     mytree.setItemImage2(result.data[j].datas[i].id, \"tree/model.png\", \"tree/model.png\", \"tree/model.png\");\n//                     mytree.closeItem(result.data[j].datas[i].id);\n//                     var treenode = mytree.item(result.data[j].datas[i].id);\n//                     if(treenode) {\n//                         treenode.builtin = result.data[j].datas[i].builtin;\n//                         treenode.code = result.data[j].datas[i].code;\n//                         treenode.remark = result.data[j].datas[i].remark;\n//                     }\n//                     var objKey = \"hw\" + result.data[j].datas[i].id;\n//                     mytree.itemObj[objKey] = treenode;\n//                 }\n//             }\n//             // 隐藏进度条\n//             myMask.hide();\n//         },\n//         error: function(msg) {\n//             Ext.Msg.alert(\"提示\", \"数据服务信息获取失败！\", function() {})\n//         }\n//     })\n\n\n//     //绑定右键菜单\n//     var menu = new dhtmlXMenuObject();\n//     menu.renderAsContextMenu();\n//     menu.attachEvent(\"onClick\", onMenuDataServiceClick);\n//     // menu.attachEvent(\"onClick\", onMenuWorkFlowClick);\n//     menu.addNewChild(menu.topId, 0, \"newDataService\", \"添加\", false);\n//     menu.addNewChild(menu.topId, 1, \"editDataService\", \"编辑\", false);\n//     menu.addNewChild(menu.topId, 2, \"deleteDataService\", \"删除\", false);\n//     menu.addNewChild(menu.topId, 3, \"viewDataService\", \"查看\", false);\n//     mytree.enableDragAndDrop(\"temporary_disabled\");\n//     mytree.enableContextMenu(menu);\n\n\n//     // 右键菜单的显示隐藏\n//     mytree.attachEvent(\"onBeforeContextMenu\", function(itemId) {\n\n//         menu.showItem('newDataService');\n//         menu.showItem('editDataService');\n//         menu.showItem('deleteDataService');\n//         menu.showItem('viewDataService');\n//         return true;\n//     })\n\n//     //绑定右键事件 设置右键选中节点\n//     mytree.attachEvent('onRightClick', function(id) {\n//         mytree.selectItem(id);\n//     })\n// }\n//右键菜单事件\nfunction onMenuDataServiceClick(menuitemId) {\n    if(menuitemId == \"newDataService\") { // 添加\n        newDataService();\n    } else if(menuitemId == \"editDataService\") { // 编辑\n        editDataService();\n    } else if(menuitemId == \"deleteDataService\") { // 删除\n        deleteDataService();\n    } else if(menuitemId == \"viewDataService\") { //查看\n        viewDataService();\n    }\n}\n//数据服务的空白处右键菜单事件\nfunction onMenuDataServicePanelClick(menuitemId) {\n    // 在空白处点击鼠标时，就取消原有节点的选中\n    hwTreeDataService.clearSelection();\n    newDataService();\n}\n\n// 添加数据服务\n// function newDataService() {\n\n//     var addTreeNode = function(code, name, remark) {\n//         var mytree = hwTreeDataService;\n//         var selId = mytree.getSelectedItemId();\n//         var nodeNameSel = mytree.getSelectedItemText();\n//         var serviceCode = code;\n//         var serviceName = name;\n//         var serviceRemark = remark;\n\n//         var urlparam = {\n//             host: vmd.workspace.dataServiceIp || vmdSettings.dataServiceIp,\n//             url: \"DataService/Service/Project\"\n//         }\n//         hwDas.add(\n//             urlparam, {}, {}, {\n//                 code: serviceCode,\n//                 name: serviceName,\n//                 remark: serviceRemark\n//             },\n//             function(result) { // 保存成功\n//                 // Tips.tips(\"保存成功！\", \"success\");\n\n//                 if(result == \"\") {\n//                     return;\n//                 }\n//                 if(!result.data) {\n//                     return;\n//                 }\n\n//                 if(result.data.length > 0) {\n//                     if(result.data[0].datas) {\n//                         var serviceName = result.data[0].datas.name;\n//                         var serviceId = result.data[0].datas.id;\n\n//                         // 获取数据后解析形成树形节点；\n//                         mytree.insertNewChild(0, serviceId, serviceName);\n//                         mytree.setItemImage2(serviceId, \"tree/model.png\", \"tree/model.png\", \"tree/model.png\");\n//                         mytree.closeItem(serviceId);\n//                         var treenode = mytree.item(serviceId);\n//                         if(treenode) {\n//                             treenode.code = result.data[0].datas.code;\n//                             treenode.remark = result.data[0].datas.remark;\n//                             treenode.builtin = result.data[0].datas.builtin;\n//                         }\n//                         var objKey = \"hw\" + serviceId;\n//                         mytree.itemObj[objKey] = treenode;\n//                         mytree.selectItem(serviceId, true, false);\n\n//                         hwTreeDataService.show();\n\n//                         connectDataServicProject(serviceId);\n\n//                         // 显示基本信息页面\n//                         var eleIFrame = document.getElementById(\"iframe_page\");\n//                         if(eleIFrame) {\n//                             eleIFrame.src = vmd.virtualPath + '/modules/eQ9ULgcVb1/hw4acf2f8b/hwcb376d18.html';\n//                         }\n//                     }\n//                 }\n//             },\n//             function(msg) {\n//                 Ext.Msg.alert(\"提示\", \"添加服务失败！\");\n//             }\n//         );\n\n\n//         // hwDas.ajax({\n//         //     das: {\n//         //         idedas: true\n//         //     },\n//         //     url: \"DataService/Service/Project\",\n//         //     type: 'post',\n//         //     timeout: 5000,\n//         //     data: [{ // body传参\n//         //         code: serviceCode,\n//         //         name: serviceName,\n//         //         remark: serviceRemark\n//         //     }],\n//         //     success: function(result) {\n\n//         //         if(result == \"\") {\n//         //             return;\n//         //         }\n//         //         if(!result.data) {\n//         //             return;\n//         //         }\n\n//         //         if(result.data.length > 0) {\n//         //             if(result.data[0].datas) {\n//         //                 var serviceName = result.data[0].datas.name;\n//         //                 var serviceId = result.data[0].datas.id;\n\n//         //                 // 获取数据后解析形成树形节点；\n//         //                 mytree.insertNewChild(0, serviceId, serviceName);\n//         //                 mytree.setItemImage2(serviceId, \"tree/model.png\", \"tree/model.png\", \"tree/model.png\");\n//         //                 mytree.closeItem(serviceId);\n//         //                 var treenode = mytree.item(serviceId);\n//         //                 if(treenode) {\n//         //                     treenode.code = result.data[0].datas.code;\n//         //                     treenode.remark = result.data[0].datas.remark;\n//         //                     treenode.builtin = result.data[0].datas.builtin;\n//         //                 }\n//         //                 var objKey = \"hw\" + serviceId;\n//         //                 mytree.itemObj[objKey] = treenode;\n//         //                 mytree.selectItem(serviceId, true, false);\n\n//         //                 connectDataServicProject(serviceId);\n\n//         //                 // 显示基本信息页面\n//         //                 var eleIFrame = document.getElementById(\"iframe_page\");\n//         //                 if(eleIFrame) {\n//         //                     eleIFrame.src = vmd.virtualPath + '/modules/eQ9ULgcVb1/hw4acf2f8b/hwcb376d18.html';\n//         //                 }\n//         //             }\n//         //         }\n//         //     },\n//         //     error: function(msg) {\n//         //         Ext.Msg.alert(\"提示\", \"添加服务失败！\")\n//         //     }\n//         // })\n//     }\n//     var winForm = new Ext.winDataService(addTreeNode, \"\", \"\", \"\");\n//     winForm.show();\n// }\n\n// 新建数据服务分类后，同步关联与项目的关系\n// function connectDataServicProject(id) {\n//     var objData = {\n//         'projectid': btnProjectName.projectId,\n//         'servicecategoryid': id,\n//         'type': 1\n//     };\n//     hwDas.add(\n//         \"DataServiceWorkSpace/projectInfo/ProjcetServiceCategory\", {}, {}, objData,\n//         function(result) {\n//             // Tips.tips(\"保存成功！\", \"success\");\n//         },\n//         function(msg) {\n//             // Tips.tips(\"保存失败！\", \"error\");\n//         }\n//     );\n// }\n\n// 同步删除数据服务与项目的关联关系\n// function delDataServiceProject(id) {\n\n//     hwDas.del(\n//         \"DataServiceWorkSpace/projectInfo/ProjcetServiceCategory\", {}, {\n//             'projectid': btnWorkSpaceName.workspaceId,\n//             'servicecategoryid': id,\n//             'type': 1\n//         },\n//         function(result) {\n//             // Tips.tips(\"删除成功！\", \"success\");\n//         },\n//         function(msg) {\n//             // Tips.tips(\"删除失败！\", \"error\");\n//         }\n//     );\n// }\n\n// 编辑数据服务\nfunction editDataService() {\n\n    var addTreeNode = function(code, name, remark) {\n\n        var mytree = hwTreeDataService;\n        var serviceIdTmp = mytree.getSelectedItemId();\n        var serviceCode = code;\n        var serviceName = name;\n        var serviceRemark = remark;\n\n        var urlparam = {\n            host: vmd.workspace.dataServiceIp || vmdSettings.dataServiceIp,\n            url: \"DataService/Service/Project\"\n        }\n\n        // 更改活动工区状态\n        hwDas.edit(\n            urlparam, {}, {}, [{\n                'code': serviceCode,\n                'id': serviceIdTmp,\n                'name': serviceName,\n                'remark': serviceRemark\n            }],\n            function(result) {\n                if(result == \"\") {\n                    return;\n                }\n                if(!result.data) {\n                    return;\n                }\n\n                if(result.data.length > 0) {\n                    if(result.data[0].datas) {\n                        var serviceName = result.data[0].datas.name;\n                        var serviceId = result.data[0].datas.id;\n\n                        mytree.setItemText(serviceId, serviceName, serviceName);\n                        var treenode = mytree.item(serviceId);\n                        if(treenode) {\n                            treenode.code = result.data[0].datas.code;\n                            treenode.remark = result.data[0].datas.remark;\n                            treenode.builtin = result.data[0].datas.builtin;\n                        }\n                        var objKey = \"hw\" + serviceId;\n                        mytree.itemObj[objKey] = treenode;\n                    }\n                }\n            },\n            function(msg) {\n                Ext.Msg.alert(\"提示\", \"编辑节点失败！\")\n            }\n        );\n\n        // // 模板节点\n        // hwDas.ajax({\n        //     das: {\n        //         idedas: true\n        //     },\n        //     url: \"DataService/Service/Project\",\n        //     // url: \"http://\"+vmdSettings.dataServiceIp+\"/DasService/DataService/DataService/Service/Project\",\n        //     type: 'put',\n        //     timeout: 5000,\n        //     data: [{ // body传参\n        //         'code': serviceCode,\n        //         'id': serviceIdTmp,\n        //         'name': serviceName,\n        //         'remark': serviceRemark\n        //     }],\n        //     success: function(result) {\n\n        //         if(result == \"\") {\n        //             return;\n        //         }\n        //         if(!result.data) {\n        //             return;\n        //         }\n\n        //         if(result.data.length > 0) {\n        //             if(result.data[0].datas) {\n        //                 var serviceName = result.data[0].datas.name;\n        //                 var serviceId = result.data[0].datas.id;\n\n        //                 mytree.setItemText(serviceId, serviceName, serviceName);\n        //                 var treenode = mytree.item(serviceId);\n        //                 if(treenode) {\n        //                     treenode.code = result.data[0].datas.code;\n        //                     treenode.remark = result.data[0].datas.remark;\n        //                     treenode.builtin = result.data[0].datas.builtin;\n        //                 }\n        //                 var objKey = \"hw\" + serviceId;\n        //                 mytree.itemObj[objKey] = treenode;\n        //             }\n        //         }\n        //     },\n        //     error: function(msg) {\n        //         Ext.Msg.alert(\"提示\", \"编辑节点失败！\")\n        //     }\n        // })\n    }\n\n    var mytreeTmp = hwTreeDataService;\n    var nodeId = mytreeTmp.getSelectedItemId();\n    var nodeNameTmp = mytreeTmp.getSelectedItemText();\n    var objKey = \"hw\" + nodeId;\n    var nodeItemObj = mytreeTmp.itemObj[objKey];\n\n    var winForm = new Ext.winDataService(addTreeNode, nodeItemObj.code, nodeNameTmp, nodeItemObj.remark);\n    winForm.show();\n}\n// 删除数据服务\n// function deleteDataService() {\n//     var disabledIds=['104FPWq2wr','eQX5RdNjsW','TuKge8jDwF','Tv3hLjddZS'];\n//     Ext.Msg.confirm(\"提示!\", \"确定要删除?\", function(btn) {\n//         if(btn == \"yes\") {\n\n//             var mytree = hwTreeDataService;\n//             var selId = mytree.getSelectedItemId();\n//             var objKey = \"hw\" + selId;\n//             var nodeItemObj = mytree.itemObj[objKey];\n\n//             if(!nodeItemObj) {\n//                 return;\n//             }\n//             //关键服务禁用删除\n//             if(disabledIds.indexOf(selId)!=-1) return;\n\n//             mytree.deleteItem(selId);\n//             if(mytree.hasChildren(0)) {\n//                 mytree.show();\n//             } else {\n//                 mytree.hide();\n//             }\n//             delDataServiceProject(selId);\n\n//             // 显示默认页面\n//             divJcxx.show();\n//             ModuleInfo.hide();\n//             WorkflowModuleInfo.hide();\n//             DataServiceModuleInfo.hide();\n//             var eleIFrame = document.getElementById(\"iframe_page\");\n//             if(eleIFrame) {\n//                 eleIFrame.src = vmd.virtualPath + '/modules/eQ9ULgcVb1/eQ9ULgcVb5/hw03cb4931.html';\n//             }\n\n//             var urlparam = {\n//                 host: vmd.workspace.dataServiceIp || vmdSettings.dataServiceIp,\n//                 url: \"DataService/Service/Project\"\n//             }\n//             hwDas.del(\n//                 urlparam, {}, {\n//                     'id': selId\n//                 },\n//                 function(result) {\n//                     // Tips.tips(\"删除成功！\", \"success\");\n//                 },\n//                 function(msg) {\n//                     Tips.tips(\"删除服务失败！\", \"error\");\n//                 }\n//             );\n\n//             // hwDas.ajax({\n//             //     das: {\n//             //         idedas: true\n//             //     },\n//             //     url: \"DataService/Service/Project\",\n//             //     // url: \"http://\"+vmdSettings.dataServiceIp+\"/DasService/DataService/DataService/Service/Project\",\n//             //     type: 'delete',\n//             //     timeout: 5000,\n//             //     params: {\n//             //         'id': selId\n//             //     },\n//             //     success: function(result) {\n//             //         // Ext.Msg.alert(\"提示\", \"删除模板成功！\")\n//             //     },\n//             //     error: function(msg) {\n//             //         Ext.Msg.alert(\"提示\", \"删除服务失败！\")\n//             //     }\n//             // })\n//         } else {\n\n//         }\n//     });\n// }\n\n//查看数据服务\nfunction viewDataService() {\n\n    var mytree = hwTreeDataService;\n    var nodeId = mytree.getSelectedItemId();\n    var objKey = \"hw\" + nodeId;\n    var selnode = mytree.itemObj[objKey];\n    if(!selnode) {\n        return;\n    }\n\n    divJcxx.show();\n    ModuleInfo.hide();\n    WorkflowModuleInfo.hide();\n    DataServiceModuleInfo.hide();\n\n    var eleIFrame = document.getElementById(\"iframe_page\");\n    var urlService = \"http://\" + (vmd.workspace.dataServiceIp || vmdSettings.dataServiceIp) + \"/DasManage/main/project/manage.html?id=\" + nodeId + \"&builtin=\" + selnode.builtin;\n    // if(vmdSettings.dataServiceIp) {\n    //     urlService = \"http://\" + vmdSettings.dataServiceIp + \"/DasManage/main/project/manage.html?id=\" + nodeId + \"&builtin=\" + selnode.builtin;\n    // }\n    if(eleIFrame) {\n        var url = urlService;\n        eleIFrame.src = url;\n        // eleIFrame.src = \"http://\"+vmdSettings.dataServiceIp+\"/DasManage/main/project/manage.html?id=104FPWq2wr&builtin=1\";\n    }\n}\n\n// 2017.11.27: 声明全局函数\nwindow[\"viewDataService\"] = viewDataService;\n\n//数据服务录入框\nExt.winDataService = Ext.extend(Ext.Window, {\n    xtype: \"window\",\n    title: \"数据服务\",\n    width: 300,\n    height: 214,\n    layout: \"form\",\n    bodyStyle: 'padding:15px',\n    labelAlign: \"left\",\n    labelWidth: 40,\n    modal: true,\n    constructor: function(callback, code, name, remark) {\n        this.callback = callback;\n        this.valueCode = code;\n        this.valueName = name;\n        this.valueRemark = remark;\n        this.callParent();\n    },\n    initComponent: function() {\n        var me = this;\n        this.fbar = [{\n            text: \"确定\",\n            handler: function() {\n                me.callback(Ext.getCmp('code').getValue(), Ext.getCmp('name').getValue(), Ext.getCmp('remark').getValue());\n                me.close();\n            }\n        }, {\n            text: \"取消\",\n            handler: function() {\n                me.close();\n            }\n        }];\n\n        this.items = [{\n            id: 'code',\n            xtype: \"textfield\",\n            fieldLabel: \"编码\",\n            anchor: \"100%\",\n            value: this.valueCode\n        }, {\n            id: 'name',\n            xtype: \"textfield\",\n            fieldLabel: \"名称\",\n            anchor: \"100%\",\n            value: this.valueName\n        }, {\n            id: 'remark',\n            xtype: \"textfield\",\n            fieldLabel: \"说明\",\n            anchor: \"100%\",\n            value: this.valueRemark\n        }]\n        Ext.winDataService.superclass.initComponent.call(this);\n    }\n})\n\nfunction hwTreeDataService_nodeClick(sender, id) {\n    viewDataService();\n    return;\n    //win.close()\n    divJcxx.show();\n    ModuleInfo.hide();\n    WorkflowModuleInfo.hide();\n    DataServiceModuleInfo.hide();\n\n    divJcxx.hide();\n    DataServiceModuleInfo.show();\n    DataServiceModuleInfo.refresh(hwTreeDataService, btnProjectName.projectId, btnWorkSpaceName.workspaceId);\n\n    // var eleIFrame = document.getElementById(\"iframe_page\");\n    // if(eleIFrame) {\n    //     eleIFrame.src = vmd.virtualPath + '/modules/eQ9ULgcVb1/hw4acf2f8b/hwcb376d18.html';\n    // }\n}\n\nfunction btnXtpz_click(sender) {\n\n    var updateConfig = function(workflowIp, dataServiceIp) {\n\n        // 存储信息到系统配置变量中\n        vmdSettings.workflowIp = workflowIp;\n        vmdSettings.dataServiceIp = dataServiceIp;\n        var bodyStr = 'window.vmdSettings={\\n';\n        bodyStr += \"workflowIp: \\\"\" + workflowIp + \"\\\",\\n\";\n        bodyStr += \"dataServiceIp: \\\"\" + dataServiceIp + \"\\\"\\n\";\n        bodyStr += '}';\n        saveVmdConfig(\"config.js\", bodyStr, \"vmdstate\");\n    }\n\n    var winForm = new Ext.winVmdConfig(updateConfig, vmdSettings.workflowIp, vmdSettings.dataServiceIp);\n    winForm.show();\n}\n\n// 保存配置信息\nvar saveVmdConfig = function(filename, bodyStr, taskName) {\n\n    Ext.Ajax.request({\n        url: vmd.vmdUploadPath + 'FileService?FileName=' + filename,\n        timeout: 5000,\n        success: function(result) {\n            var res;\n            try {\n                res = Ext.util.JSON.decode(result.responseText);\n\n                var info = Ext.decode(bodyStr);\n                var replacestr = res.data;\n                var workflowIpStr = 'vmdSettings.workflowIp=\"{ip}\"';\n                var dataServiceIpStr = 'vmdSettings.dataServiceIp=\"{ip}\"';\n                workflowIpStr = workflowIpStr.format({\n                    ip: info.workflowIp\n                })\n                dataServiceIpStr = dataServiceIpStr.format({\n                    ip: info.dataServiceIp\n                })\n                replacestr = replacestr.replace(/vmdSettings.workflowIp=\"[\\w.:\\d]+\"/g, workflowIpStr);\n                replacestr = replacestr.replace(/vmdSettings.dataServiceIp=\"[\\w.:\\d]+\"/g, dataServiceIpStr);\n\n\n                if(res.errMsg) {\n                    Ext.Msg.alert('错误', res.errMsg);\n                    return\n                } else {\n                    Ext.Ajax.request({\n                        url: vmd.vmdUploadPath + 'FileService',\n                        // defaultPostHeader: 'text/plain',\n                        timeout: 5000,\n                        success: function(result) {\n                            Ext.Msg.alert('提示', '保存成功！');\n                        },\n                        failure: function(result) {\n                            //vmdstate = true;\n                            tastList[taskName] = true;\n                            Ext.Msg.alert('错误', '网络超时，保存失败！')\n                            myMask.hide()\n                        },\n                        headers: {\n                            token: '',\n                            FileName: filename\n                        },\n                        params: {\n                            body: replacestr\n                        }\n                    });\n                }\n            } catch (ex) {\n                res = {};\n            }\n        }\n    })\n}\n\n//模板名称录入框\nExt.winVmdConfig = Ext.extend(Ext.Window, {\n    xtype: \"window\",\n    title: \"系统信息配置\",\n    width: 300,\n    height: 160,\n    layout: \"form\",\n    bodyStyle: 'padding:10px',\n    labelAlign: \"right\",\n    labelWidth: 80,\n    modal: true,\n    constructor: function(callback, workflowIp, dataServiceIp) {\n\n        this.callback = callback;\n        this.workflowIp = workflowIp;\n        this.dataServiceIp = dataServiceIp;\n        // this.reportIp = reportIp;\n        this.callParent();\n    },\n    initComponent: function() {\n        var me = this;\n        this.fbar = [{\n            text: \"确定\",\n            handler: function() {\n                me.callback(Ext.getCmp('workflowIp').getValue(), Ext.getCmp('dataServiceIp').getValue());\n                me.close();\n            }\n        }, {\n            text: \"取消\",\n            handler: function() {\n                me.close();\n            }\n        }];\n\n        this.items = [{\n            id: 'workflowIp',\n            xtype: \"textfield\",\n            fieldLabel: \"工作流地址\",\n            anchor: \"100%\",\n            value: this.workflowIp\n        }, {\n            id: 'dataServiceIp',\n            xtype: \"textfield\",\n            fieldLabel: \"数据服务地址\",\n            anchor: \"100%\",\n            value: this.dataServiceIp\n        }]\n        Ext.winVmdConfig.superclass.initComponent.call(this);\n    }\n})\n\n// 退出\n\nfunction btnZy_click(sender) {\n    window.open(vmd.virtualPath + '/modules/hw3ce0447e/hwef4bf837/hw8EUFAFsa.html', \"资源管理\")\n}\n\nfunction btnGrxx_click(sender) {\n    // Ext.MessageBox.alert(\"提示\", \"正在开发中...\");\n}\n\nfunction rightMenuClick(id, el, title, fn) {\n    var menu = new Ext.menu.Menu({\n        id: id,\n        items: [{\n            text: title,\n            handler: function() {\n                fn && fn()\n            }\n        }]\n    })\n    el.on('contextmenu', function(e) {\n        e.stopEvent();\n        menu.showAt(e.getXY());\n    })\n}\n// 左侧空白右键菜单\nfunction panel_afterrender(sender) {\n    var isAdd = false; // 判断是否添加粘贴item\n    var menu = new Ext.menu.Menu({\n        id: 'p_menu',\n        items: [{\n            id: 1,\n            text: '新建分类',\n            handler: function() {\n                creatProjectFord()\n            }\n        }, {\n            id: 2,\n            text: '新建模块',\n            handler: function() {\n                // 在空白处点击鼠标时，就取消原有节点的选中\n                hwTree.clearSelection();\n\n                hwTree.newnode = true;\n                divJcxx.hide();\n                ModuleInfo.show();\n                WorkflowModuleInfo.hide();\n                DataServiceModuleInfo.hide();\n                ModuleInfo.refresh(hwTree, btnProjectName.projectId, btnWorkSpaceName.workspaceId);\n                lastnodeType = \"0\";\n                // hwTree.newnode = true;\n                // document.getElementById(\"iframe_page\").src = vmd.virtualPath + '/modules/eQ9ULgcVb1/hwipUwNjJb/hw4db49729.html';\n                bselNodeId = id;\n            }\n        }, {\n            id: 3,\n            text: '项目注册',\n            handler: function() {\n                // 根据项目id获取注册配置信息\n                hwDas.get(\"DataServiceWorkSpace/projectInfo/projectreginfo\", {}, {\n                    projectid: btnProjectName.projectId\n                }, function(result) {\n                    // console.log(result)\n                    if(result.data && result.data.length > 0 && result.data[0].datas && result.data[0].datas.length > 0) {\n                        var porjectRegister = new vmd.window({\n                            title: \"项目注册发布\",\n                            url: vmd.core.getVirtualPath() + \"/modules/eQ9ULgcVb1/eQ9ULgcVb5/hwid1VqqtB.html\",\n                            auto: false,\n                            height: 600,\n                            width: 520,\n                            maximizable: false,\n                            enableLoading: true,\n                            resizable: true,\n                            params: {\n                                project_id: btnProjectName.projectId,\n                                r: new Date().getTime()\n                            }\n                        })\n                        porjectRegister.show();\n                        parent.porjectRegister = porjectRegister;\n                        parent.projectName = btnProjectName.getText();\n                        parent.subsysid = result.data[0].datas[0].subsysid;\n                        parent.pttype = result.data[0].datas[0].pttype;\n                        parent.ptdb = result.data[0].datas[0].ptdb;\n                        parent.virtualPath = result.data[0].datas[0].virtualdir;\n                        parent.resourceserver = result.data[0].datas[0].resourceserver;\n                    } else {\n                        vmd.alert('提示', '请先对该项目进行注册信息配置');\n                    }\n\n                })\n            }\n        }, {\n            id: 4,\n            text: '导出模块',\n            handler: function() {\n                ExpModules()\n            }\n        }]\n    })\n    this.el.on('contextmenu', function(e) {\n        e.stopEvent();\n        if(hwproject_id.getValue() == '') {\n            return;\n        }\n        if(hwTree.copyNodeId) {\n            if(!isAdd) {\n                menu.addItem({\n                    id: 4,\n                    text: '粘贴',\n                    handler: function() {\n                        nodePaste();\n                    }\n                });\n                isAdd = true;\n            }\n        } else {\n            if(isAdd) {\n                menu.remove(4);\n                isAdd = false\n            }\n        }\n\n        menu.showAt(e.getXY());\n    })\n}\n\n//导出模块功能 成兵\nfunction ExpModules(project_name, project_id) {\n    var nodepath;\n    if(hwTree.getSelectedItemId() && hwTree.itemObj[hwTree.getSelectedItemId()])\n        nodepath = hwTree.itemObj[hwTree.getSelectedItemId()].path;\n\n    var expmodulesWin = new vmd.window({\n        title: \"模块导出\",\n        url: vmd.core.getVirtualPath() + \"/modules/eQ9ULgcVb1/eQ9ULgcVb5/hwca60610a.html\",\n        auto: false,\n        height: 520,\n        width: 500,\n        maximizable: false,\n        enableLoading: true,\n        resizable: false,\n        params: {\n            project_name: project_name || btnProjectName.getText(),\n            project_id: project_id || btnProjectName.projectId,\n            nodepath: nodepath,\n            r: new Date().getTime()\n        }\n    })\n    expmodulesWin.show();\n    window.expmodulesWin = expmodulesWin;\n}\nwindow.ExpModules = ExpModules;\n\n//导出模块功能  选择项目 成兵\nfunction selectExpProject() {\n    var expProSelWin = new vmd.window({\n        title: \"导出项目选择\",\n        url: vmd.core.getVirtualPath() + \"/modules/eQ9ULgcVb1/eQ9ULgcVb5/hwMYLlr4P6.html\",\n        auto: false,\n        height: 520,\n        width: 870,\n        maximizable: false,\n        enableLoading: true,\n        resizable: false,\n        params: {\n            r: new Date().getTime()\n        }\n    })\n    expProSelWin.show();\n    window.expProSelWin = expProSelWin;\n}\n\n\nfunction getNodePath(node) {\n    var nodepath = \"/\" + node.id\n    if(node.parent) {\n        return getNodePath(node.parent) + nodepath\n    }\n\n    return nodepath\n}\n\n// 工作流的新建分类\nfunction panel7_afterrender(sender) {\n    rightMenuClick('p_workflowMenu', this.el, '新建分类', function() {\n        onMenuWorkFlowPanelClick('newWorkFlowCategory');\n    });\n}\n\nfunction panel8_afterrender(sender) {\n    this.el.on('contextmenu', function(e) {\n        e.stopEvent();\n    })\n}\n\n// 获取模块／分类信息\nfunction changeData() {\n    var mytree = hwTree;\n    var firstNode = \"\";\n    mytree.deleteChildItems(0);\n    mytree.loadJSONObject({\n        id: 0,\n        text: \"我的项目\",\n        item: []\n    });\n    mytree.itemObj = {};\n    mytree.newnode = false;\n    if(hwproject_id.getValue() != '') {\n        //进度条\n        var myMask = new Ext.LoadMask(Ext.getCmp(\"hwTree\").el, {\n            msg: \"数据加载中,请稍后...\",\n            msgCls: 'z-index:10000;'\n        });\n        myMask.show();\n        hwDas.ajax({\n            das: {\n                idedas: true\n            },\n            url: \"CDEServcie/module/category\",\n            type: 'get',\n            timeout: 10000,\n            params: {\n                project_id: hwproject_id.getValue(),\n                parent_id: 0\n            },\n            success: function(result) {\n                var datajson = result.data[0].datas;\n                var treeDataJson = [];\n                for(var i = 0; i < datajson.length; i++) {\n                    mytree.insertNewChild(0, datajson[i].id, datajson[i].name);\n                    mytree.setItemImage2(datajson[i].id, \"tree/folderClosed.gif\", \"tree/folderOpen.gif\", \"tree/folderClosed.gif\")\n                    mytree.insertNewChild(datajson[i].id, datajson[i].id + \"-0\", \"\");\n                    mytree.closeItem(datajson[i].id);\n                    var treenode = mytree.item(datajson[i].id);\n                    treenode.path = \"/\" + hwproject_id.getValue() + \"/\" + datajson[i].id;\n                    treenode.projectId = hwproject_id.getValue();\n                    if(treenode) {\n                        treenode.isFord = true;\n                        treenode.loadChild = false;\n                        treenode.isProject = false;\n                    }\n                    mytree.itemObj[datajson[i].id] = treenode;\n                }\n\n                bCategoryFlag = true;\n                bInfoFlag = true;\n                if(bCategoryFlag && bInfoFlag) {\n                    myMask.hide();\n                }\n                // 项目中的模块添加到搜索列表\n                getQueryData()\n            },\n            error: function(msg) {\n                bCategoryFlag = true;\n                bInfoFlag = true;\n                if(bCategoryFlag && bInfoFlag) {\n                    myMask.hide();\n                }\n                Ext.Msg.alert(\"提示\", \"获取模块信息失败\", function() {})\n            }\n        })\n        hwDas.ajax({\n            das: {\n                idedas: true\n            },\n            url: \"CDEServcie/module/info\",\n            type: 'get',\n            timeout: 10000,\n            params: {\n                project_id: hwproject_id.getValue(),\n                category_id: '0'\n            },\n            success: function(result) {\n                var datajson = result.data[0].datas;\n                var treeDataJson = [];\n                for(var i = 0; i < datajson.length; i++) {\n                    mytree.insertNewChild(0, datajson[i].id, datajson[i].name);\n                    mytree.setItemImage2(datajson[i].id, \"tree/model.png\", \"tree/model.png\", \"tree/model.png\")\n                    var treenode = mytree.item(datajson[i].id);\n                    treenode.path = \"/\" + hwproject_id.getValue() + \"/\" + datajson[i].id;\n                    treenode.projectId = hwproject_id.getValue();\n                    if(treenode) {\n                        treenode.isModel = true;\n                        treenode.createuser = datajson[i].row_created_by;\n                        treenode.createtime = datajson[i].row_created_date;\n                        treenode.changetime = datajson[i].row_changed_date;\n                        treenode.changeuser = datajson[i].row_changed_by;\n                        treenode.remark = datajson[i].remark;\n                        treenode.code = datajson[i].code;\n                    }\n                    mytree.itemObj[datajson[i].id] = treenode;\n                }\n                bInfoFlag = true;\n                bCategoryFlag = true;\n                if(bCategoryFlag && bInfoFlag) {\n                    myMask.hide();\n                }\n            },\n            error: function(msg) {\n                bInfoFlag = true;\n                bCategoryFlag = true;\n                if(bCategoryFlag && bInfoFlag) {\n                    myMask.hide();\n                }\n                Ext.Msg.alert(\"提示\", \"获取模块信息失败\")\n            }\n        })\n    }\n\n    //绑定右键菜单\n    var menu = new dhtmlXMenuObject();\n    menu.renderAsContextMenu();\n    menu.attachEvent(\"onClick\", onMenuClick);\n    // menu.addNewChild(menu.topId, 0, \"newPro\", \"新建项目\", false);\n    menu.addNewChild(menu.topId, 1, \"newFord\", \"新建分类\", false);\n    menu.addNewChild(menu.topId, 2, \"newMode\", \"新建模块\", false);\n    menu.addNewChild(menu.topId, 3, \"copy\", \"复制\", false);\n    //menu.addNewChild(menu.topId, 4, \"cut\", \"剪切\", false);\n    menu.addNewChild(menu.topId, 5, \"paste\", \"粘帖\", false);\n    menu.addNewChild(menu.topId, 7, \"reName\", \"重命名\", false);\n    menu.addNewChild(menu.topId, 6, \"delete\", \"删除\", false);\n    menu.addNewChild(menu.topId, 8, \"expmodules\", \"导出模块\", false);\n    mytree.enableDragAndDrop(\"temporary_disabled\");\n\n    mytree.enableContextMenu(menu);\n\n    mytree.attachEvent(\"onBeforeContextMenu\", function(itemId) {\n        var mytree = hwTree;\n        var selId = mytree.getSelectedItemId();\n        var selnode = mytree.itemObj[selId];\n\n        //需要在项目及分类下显示粘贴\n        var showPasteMenu = function(tree, menu) {\n            menu.hideItem('copy');\n            menu.hideItem('cut');\n            if(tree.copyNodeId) {\n                menu.showItem('paste');\n            } else {\n                menu.hideItem('paste');\n            }\n        }\n\n        if(selnode.isProject) {\n            //项目\n            menu.showItem('newPro');\n            menu.showItem('newFord');\n            menu.showItem('newMode');\n            menu.showItem('delete');\n            menu.showItem('expmodules');\n\n            showPasteMenu(mytree, menu);\n        } else if(selnode.isFord) {\n            //分类\n            menu.hideItem('newPro');\n            menu.showItem('newFord');\n            menu.showItem('newMode');\n            menu.showItem('reName');\n            menu.showItem('delete');\n            menu.showItem('expmodules');\n\n            showPasteMenu(mytree, menu);\n        } else if(selnode.isModel) {\n            //模块\n            menu.hideItem('newPro');\n            menu.hideItem('newFord');\n            menu.hideItem('newMode');\n            menu.hideItem('reName');\n            menu.showItem('copy');\n            menu.showItem('expmodules');\n\n            //menu.showItem('cut');\n            menu.hideItem('paste');\n            menu.showItem('delete');\n        }\n        return true\n    })\n\n    //绑定右键事件 设置右键选中节点\n    mytree.attachEvent('onRightClick', function(id) {\n        //panel下的右键取消\n        Ext.getCmp('p_menu') && Ext.getCmp('p_menu').hide();\n        mytree.selectItem(id);\n        hwTree_nodeClick(mytree, id)\n    })\n}\n\n// 初始化工区列表菜单\nfunction initMenuWorkSpaceList() {\n    hwMenuWorkSpaceList.removeAll();\n    hwDas.get(\n        \"DataServiceWorkSpace/WorkSpaceInfo/WorkSpaceUserQuery\", {}, {\n            'loginname': Ext.util.Cookies.get('hwLogin')\n        },\n        function(result) {\n            // 根据获取的数据赋值基本信息Tab页\n            if(null == result || undefined == result) {\n                return;\n            }\n            if(null != result.data && undefined != result.data) {\n                if(result.data.length > 0) {\n                    if(null != result.data[0].datas && undefined != result.data[0].datas) {\n                        if(result.data[0].datas.length > 0) {\n                            var isActive = false;\n                            for(var i = 0; i < result.data[0].datas.length; i++) {\n                                if(result.data[0].datas[i].active_ind == 1) {\n                                    isActive = true;\n                                    hwvarWorkSpaceId.setValue(result.data[0].datas[i].workspace_id);\n                                    btnWorkSpaceManagement.workspaceId = result.data[0].datas[i].workspace_id;\n                                    btnWorkSpaceName.setText(result.data[0].datas[i].name);\n                                    btnWorkSpaceName.workspaceId = result.data[0].datas[i].workspace_id;\n                                    getProject(hwvarWorkSpaceId.getValue());\n                                    lastWorkId = result.data[0].datas[i].workspace_id;\n                                    var itemMenu = new Ext.menu.CheckItem({\n                                        id: result.data[0].datas[i].workspace_id,\n                                        text: result.data[0].datas[i].name,\n                                        iconCls: \"server-list\",\n                                        group: 'name',\n                                        checked: true\n                                    })\n                                } else {\n                                    var itemMenu = new Ext.menu.CheckItem({\n                                        id: result.data[0].datas[i].workspace_id,\n                                        text: result.data[0].datas[i].name,\n                                        iconCls: \"server-list\",\n                                        group: 'name',\n                                        checked: false\n                                    })\n                                }\n                                hwMenuWorkSpaceList.addMenuItem(itemMenu);\n                            }\n                            // 如果没有活动工区，就设置第一个为活动工区\n                            if(!isActive) {\n                                hwvarWorkSpaceId.setValue(result.data[0].datas[0].workspace_id);\n                                btnWorkSpaceManagement.workspaceId = result.data[0].datas[0].workspace_id;\n                                btnWorkSpaceName.setText(result.data[0].datas[0].name);\n                                btnWorkSpaceName.workspaceId = result.data[0].datas[0].workspace_id;\n                                getProject(hwvarWorkSpaceId.getValue());\n                            }\n                            vmd.core.getWorkSpaceServer(btnWorkSpaceName.workspaceId);\n                        } else {\n                            newDefaultWorkSpace();\n                        }\n                    } else {\n                        newDefaultWorkSpace();\n                    }\n                } else {\n                    newDefaultWorkSpace();\n                }\n            } else {\n                newDefaultWorkSpace();\n            }\n        },\n        function(msg) {\n            Tips.tips(\"查询工区信息失败！\", \"error\");\n        });\n}\n\n// 初始化工区列表菜单\nfunction newDefaultWorkSpace() {\n\n    // 当前用户无工区则新建工区\n    var newID = vmd.util.guid();\n    var workspace_name = '我的工区';\n\n    vmd.workspace.workflowIp = \"\";\n    vmd.workspace.dataServiceIp = \"\";\n\n    var is_active = 0;\n    var dateTime = new Date();\n    // var dateTime = new Date().getTime();\n    var dateTimeTmp = Ext.Date.dateFormat(new Date(), 'Y-m-d H:i:s')\n    // var dateTimeTmp = dateTime.getFullYear() + '-' + (parseFloat(dateTime.getMonth()) + 1) + '-' + dateTime.getDate() +\n    //     ' ' + dateTime.getHours() + ':' + dateTime.getMinutes() + ':' + dateTime.getSeconds();\n    hwDas.add(\n        \"DataServiceWorkSpace/WorkSpaceInfo/WorkSpaceInfo\", {}, {}, [{\n            'workspaceid': newID,\n            'lastid': \"\",\n            'workspacename': workspace_name,\n            'isactive': 1,\n            'modifydate': dateTimeTmp,\n            'createddate': dateTimeTmp,\n            'aliasid': vmd.util.guid(),\n            'aliaslongname': workspace_name,\n            'aliasshortname': workspace_name,\n            'remark': workspace_name\n        }],\n        function(result) {\n            vmd.workspace.workspaceid = newID;\n            setDefaultWorkSpace(newID);\n        },\n        function(msg) {\n            Tips.tips(\"添加工区信息失败！\", \"error\");\n        }\n    );\n}\n\nfunction updateMenuWorkSpaceList() {\n    hwMenuWorkSpaceList.removeAll();\n    hwDas.get(\n        \"DataServiceWorkSpace/WorkSpaceInfo/WorkSpaceUserQuery\", {}, {\n            'loginname': Ext.util.Cookies.get('hwLogin')\n        },\n        function(result) {\n            // 根据获取的数据赋值基本信息Tab页\n            if(null == result || undefined == result) {\n                return;\n            }\n            if(null != result.data && undefined != result.data) {\n                if(result.data.length > 0) {\n                    if(null != result.data[0].datas && undefined != result.data[0].datas) {\n                        if(result.data[0].datas.length > 0) {\n                            console.log(result.data[0].datas)\n                            var isActive = false;\n                            for(var i = 0; i < result.data[0].datas.length; i++) {\n                                if(result.data[0].datas[i].active_ind == 1) {\n                                    isActive = true;\n                                    hwvarWorkSpaceId.setValue(result.data[0].datas[i].workspace_id);\n                                    btnWorkSpaceManagement.workspaceId = result.data[0].datas[i].workspace_id;\n                                    btnWorkSpaceName.setText(result.data[0].datas[i].name);\n                                    btnWorkSpaceName.workspaceId = result.data[0].datas[i].workspace_id;\n                                    // getProject(hwvarWorkSpaceId.getValue());\n                                    lastWorkId = result.data[0].datas[i].workspace_id;\n                                    var itemMenu = new Ext.menu.CheckItem({\n                                        id: result.data[0].datas[i].workspace_id,\n                                        text: result.data[0].datas[i].name,\n                                        iconCls: \"server-list\",\n                                        group: 'name',\n                                        checked: true\n                                    })\n                                } else {\n                                    var itemMenu = new Ext.menu.CheckItem({\n                                        id: result.data[0].datas[i].workspace_id,\n                                        text: result.data[0].datas[i].name,\n                                        iconCls: \"server-list\",\n                                        group: 'name',\n                                        checked: false\n                                    })\n                                }\n                                hwMenuWorkSpaceList.addMenuItem(itemMenu);\n                            }\n                            // 如果没有活动工区，就设置第一个为活动工区\n                            if(!isActive) {\n                                hwvarWorkSpaceId.setValue(result.data[0].datas[0].workspace_id);\n                                btnWorkSpaceManagement.workspaceId = result.data[0].datas[0].workspace_id;\n                                btnWorkSpaceName.setText(result.data[0].datas[0].name);\n                                btnWorkSpaceName.workspaceId = result.data[0].datas[0].workspace_id;\n                                // getProject(hwvarWorkSpaceId.getValue());\n                            }\n                        }\n                    }\n                } else {\n                    // 当前用户无工区则新建工区\n                    var newID = vmd.util.guid();\n                    var workspace_name = '我的工区';\n\n                    vmd.workspace.workflowIp = \"\";\n                    vmd.workspace.dataServiceIp = \"\";\n\n                    var is_active = 0;\n                    var dateTime = new Date();\n                    // var dateTime = new Date().getTime();\n                    var dateTimeTmp = Ext.Date.dateFormat(new Date(), 'Y-m-d H:i:s')\n                    // var dateTimeTmp = dateTime.getFullYear() + '-' + (parseFloat(dateTime.getMonth()) + 1) + '-' + dateTime.getDate() +\n                    //     ' ' + dateTime.getHours() + ':' + dateTime.getMinutes() + ':' + dateTime.getSeconds();\n                    hwDas.add(\n                        \"DataServiceWorkSpace/WorkSpaceInfo/WorkSpaceInfo\", {}, {}, [{\n                            'workspaceid': newID,\n                            'lastid': \"\",\n                            'workspacename': workspace_name,\n                            'isactive': 1,\n                            'modifydate': dateTimeTmp,\n                            'createddate': dateTimeTmp,\n                            'aliasid': vmd.util.guid(),\n                            'aliaslongname': workspace_name,\n                            'aliasshortname': workspace_name,\n                            'remark': workspace_name\n                        }],\n                        function(result) {\n                            vmd.workspace.workspaceid = newID;\n                            setDefaultWorkSpace(newID);\n                        },\n                        function(msg) {\n                            Tips.tips(\"添加工区信息失败！\", \"error\");\n                        }\n                    );\n                }\n            }\n        },\n        function(msg) {\n            Tips.tips(\"查询工区信息失败！\", \"error\");\n        });\n}\n\nfunction setDefaultWorkSpace(newID) {\n    btnWorkSpaceManagement.workspaceId = newID;\n    btnWorkSpaceName.setText('我的工区');\n    btnWorkSpaceName.workspaceId = newID;\n    hwvarWorkSpaceId.setValue(newID);\n\n\n    hwproject_id.setValue('');\n    btnProjectName.setText('请添加项目');\n    btnProjectName.projectId = '';\n    ListBtn.onDisable();\n    btnProjectName.onDisable();\n    changeData();\n    // Ext.Msg.alert(\"提示\", \"获取工区数据失败！\");\n}\n// 显示当前登陆人工区列表\nfunction btnWorkSpaceManagement_click(sender, e) {\n    var formWorkSpaceManage = new vmd.window({\n        title: \"工区管理\",\n        url: vmd.core.getVirtualPath() + \"/modules/eQ9ULgcVb1/hwipUwNjJb/hw4361c4dd.html\",\n        auto: false,\n        height: 520,\n        width: 860,\n        maximizable: false,\n        enableLoading: true,\n        resizable: false,\n        params: {\n            workspaceid: btnWorkSpaceName.workspaceId,\n            workflowaddr: vmd.workspace.workflowIp,\n            dataserviceaddr: vmd.workspace.dataServiceIp,\n            r: new Date().getTime()\n        }\n    })\n\n    formWorkSpaceManage.show();\n    window.formWorkSpaceManage = formWorkSpaceManage;\n    window.initMenuWorkSpaceList = initMenuWorkSpaceList;\n    window.updateMenuWorkSpaceList = updateMenuWorkSpaceList;\n    window.reloadWorkflowCategory = reloadWorkflowCategory;\n    window.reloadDataServiceCategory = reloadDataServiceCategory;\n    if(parent) {\n        parent.formWorkSpaceManage = formWorkSpaceManage;\n        parent.initMenuWorkSpaceList = initMenuWorkSpaceList;\n        parent.updateMenuWorkSpaceList = updateMenuWorkSpaceList;\n        parent.reloadWorkflowCategory = reloadWorkflowCategory;\n        parent.reloadDataServiceCategory = reloadDataServiceCategory;\n    }\n\n}\n\n// 工区切换\nfunction hwMenuWorkSpaceList_click(sender, menuItem, e) {\n    var itemId = menuItem.id;\n    var itemText = menuItem.text;\n    // 更改活动工区状态\n    hwDas.edit(\n        \"DataServiceWorkSpace/WorkSpaceInfo/changeActive\", {}, {}, [{\n            'lastworkid': lastWorkId,\n            'workid': itemId\n        }],\n        function(result) {},\n        function(msg) {\n            Tips.tips(\"工区状态更改失败！\", \"error\");\n        }\n    );\n    vmd.core.getWorkSpaceServer(itemId);\n    hwvarWorkSpaceId.setValue(itemId);\n    btnWorkSpaceManagement.workspaceId = itemId;\n    btnWorkSpaceName.setText(itemText);\n    btnWorkSpaceName.workspaceId = itemId;\n    getProject(hwvarWorkSpaceId.getValue());\n    lastWorkId = itemId;\n}\n\n// // 获取工区中配置的工作流服务地址\n// function getWorkflowAddress(wsId) {\n\n//     vmd.workspace.workspaceid = wsId;\n//     vmd.workspace.workflowIp = \"\";\n//     hwDas.get(\n//         \"DataServiceWorkSpace/WorkSpaceInfo/ServiceAddress\", {}, {\n//             \"workspaceid\": workspaceId,\n//             \"servicetype\": 3\n//         },\n//         function(result) {\n//             // 根据获取的数据赋值基本信息Tab页\n//             if(null === result && undefined === result) {\n//                 return;\n//             }\n\n//             if(null != result.data && undefined != result.data) {\n//                 if(result.data.length > 0) {\n//                     if(null != result.data[0].datas && undefined != result.data[0].datas) {\n//                         if(result.data[0].datas.length > 0) {\n//                             vmd.workspace.workflowIp = result.data[0].datas[0].address;\n//                         }\n//                     }\n//                 }\n//             }\n//         },\n//         function(msg) {\n//             // Ext.Msg.alert(\"提示\", \"查询工区信息失败！\");\n//         });\n// }\n\n// // 获取工区中配置的数据服务地址\n// function getDataServiceAddress(wsId) {\n\n//     vmd.workspace.workspaceid = wsId;\n//     vmd.workspace.dataServiceIp = \"\";\n//     hwDas.get(\n//         \"DataServiceWorkSpace/WorkSpaceInfo/ServiceAddress\", {}, {\n//             \"workspaceid\": workspaceId,\n//             \"servicetype\": 4\n//         },\n//         function(result) {\n//             // 根据获取的数据赋值基本信息Tab页\n//             if(null === result && undefined === result) {\n//                 return;\n//             }\n\n//             if(null != result.data && undefined != result.data) {\n//                 if(result.data.length > 0) {\n//                     if(null != result.data[0].datas && undefined != result.data[0].datas) {\n//                         if(result.data[0].datas.length > 0) {\n//                             vmd.workspace.dataServiceIp = result.data[0].datas[0].address;\n//                         }\n//                     }\n//                 }\n//             }\n//             panelTabDataService.ifDataLoaded = true;\n//         },\n//         function(msg) {\n//             // Ext.Msg.alert(\"提示\", \"查询工区信息失败！\");\n//         });\n// }\n\n// 工区管理\nfunction hwMenuWorkSpace_click(sender, menuItem, e) {\n    var itemId = menuItem.id;\n    var itemAddProject = itemId.indexOf(\"hwMenuItemAddProject\"); // 基于0开始,找不到返回-1\n    var itemConfig = itemId.indexOf(\"hwMenuItemWorkSpaceConfig\"); // 基于0开始,找不到返回-1\n    var itemNewProject = itemId.indexOf(\"hwMenuItemNewProject\"); // 基于0开始,找不到返回-1\n\n    // 基本信息\n    if(itemAddProject > -1) {\n        onMenuItemAddProject();\n    } else if(itemConfig > -1) {\n        onMenuItemWorkSpaceConfig();\n    } else if(itemNewProject > -1) {\n        onMenuItemNewProject();\n    }\n}\n// 添加项目\nfunction onMenuItemAddProject() {\n    window.getProject = getProject;\n    var formAddProject = new parent.vmd.window({\n        title: btnWorkSpaceName.text + \" - 项目添加\",\n        //url: vmd.core.getVirtualPath() + \"/modules/eQ9ULgcVb1/hwipUwNjJb/hwzIqDcsGS.html\",\n        url: vmd.core.getVirtualPath() + \"/modules/eQ9ULgcVb1/hwipUwNjJb/hwRSvMOuk9.html\",\n        auto: false,\n        height: 505,\n        width: 890,\n        // height: 506,\n        // width: 880,\n        maximizable: false,\n        enableLoading: true,\n        resizable: true,\n        params: {\n            workspaceid: btnWorkSpaceName.workspaceId,\n            r: new Date().getTime()\n        }\n    })\n\n    formAddProject.show();\n    window.formAddProject = formAddProject;\n    window.getProject = getProject;\n    if(parent) {\n        parent.formAddProject = formAddProject;\n        parent.getProject = getProject;\n    }\n}\n\n// function addProjectTree() {\n//     treeProjects.store.toRefresh(); // 刷新项目树\n// }\n// 工区配置\nfunction onMenuItemWorkSpaceConfig() {\n    window.btnWorkSpaceName = btnWorkSpaceName;\n    var formWorkSpaceConfig = new vmd.window({\n        title: btnWorkSpaceName.getText() + \"参数配置\",\n        url: vmd.core.getVirtualPath() + \"/modules/eQ9ULgcVb1/hwipUwNjJb/hw56e34140.html\",\n        auto: false,\n        height: 510,\n        width: 626,\n        maximizable: false,\n        enableLoading: true,\n        resizable: false,\n        params: {\n            workspaceid: btnWorkSpaceName.workspaceId,\n            r: new Date().getTime()\n        }\n    })\n    window.formWorkSpaceConfig = formWorkSpaceConfig;\n    window.initMenuWorkSpaceList = initMenuWorkSpaceList;\n    window.updateMenuWorkSpaceList = updateMenuWorkSpaceList;\n    window.reloadWorkflowCategory = reloadWorkflowCategory;\n    window.reloadDataServiceCategory = reloadDataServiceCategory;\n    if(parent) {\n        parent.formWorkSpaceConfig = formWorkSpaceConfig;\n        parent.btnWorkSpaceName = btnWorkSpaceName;\n        parent.initMenuWorkSpaceList = initMenuWorkSpaceList;\n        parent.updateMenuWorkSpaceList = updateMenuWorkSpaceList;\n        parent.reloadWorkflowCategory = reloadWorkflowCategory;\n        parent.reloadDataServiceCategory = reloadDataServiceCategory;\n    }\n\n    formWorkSpaceConfig.show();\n\n}\n\n// 新建项目\nfunction onMenuItemNewProject() {\n    var formNewProject = new vmd.window({\n        title: \"新建项目\",\n        url: vmd.core.getVirtualPath() + \"/modules/eQ9ULgcVb1/hwipUwNjJb/hwf9cbd384.html\",\n        auto: false,\n        height: 590,\n        width: 878,\n        maximizable: false,\n        enableLoading: true,\n        resizable: false,\n        params: {\n            workspaceid: btnWorkSpaceName.workspaceId,\n            r: new Date().getTime()\n        }\n    })\n\n    formNewProject.show();\n    window.formNewProject = formNewProject;\n    window.getProject = getProject;\n    if(parent) {\n        parent.formNewProject = formNewProject;\n        parent.getProject = getProject;\n    }\n}\n// 项目配置\nfunction ListBtn_click(sender, e) {\n    hwMenuProjectConfig.showAt(e.xy);\n}\n\nfunction opencProjectConfig() {\n    if(btnProjectName.projectId == '') {\n        return;\n    }\n    // var nodeSel = btnProjectName.projectId;\n    window.getProject = getProject;\n    var formProConfig = new vmd.window({\n        title: btnProjectName.getText() + \"配置\",\n        url: vmd.core.getVirtualPath() + \"/modules/eQ9ULgcVb1/hwipUwNjJb/hw9299ec24.html\",\n        auto: false,\n        height: 510,\n        width: 626,\n        maximizable: false,\n        enableLoading: true,\n        resizable: false,\n        params: {\n            workId: btnWorkSpaceName.workspaceId,\n            id: btnProjectName.projectId,\n            r: new Date().getTime()\n        }\n    })\n\n    formProConfig.show();\n    window.formProConfig = formProConfig;\n    window.reloadWorkflowCategory = reloadWorkflowCategory;\n    window.reloadDataServiceCategory = reloadDataServiceCategory;\n    if(parent) {\n        parent.formProConfig = formProConfig;\n        parent.btnProjectName = btnProjectName;\n        parent.getProject = getProject;\n        parent.reloadWorkflowCategory = reloadWorkflowCategory;\n        parent.reloadDataServiceCategory = reloadDataServiceCategory;\n        // parent.getWorkflowCategory = getWorkflowCategory;\n        // parent.getDataServiceCategory = getDataServiceCategory;\n    }\n    // if(btnProjectName.projectId == '') {\n    //     Ext.Msg.alert(\"提示\", \"暂无项目可编辑！\");\n    //     return\n    // }\n    // var btnLeft = sender.el.getRegion().left;\n    // var btnTop = sender.el.getRegion().top;\n    // var btnHeight = sender.getHeight() / 1.2;\n    // hwMenuProject.showAt([btnLeft, btnTop + btnHeight]);\n    // // hwMenuProject.showAt(e.xy);\n}\n// 操作项目\nfunction hwMenuProject_click(sender, menuItem, e) {\n    var itemId = menuItem.id;\n    var itemConfig = itemId.indexOf(\"hwMenuItemProjectConfig\"); // 基于0开始,找不到返回-1\n    // var itemCopy = itemId.indexOf(\"hwMenuItemProjectCopy\"); // 基于0开始,找不到返回-1\n    var itemDel = itemId.indexOf(\"hwMenuItemProjectDel\"); // 基于0开始,找不到返回-1\n    var itemFord = itemId.indexOf(\"ProjectNewFord\");\n    var itemMode = itemId.indexOf(\"ProjectNewMode\");\n\n    // 基本信息\n    if(itemConfig > -1) {\n        onMenuItemProjectConfig();\n    } else if(itemDel > -1) {\n        onMenuItemProjectDel();\n    } else if(itemFord > -1) {\n        creatProjectFord()\n    } else if(itemMode > -1) {\n        hwTree.newnode = true;\n        divJcxx.hide();\n        ModuleInfo.show();\n        WorkflowModuleInfo.hide();\n        DataServiceModuleInfo.hide();\n        ModuleInfo.refresh(hwTree, btnProjectName.projectId, btnWorkSpaceName.workspaceId);\n\n        // hwTree.newnode = true;\n        // // document.getElementById(\"iframe_page\").src = vmd.virtualPath + '/modules/eQ9ULgcVb1/eQ9ULgcVb5/hwa99a3307.html';\n        // document.getElementById(\"iframe_page\").src = vmd.virtualPath + '/modules/eQ9ULgcVb1/hwipUwNjJb/hwSthqiIpx.html';\n    }\n}\n\n// 删除项目\nfunction onMenuItemProjectDel() {\n\n    Ext.Msg.confirm(\"提示\", \"确认要从工区中删除该项目？\", function(type) {\n        if(type == \"yes\") {\n\n            var nodeSel = btnProjectName.projectId;\n            if(null == nodeSel || undefined == nodeSel) {\n                Ext.Msg.alert(\"提示\", \"请选择要删除的节点！\");\n                return;\n            }\n\n            hwDas.del(\n                \"DataServiceWorkSpace/WorkSpaceInfo/WorkSpaceProject\", {}, {\n                    'workspaceid': btnWorkSpaceName.workspaceId,\n                    'projectid': nodeSel\n                },\n                function(result) {\n                    Tips.tips(\"删除成功！\", \"success\");\n                    // Ext.Msg.alert(\"提示\", \"删除资源目录成功！\");\n                },\n                function(msg) {\n                    Tips.tips(\"删除失败！\", \"error\");\n                    // Ext.Msg.alert(\"提示\", \"删除项目失败！\");\n                }\n            );\n\n        }\n    });\n}\n\n\n// 新建项目分类\nfunction creatProjectFord() {\n    var addford = function(fordname, callback) {\n        var mytree = hwTree;\n        var selId = btnProjectName.projectId;\n        // var selnode = mytree.itemObj[selId];\n        var selnodepath = \"/\" + selId;\n        var parentId;\n        var projectId;\n        var nodename = fordname;\n        var newnodeid = newGuid(10);\n        var newcode = newGuid(10);\n        var xh = 10;\n        parentId = \"0\";\n        projectId = selId;\n        myMask = new Ext.LoadMask(Ext.getBody(), {\n            msg: \"加载中,请稍后...\"\n        });\n        myMask.show();\n\n        // 判断同一目录下是否存在相同名称分类\n        checkfordReName(projectId, parentId, newnodeid, nodename, function() {\n            if(callback) {\n                callback()\n            }\n            hwDas.ajax({\n                das: {\n                    idedas: true\n                },\n                url: \"CDEServcie/module/category\",\n                type: 'post',\n                contentType: 'application/json;charset=UTF-8',\n                timeout: 5000,\n                params: {\n                    parent_id: parentId,\n                    name: nodename,\n                    code: newcode,\n                    project_id: projectId,\n                    id: newnodeid,\n                    xh: xh\n                },\n                datas: [{\n                    parent_id: parentId,\n                    name: nodename,\n                    code: newcode,\n                    project_id: projectId,\n                    id: newnodeid,\n                    xh: xh\n                }],\n                success: function(result) {\n                    mytree.insertNewChild(0, newnodeid, nodename);\n                    mytree.setItemImage2(newnodeid, \"tree/folderClosed.gif\", \"tree/folderOpen.gif\", \"tree/folderClosed.gif\")\n                    var treenode = mytree.item(newnodeid);\n                    treenode.path = selnodepath + \"/\" + newnodeid;\n                    treenode.projectId = projectId;\n                    treenode.loadChild = true;\n                    if(treenode) {\n                        treenode.isFord = true;\n                    }\n                    mytree.itemObj[newnodeid] = treenode;\n                    myMask.hide();\n                    getQueryData();\n                },\n                error: function(msg) {\n                    myMask.hide();\n                    Ext.Msg.alert(\"提示\", \"新建目录失败\")\n                }\n            })\n        })\n    }\n\n    var fordname = new Ext.MyFordWin(addford, '');\n    fordname.show();\n}\n// 弹出工区列表\nfunction btnMenu1_click(sender, e) {\n    var btnLeft = sender.el.getRegion().left;\n    var btnTop = sender.el.getRegion().top;\n    var btnHeight = sender.getHeight() / 1.2;\n    hwMenuWorkSpace.showAt([btnLeft, btnTop + btnHeight]);\n}\n// 获取项目列表\nfunction btnWorkSpaceName_click(sender, e) {\n    var btnLeft = sender.el.getRegion().left;\n    var btnTop = sender.el.getRegion().top;\n    var btnHeight = sender.getHeight() / 1.5;\n    if(hwMenuWorkSpaceList.items.length > 0) {\n        hwMenuWorkSpaceList.showAt([btnLeft, btnTop + btnHeight]);\n    }\n}\n//项目切换\nfunction hwMenuProjectList_click(sender, menuItem, e) {\n    var itemId = menuItem.id;\n    var itemText = menuItem.text;\n    hwDas.edit(\n        'DataServiceWorkSpace/projectInfo/changeprojectind', {}, {\n            'workspece_id': btnWorkSpaceName.workspaceId,\n            'project_id': menuItem.id\n        }, [{\n            'workspece_id': btnWorkSpaceName.workspaceId,\n            'project_id': menuItem.id\n        }],\n        function(result) {},\n        function(msg) {}\n    );\n    hwproject_id.setValue(itemId);\n\n    btnProjectName.setText(itemText);\n    btnProjectName.projectId = itemId;\n    //成兵 20180911 设置并获取该项目的环境变量\n    vmd.core.getEnvVariables(btnProjectName.projectId)\n\n    changeData();\n\n    if(ifWorkflowLoaded) {\n        // 清空树原有的默认数据\n        hwTreeWorkFlow.deleteChildItems(0);\n        getWorkflowCategory();\n    }\n\n    if(ifDataServiceLoaded) {\n        // 清空树原有的默认数据\n        hwTreeDataService.deleteChildItems(0);\n        getDataServiceCategory();\n    }\n\n    divJcxx.show();\n    ModuleInfo.hide()\n    WorkflowModuleInfo.hide();\n    DataServiceModuleInfo.hide();\n    // 右侧显示初始页面\n    document.getElementById(\"iframe_page\").src = vmd.virtualPath + '/modules/eQ9ULgcVb1/eQ9ULgcVb5/hw03cb4931.html';\n    //MyP_jcxx.body.update(\"<\" + \"iframe \" + \" src='/modules/eQ9ULgcVb1/eQ9ULgcVb5/hw03cb4931.html' \" + \" width=100% height=100% frameborder=0  \" + \">\" + \"sdsds\" + \"<\" + \"/\" + \"iframe\" + \">\");\n    // projectId = selnode.projectId;\n    lastnodeType = \"1\";\n}\n// 获取项目列表\nfunction getProject(id) {\n    hwMenuProjectList.removeAll();\n\n    hwproject_id.setValue('');\n    btnProjectName.setText('');\n    btnProjectName.projectId = '';\n\n    hwDas.get('DataServiceWorkSpace/WorkSpaceInfo/WorkSpaceProject', {}, {\n            workspaceid: id\n        },\n        function(result) {\n            if(result.data.length > 0) {\n                if(null != result.data[0].datas && undefined != result.data[0].datas) {\n                    if(result.data[0].datas.length > 0) {\n                        var isActive = false;\n                        for(var i = 0; i < result.data[0].datas.length; i++) {\n                            if(result.data[0].datas[i].active_ind == 1) {\n                                isActive = true;\n                                var itemMenu = new Ext.menu.CheckItem({\n                                    id: result.data[0].datas[i].project_id,\n                                    text: result.data[0].datas[i].project_name,\n                                    iconCls: \"server-list\",\n                                    group: 'name of group',\n                                    checked: true\n                                })\n                                hwproject_id.setValue(result.data[0].datas[i].project_id);\n                                btnProjectName.setText(result.data[0].datas[i].project_name);\n                                btnProjectName.projectId = result.data[0].datas[i].project_id;\n                                ListBtn.onEnable();\n                                btnProjectName.onEnable();\n                            } else {\n                                var itemMenu = new Ext.menu.CheckItem({\n                                    id: result.data[0].datas[i].project_id,\n                                    text: result.data[0].datas[i].project_name,\n                                    iconCls: \"server-list\",\n                                    group: 'name of group',\n                                    checked: false\n                                })\n                            }\n                            hwMenuProjectList.addMenuItem(itemMenu);\n                        }\n                        if(!isActive) {\n                            hwproject_id.setValue(result.data[0].datas[0].project_id);\n                            btnProjectName.setText(result.data[0].datas[0].project_name);\n                            btnProjectName.projectId = result.data[0].datas[0].project_id;\n                            ListBtn.onEnable();\n                            btnProjectName.onEnable();\n                        }\n                        changeData();\n                        //成兵 20180911 设置并获取该项目的环境变量\n                        vmd.core.getEnvVariables(btnProjectName.projectId)\n                        // 重新加载工作流和数据服务\n                        reloadWorkflowCategory();\n                        reloadDataServiceCategory();\n                    } else {\n                        hwproject_id.setValue('');\n                        btnProjectName.setText('请添加项目');\n                        btnProjectName.projectId = '';\n                        ListBtn.onDisable();\n                        btnProjectName.onDisable();\n                        changeData();\n\n                        // 重新加载工作流和数据服务\n                        reloadWorkflowCategory();\n                        reloadDataServiceCategory();\n                    }\n                }\n            }\n        },\n        function(msg) {\n            Ext.Msg.alert(\"提示\", \"获取项目信息失败\");\n        }\n    );\n}\n// 弹出项目列表\nfunction btnProjectName_click(sender, e) {\n    if(btnProjectName.projectId == '') {\n        return;\n    }\n    var btnLeft = sender.el.getRegion().left + 5;\n    var btnTop = sender.el.getRegion().top;\n    var btnHeight = sender.getHeight() / 1.2;\n    hwMenuProjectList.showAt([btnLeft, btnTop + btnHeight]);\n}\n\nfunction MyTabs_tabchange(sender, tab) {\n    // var tabId = tab.id;\n\n    // // 基本信息\n    // if(tabId == \"panel\") { // 模块\n    // } else if(tabId == \"panel1\") { // 工作流\n    //     if(!ifWorkflowLoaded) {\n    //         getWorkflowCategory();\n    //     }\n    // } else if(tabId == \"panel2\") { // 数据服务\n    //     if(!ifDataServiceLoaded) {\n    //         // getDataServiceCategory();\n    //         ifDataServiceLoaded = true;\n    //     }\n    // }\n}\n\n// 判断同一节点下是否存在相同名称的模块\nfunction checkModuleReName(projectId, pId, name, callback) {\n    var isRep = false;\n    hwDas.ajax({\n        das: {\n            idedas: true\n        },\n        url: \"CDEServcie/module/info\",\n        type: 'get',\n        timeout: 5000,\n        params: {\n            category_id: pId,\n            project_id: projectId\n        },\n        success: function(result) {\n            var datajson = result.data[0].datas;\n            for(var i = 0; i < datajson.length; i++) {\n                if(datajson[i].name == name) {\n                    isRep = true;\n                    break\n                }\n            }\n            if(isRep) {\n                myMask.hide();\n                Ext.Msg.alert('提示', '此模版名称已存在');\n            } else {\n                callback()\n            }\n        },\n        error: function(msg) {\n            myMask.hide();\n            Ext.Msg.alert(\"提示\", \"获取模块信息失败\")\n        }\n    })\n}\n// 判断同一节点下是否存在相同名称的分类\nfunction checkfordReName(projectId, pId, id, name, callback) {\n    var isRep = false;\n    hwDas.ajax({\n        das: {\n            idedas: true\n        },\n        url: \"CDEServcie/module/category\",\n        type: 'get',\n        timeout: 5000,\n        params: {\n            project_id: projectId,\n            parent_id: pId\n        },\n        success: function(result) {\n            var datajson = result.data[0].datas;\n            for(var i = 0; i < datajson.length; i++) {\n                if(name == datajson[i].name && datajson[i].id != id) {\n                    isRep = true;\n                    break;\n                }\n            }\n            if(isRep) {\n                myMask.hide();\n                Ext.Msg.alert('提示', '此分类名称已存在');\n            } else {\n                callback()\n            }\n        },\n        error: function(msg) {\n            myMask.hide();\n            Ext.Msg.alert(\"提示\", \"获取分类信息失败\")\n        }\n    })\n}\n// 判断同一节点下是否存在相同名称的工作流分类\nfunction checkFlowfordReName(nodeParentId, id, name, callback) {\n    var isRep = false;\n    var info = \"kermit\";\n    var urlService = ''\n    if(nodeParentId == '0') {\n        urlService = \"http://\" + (vmd.workspace.workflowIp || vmdSettings.workflowIp) + \"/activiti-rest/service/repository/categorys/root?info=kermit\"\n    } else {\n        urlService = \"http://\" + (vmd.workspace.workflowIp || vmdSettings.workflowIp) + \"/activiti-rest/service/repository/categorys/\" + nodeParentId + \"/members?info=\" + info;\n    }\n    // 获取根节点下的文件夹节点信息\n    hwDas.ajax({\n        url: urlService,\n        type: 'get',\n        timeout: 10000,\n        params: {},\n        success: function(result) {\n            for(var i = 0; i < result.data.length; i++) {\n                if(result.data[i].name == name && result.data[i].id != id) {\n                    isRep = true;\n                    break;\n                };\n            }\n            if(isRep) {\n                myMask.hide();\n                Ext.Msg.alert('提示', '此分类名称已存在');\n            } else {\n                callback()\n            }\n        },\n        error: function(msg) {\n            myMask.hide();\n            Ext.Msg.alert(\"提示\", \"获取分类节点信息失败\", function() {})\n        }\n    })\n}\n// 判断同一节点下是否存在相同名称的工作流模块\nfunction CheckFlowMoudlRename(ParentId, id, name, callback) {\n    var isRep = false;\n    var info = \"kermit\";\n    urlService = \"http://\" + (vmd.workspace.workflowIp || vmdSettings.workflowIp) + \"/activiti-rest/service/repository/hwmodels?categoryId=\" + ParentId + \"&info=\" + info;\n    // 获取根节点下的文件夹节点信息\n    hwDas.ajax({\n        url: urlService,\n        type: 'get',\n        timeout: 10000,\n        params: {},\n        success: function(result) {\n            for(var j = 0; j < result.data.length; j++) {\n                for(var i = 0; i < result.data[j].datas.length; i++) {\n                    if(result.data[j].datas[i].NAME == name && result.data[j].datas[i].ID != id) {\n                        isRep = true;\n                        break\n                    }\n                }\n            }\n            if(isRep) {\n                myMask.hide();\n                Ext.Msg.alert('提示', '此分类名称已存在');\n            } else {\n                callback()\n            }\n        },\n        error: function(msg) {\n            myMask.hide();\n            Ext.Msg.alert(\"提示\", \"获取分类节点信息失败\", function() {})\n        }\n    })\n}\n\n\nfunction hwTreeWorkFlow_beforerender(sender) {\n    // ifWorkflowLoaded = false;\n}\n\nfunction hwTreeDataService_beforerender(sender) {\n    // ifDataServiceLoaded = false;\n}\n\nfunction hwTree_beforerender(sender) {}\n\nfunction btn_uxcom_click(sender, e) {\n    window.open(vmd.virtualPath + '/modules/eQ9ULgcVb1/hw61499a5d/hwvl41einK.html', \"复合组件管理\");\n    // window.open(vmd.virtualPath + '/modules/eQ9ULgcVb1/hw61499a5d/hw86c61c8b.html', \"复合组件管理\");\n}\n\nfunction projectInfo_click(sender, e) {\n    opencProjectConfig()\n}\n\nfunction btnPro_click(sender, e) {\n    hwMenuProMange.showAt(e.xy)\n}\n\nfunction newProject_click(sender, e) {\n    onMenuItemNewProject();\n}\n\nfunction RegInfo_click(sender, e) {\n    var formRegInfo = new vmd.window({\n        title: \"注册信息配置\",\n        url: vmd.core.getVirtualPath() + \"/modules/eQ9ULgcVb1/eQ9ULgcVb5/hwd3771cbe.html\",\n        auto: false,\n        height: 650,\n        width: 600,\n        maximizable: false,\n        enableLoading: true,\n        resizable: false,\n        params: {\n            id: btnProjectName.projectId,\n            r: new Date().getTime()\n        }\n    })\n    formRegInfo.show();\n}\n\nfunction varsInfo_click(sender, e) {\n    var formVarInfo = new vmd.window({\n        title: \"环境变量\",\n        url: vmd.core.getVirtualPath() + \"/modules/eQ9ULgcVb1/eQ9ULgcVb5/hw0141d302.html\",\n        auto: false,\n        height: 650,\n        width: 600,\n        maximizable: false,\n        enableLoading: true,\n        resizable: false,\n        params: {\n            id: btnProjectName.projectId,\n            r: new Date().getTime()\n        }\n    })\n\n    formVarInfo.show();\n    window.formVarInfo = formVarInfo;\n}\n\n//成兵 20180911 设置并获取该项目的环境变量\nfunction reLoadEnvar() {\n    vmd.core.getEnvVariables(btnProjectName.projectId)\n}\nwindow.reLoadEnvar = reLoadEnvar;\n\n// 模块检索\nfunction mCombo_afterrender(sender) {\n    store.loadData(selectData);\n    mCombo.displayField = 'name';\n    mCombo.valueField = 'id';\n}\n\n// 获取项目下所有分类及模块信息\nfunction getQueryData() {\n    hwDas.get(\"CDEServcie/module/xmmk\", {}, {\n            'project_id': hwproject_id.getValue()\n        },\n        function(result) {\n            selectData = result.data[0].datas;\n            cateData = result.data[1].datas\n            store.loadData(selectData);\n            mCombo.bindStore(store)\n            mCombo.setValue('');\n        },\n        function(msg) {}\n    );\n}\n\n// 查找被检索界面的所有父级分类，并按顺序放到数组中\nfunction queryParen(arr, cId) {\n    var pid;\n    for(var i = 0; i < cateData.length; i++) {\n        if(cateData[i].id == cId) {\n            pid = cateData[i].parent_id;\n        }\n    }\n    if(pid != '0') {\n        arr.unshift(pid);\n        queryParen(arr, pid)\n    }\n}\n// 递归函数从祖父级开始逐层展开节点\nfunction diGuiopen(arr, m, seleId) {\n    if(m >= arr.length) {\n        return\n    }\n    if(m == arr.length - 1) {\n        // var isLoad = hwTree.itemObj[arr[m]].loadChild;\n        if(hwTree.itemObj[arr[m]] && hwTree.itemObj[arr[m]].loadChild == true) {\n            hwTree.openItem(arr[m])\n            hwTree.selectItem(seleId, true, false);\n        } else {\n            OpenNOde(arr[m], function() {\n                hwTree.selectItem(seleId, true, false);\n            })\n        }\n    } else {\n        // var isLoad = hwTree.itemObj[arr[m]].loadChild;\n        if(hwTree.itemObj[arr[m]] && hwTree.itemObj[arr[m]].loadChild == true) {\n            hwTree.openItem(arr[m])\n            m++;\n            diGuiopen(arr, m, seleId)\n        } else {\n            OpenNOde(arr[m], function() {\n                m++;\n                diGuiopen(arr, m, seleId)\n            })\n        }\n    }\n}\n\nfunction mCombo_selectChanged(sender, combo, record, index) {\n    var id = record.data.id;\n    if(id == '' || id == null) {\n        return\n    }\n    hwTree.closeAllItems()\n    var cataId, pidArr = [],\n        k = 0;\n    for(var i = 0; i < selectData.length; i++) {\n        if(selectData[i].id == id) {\n            cataId = selectData[i].category_id;\n            break\n        }\n    }\n    if(cataId == '0') {\n        hwTree.selectItem(combo, true, false);\n        return\n    }\n    pidArr.push(cataId);\n    queryParen(pidArr, cataId)\n    diGuiopen(pidArr, k, id)\n}\n\nfunction MyP_Htool_afterrender(sender) {\n\n    MyP_Htool.el.dom.setAttribute(\"data-step\", \"1\");\n    MyP_Htool.el.dom.setAttribute(\"data-intro\", \"vmd2.0 功能，支持项目管理、资源管理、复合组件管理等；\");\n    MyP_Htool.el.dom.setAttribute(\"data-position\", \"left\");\n}\n\nfunction MyPanel2_afterrender(sender) {\n    MyPanel2.el.dom.setAttribute(\"data-step\", \"3\");\n    MyPanel2.el.dom.setAttribute(\"data-intro\", \"对应工区下的所有项目列表，并可以对项目进行发布信息、环境变量、数据服务等信息的配置\");\n    MyPanel2.el.dom.setAttribute(\"data-position\", \"right\");\n}\n\nfunction panel6_afterrender(sender) {\n    panel6.el.dom.setAttribute(\"data-step\", \"2\");\n    panel6.el.dom.setAttribute(\"data-intro\", \"支持按工区进行项目管理，可将数据服务、工作流等资源相同的项目进行统一管理；\");\n    panel6.el.dom.setAttribute(\"data-position\", \"right\");\n}\n\nfunction panel5_afterrender(sender) {\n    panel5.el.dom.setAttribute(\"data-step\", \"5\");\n    panel5.el.dom.setAttribute(\"data-intro\", \"模块检索，支持输入关键字对模块进行检索，并进行定位；\");\n    panel5.el.dom.setAttribute(\"data-position\", \"right\");\n}\n\nfunction MyP_jcxx_afterrender(sender) {\n    MyP_jcxx.el.dom.setAttribute(\"data-step\", \"6\");\n    MyP_jcxx.el.dom.setAttribute(\"data-intro\", \"资料及模块基本信息展示区，提供vmd学习使用资料和模块的基本信息；\");\n    MyP_jcxx.el.dom.setAttribute(\"data-position\", \"left\");\n}\n//选择导出项目 成兵\nfunction projectExp_click(sender, e) {\n    selectExpProject()\n}\n//导入模块\nfunction projectImp_click(sender, e) {\n    var uploader = Uploader.getUploader();\n    var uploaderwin = new vmd.window({\n        items: Uploader,\n        auto: false,\n        height: 500,\n        width: 655,\n        maximizable: false,\n        resizable: false,\n        closeAction: 'hide',\n        title: \"文件上传\"\n    })\n    Uploader.show()\n    uploaderwin.show();\n    uploaderwin.hide(); //上传接口\n    uploader.upload(vmdSettings.dataServiceIp, \"ExpAndImp\\\\ImpModules\", uploaderwin, function(fileList) {\n        //上传成功回调\n        var state = true;\n        var proName = \"\";\n        var proId = \"\";\n        var impPath = \"\";\n        var impUser = \"\";\n        var impDate = \"\";\n        //组织导入项目信息\n        if(fileList.length > 0) {\n            if(fileList[0].state == 'SUCCESS') {\n                state = true\n                if(fileList[0].title.split(\".\").length == 2 && fileList[0].title.split(\".\")[1] == 'zip') {\n                    var zipInfos = fileList[0].title.split(\"-\");\n                    impPath = fileList[0].url;\n                    if(zipInfos.length == 3) {\n                        proName = zipInfos[0];\n                        proId = zipInfos[1];\n                    } else {\n                        alert(\"导入的文件名不规范，请严格按照 项目名-项目id-导出用户-日期.zip 的格式\")\n                        return;\n                    }\n                } else {\n                    alert('导入标准的zip模块导出文件')\n                    return;\n                }\n            } else\n                return;\n        }\n        //判断项目是否存在\n        hwDas.get(\"DataServiceWorkSpace/projectInfo/ProjectBaseInfo\", {}, {\n            projectid: proId\n        }, function(result) {\n            if(result)\n                var datas = result.data[0].datas;\n            var creatPro = false;\n            var importSer = function() {\n                //调用服务，解压文件，并在服务器端比对数据并返回。\n                vmd.ajax({\n                    url: \"/expandimp/api/ModuleCheck\",\n                    type: 'post',\n                    timeout: 5000,\n                    //dataType:\"text\",\n                    //contentType: 'application/json;charset=UTF-8',\n                    data: {\n                        proName: proName,\n                        proId: proId,\n                        impUser: impUser,\n                        impDate: impDate,\n                        impPath: impPath,\n                        creatPro: creatPro\n                    },\n                    success: function(result) {\n                        if(result.type == \"success\") {\n                            //返回模块信息比对信息\n                            window.modulesCheckInfos = {\n                                checkInfo: result.checkInfo || [],\n                                project_id: proId,\n                                proName: proName,\n                                path: impPath,\n                                impUser: impUser,\n                                impDate: impUser,\n                                creatPro: creatPro\n                            }\n                            var modulesCheckWin = new vmd.window({\n                                title: \"导入模块对比\",\n                                url: vmd.core.getVirtualPath() + \"/modules/eQ9ULgcVb1/eQ9ULgcVb5/hwHHPbTeiO.html\",\n                                auto: false,\n                                height: 600,\n                                width: 520,\n                                maximizable: false,\n                                enableLoading: true,\n                                resizable: true,\n                                params: {\n                                    r: new Date().getTime()\n                                }\n                            })\n                            uploaderwin.hide();\n                            modulesCheckWin.show()\n                            window.modulesCheckWin = modulesCheckWin\n                        } else\n                            vmd.alert(result.msg)\n                    },\n                    error: function(msg) {}\n                })\n            }\n            if(datas.length <= 0) {\n                Ext.Msg.confirm(\"提示\", \"该环境下无\" + proName + \"项目，是否新建项目并导入。\", function(type) {\n                    if(type == \"yes\") {\n                        creatPro = true\n                        importSer();\n                    }\n                })\n            } else {\n                importSer()\n            }\n        }, function(msg) {})\n    }, \"vmd\");\n}\n\n//设置导航提示\nfunction div3_click(sender, e) {\n    introJs().setOptions({\n        nextLabel: '下一步 &rarr;',\n        prevLabel: '&larr; 上一步',\n        skipLabel: '退出',\n        doneLabel: '结束'\n    }).start();\n    LocalData.set('vmdinittips', true)\n}","vmdcss":"/*.list-list{*/\r\n/*    margin-left: 25px;*/\r\n/*    background-image: url(\"/modules/hw3ce0447e/img/list-list.png\");*/\r\n/*    background-repeat: no-repeat;*/\r\n/*    background-position: center center;*/\r\n/*    border-radius: 0px;*/\r\n/*}*/\r\n.div-hove:hover{\r\n    background-color: rgba(255,255,255,0.3);\r\n}\r\n.div-hove{\r\n    cursor: pointer\r\n}\r\n.x-combo-list-item{\r\n    margin: 5px 0\r\n}","vmdprops":"\"\"","type":"module","vmdresource":"{\"components\":[{\"cid\":\"vmdrescsss\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdresjss\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdresimgs\",\"layoutConfig\":{},\"userConfig\":{}}]}"}