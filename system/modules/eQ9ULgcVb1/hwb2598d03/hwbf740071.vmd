{"vmdlayout":"{\"components\":[{\"cid\":\"viewport\",\"id\":\"MyViewport\",\"layoutConfig\":{},\"userConfig\":{\"layout\":\"border\",\"afterrender\":\"MyViewport_afterrender\",\"beforerender\":\"MyViewport_beforerender\"},\"cn\":[{\"cid\":\"panel\",\"id\":\"p_ace\",\"layoutConfig\":{},\"userConfig\":{\"x\":0,\"y\":70,\"layout\":\"fit\",\"height\":\"\",\"border\":true,\"header\":false,\"region\":\"center\",\"autoScroll\":false,\"id\":\"p_ace\",\"afterrender\":\"p_ace_afterrender\"}},{\"cid\":\"panel\",\"id\":\"panel1\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"west\",\"header\":false,\"layout\":\"border\",\"border\":true,\"height\":50,\"width\":230,\"split\":true,\"collapseMode\":\"mini\",\"bodyStyle\":\"background-color: #fff\"},\"cn\":[{\"cid\":\"tabpanel\",\"id\":\"MyTabs\",\"layoutConfig\":{},\"userConfig\":{\"activeTab\":0,\"region\":\"center\",\"split\":true,\"collapseMode\":\"mini\",\"unstyled\":true,\"maskDisabled\":true},\"cn\":[{\"cid\":\"panel\",\"id\":\"panel2\",\"layoutConfig\":{},\"userConfig\":{\"title\":\"组件\",\"width\":249,\"height\":362,\"border\":false,\"header\":false,\"layout\":\"border\",\"style\":\"\",\"bodyStyle\":\"background-color: #fff\"},\"cn\":[{\"cid\":\"vmdTree\",\"id\":\"compsTree\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"north\",\"split\":true,\"afterrender\":\"hwTree3_afterrender\",\"id\":\"compsTree\",\"nodeClick\":\"compsTree_nodeClick\",\"height\":250,\"anchor\":\"100% 40%\",\"style\":\"height: 100px\",\"minHeight\":150,\"width\":\"\"}},{\"cid\":\"tabpanel\",\"id\":\"MyTabs1\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"center\",\"bodyStyle\":\"background-color: #fff;    border: 0px solid;\",\"hideBorders\":false,\"autoDestroy\":false,\"unstyled\":true,\"anchor\":\"100% 30%\",\"minHeight\":150,\"activeTab\":0},\"cn\":[{\"cid\":\"panel\",\"id\":\"panel3\",\"layoutConfig\":{},\"userConfig\":{\"title\":\"属性\",\"header\":false,\"layout\":\"fit\",\"border\":false},\"cn\":[{\"cid\":\"vmdTree\",\"id\":\"compPropertys\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"compPropertys\",\"afterrender\":\"compPropertys_afterrender\",\"nodeClick\":\"compPropertys_nodeClick\",\"doubleClick\":\"compPropertys_doubleClick\"}}]},{\"cid\":\"panel\",\"id\":\"panel4\",\"layoutConfig\":{},\"userConfig\":{\"title\":\"方法\",\"border\":false,\"header\":false,\"layout\":\"fit\"},\"cn\":[{\"cid\":\"vmdTree\",\"id\":\"compMethods\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"compMethods\",\"afterrender\":\"compMethods_afterrender\",\"nodeClick\":\"compMethods_nodeClick\",\"doubleClick\":\"compMethods_doubleClick\"}}]},{\"cid\":\"panel\",\"id\":\"panel5\",\"layoutConfig\":{},\"userConfig\":{\"title\":\"事件\",\"border\":false,\"header\":false,\"layout\":\"fit\"},\"cn\":[{\"cid\":\"vmdTree\",\"id\":\"compEvent\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"compEvent\",\"afterrender\":\"compEvent_afterrender\",\"nodeClick\":\"compEvent_nodeClick\",\"doubleClick\":\"compEvent_doubleClick\"}}]}]},{\"cid\":\"panel\",\"id\":\"panel7\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"south\",\"height\":150,\"layout\":\"border\",\"title\":\"说明\",\"split\":true,\"collapseMode\":\"standard\",\"border\":false,\"header\":false,\"autoScroll\":false,\"anchor\":\"100% 30%\",\"minHeight\":150},\"cn\":[{\"cid\":\"htmleditor\",\"id\":\"hwEditor\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"center\",\"enableColors\":false,\"enableFont\":false,\"enableAlignments\":false,\"enableFontSize\":false,\"enableFormat\":false,\"enableLinks\":false,\"enableLists\":false,\"enableSourceEdit\":false,\"afterrender\":\"hwEditor_afterrender\",\"style\":\"background-color: #fff;    border-left: 0px;    border-right: 0px;    margin-top: -5\",\"floatable\":false,\"margins\":\"-3\",\"split\":false,\"autoHide\":false,\"animFloat\":false,\"hidden\":false}}]}]},{\"cid\":\"panel\",\"id\":\"panel6\",\"layoutConfig\":{},\"userConfig\":{\"title\":\"公共方法\",\"border\":false,\"header\":false,\"layout\":\"border\",\"bodyStyle\":\"background-color: #fff\"},\"cn\":[{\"cid\":\"vmdTree\",\"id\":\"publicMethodsTree\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"publicMethodsTree\",\"afterrender\":\"publicMethodsTree_afterrender\",\"nodeClick\":\"publicMethodsTree_nodeClick\",\"doubleClick\":\"publicMethodsTree_doubleClick\",\"anchor\":\"100% 70%\",\"region\":\"center\",\"minHeight\":150}},{\"cid\":\"panel\",\"id\":\"panel\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"south\",\"height\":150,\"layout\":\"border\",\"title\":\"说明\",\"split\":true,\"collapseMode\":\"standard\",\"border\":false,\"header\":false,\"autoScroll\":false,\"anchor\":\"100% 30%\",\"minHeight\":150},\"cn\":[{\"cid\":\"htmleditor\",\"id\":\"hwEditor1\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"center\",\"enableColors\":false,\"enableFont\":false,\"enableAlignments\":false,\"enableFontSize\":false,\"enableFormat\":false,\"enableLinks\":false,\"enableLists\":false,\"enableSourceEdit\":false,\"afterrender\":\"hwEditor_afterrender\",\"style\":\"background-color: #fff;    border-left: 0px;    border-right: 0px;    margin-top: -5\",\"floatable\":false,\"margins\":\"-3\",\"split\":false,\"autoHide\":false,\"animFloat\":false,\"hidden\":false,\"minHeight\":200}}]}]}]}]}]},{\"cid\":\"vmddataset\",\"id\":\"数据集\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdvariable\",\"id\":\"变量\",\"layoutConfig\":{},\"userConfig\":{}}]}","vmdevents":" if(parent.init_def_platformControlData) {\n\n     parent.init_def_platformControlData();\n     def_platformControl = parent.def_platformControl;\n }\n if(parent.init_def_platformFun) {\n\n     parent.init_def_platformFun({\n         vmd: allPublicMethods\n     });\n     parent.init_def_platformVmd();\n     //parent.init_def_platformExt();\n     def_platformWidget = parent.def_platformWidget;\n }\n\n //ext框架类自动识别\n def_platformExtjs = parent.def_platformExtjs;\n var components = parent.xds.inspector.root.childNodes;\n\n aceEdit = new vmd.comp.Ace({\n     language: 'javascript',\n     id: \"ace_code\"\n })\n\n if(parent.Ext.getCmp(\"aceWin\")) {\n     p_aceEdit = parent.Ext.getCmp(\"aceWin\")\n     aceEdit.value = p_aceEdit.val;\n     parent.Ext.getCmp(\"aceWin\").on('close', closeAce)\n }\n // p_aceEdit = new vmd.comp.Ace({\n //     language: 'javascript',\n //     id: \"ace_code\",\n //     value: \"sss \\n bbb \\n  ccc\",\n //     aceline: \"2\"\n // })\n\n function hwTree3_afterrender(sender) {\n     // bindtree()\n }\n\n function bindtree() {\n     var mytree = compsTree;\n     mytree.iconURL = \"\";\n     mytree.deleteChildItems(0);\n     mytree.loadJSONObject({\n         id: 0,\n         text: \"我的组件\",\n         item: []\n     });\n     mytree.itemObj = {};\n     Ext.each(components, function(comp) {\n\n\n         mytree.insertNewChild(0, comp.id, comp.text);\n         var treenode = mytree.item(comp.id);\n         treenode.cid = comp.component.cid;\n         treenode.iconCls = comp.attributes.iconCls;\n         mytree.itemObj[comp.id] = treenode;\n         var iconImg = Ext.get(comp.ui.iconNode).getStyle('background-image').replace('url(\"', '').replace('\")', '')\n         mytree.setItemImage2(comp.id, iconImg, iconImg, iconImg)\n\n         if(comp.childNodes.length > 0) {\n             Ext.each(comp.childNodes, function(childComp) {\n                 addComTree(childComp, comp.id);\n             })\n         }\n     })\n }\n\n function addComTree(comp, parentId) {\n     var mytree = compsTree;\n     mytree.insertNewChild(parentId, comp.id, comp.text);\n     var treenode = mytree.item(comp.id);\n     treenode.cid = comp.component.cid;\n     treenode.iconCls = comp.attributes.iconCls;\n     mytree.itemObj[comp.id] = treenode;\n     var iconImg = Ext.get(comp.ui.iconNode).getStyle('background-image');\n     var iconImg = Ext.get(comp.ui.iconNode).getStyle('background-image').replace('url(\"', '').replace('\")', '')\n     mytree.setItemImage2(comp.id, iconImg, iconImg, iconImg)\n     if(comp.childNodes.length > 0) {\n         Ext.each(comp.childNodes, function(childComp) {\n             addComTree(childComp, comp.id);\n         })\n     }\n\n     mytree.closeItem(comp.id)\n }\n\n function compsTree_nodeClick(sender, id) {\n     var mytree = compsTree;\n     var m_mytree = compMethods;\n     var p_mytree = compPropertys;\n     var e_mytree = compEvent;\n     clearcompMethods();\n     clearcompPropertys();\n     clearcompEvent();\n     var selNode = mytree.getSelectedItemId();\n     if(!selNode)\n         return;\n     if(def_platformControl[selNode]) {\n         var methods = def_platformControl[def_platformControl[selNode][\"!type\"].replace(\"+\", \"\")]\n         if(methods) {\n             for(var method in methods.prototype) {\n                 if(methods.prototype[method][\"!type\"] == 'fn()') {\n                     if(m_mytree.rendered) {\n                         m_mytree.insertNewChild(0, method, method);\n                         m_mytree.setItemImage2(method, \"tree/fun.png\", \"tree/fun.png\", \"tree/fun.png\")\n                         var treenode = m_mytree.item(method);\n                         treenode.content = methods.prototype[method][\"!doc\"];\n                         m_mytree.itemObj[method] = treenode;\n                     }\n                 } else if(methods.prototype[method][\"!type\"] == 'event') {\n                     if(e_mytree.rendered) {\n                         e_mytree.insertNewChild(0, method, method);\n                         e_mytree.setItemImage2(method, \"tree/event.png\", \"tree/event.png\", \"tree/event.png\")\n                         var treenode = e_mytree.item(method);\n                         treenode.content = methods.prototype[method][\"!doc\"];\n                         e_mytree.itemObj[method] = treenode;\n                     }\n                 } else {\n                     if(p_mytree.rendered) {\n                         p_mytree.insertNewChild(0, method, method);\n                         p_mytree.setItemImage2(method, \"tree/pro.png\", \"tree/pro.png\", \"tree/pro.png\")\n                         var treenode = p_mytree.item(method);\n                         treenode.content = methods.prototype[method][\"!doc\"];\n                         p_mytree.itemObj[method] = treenode;\n                     }\n                 }\n             }\n         }\n     }\n }\n\n function addComMethods(methods) {\n     var mytree = compsTree;\n     var m_mytree = compMethods;\n     var selNode = mytree.getSelectedItemId()\n     if(!selNode)\n         return;\n     if(def_platformControl[selNode]) {\n         var methods = def_platformControl[def_platformControl[selNode][\"!type\"].replace(\"+\", \"\")]\n         if(methods) {\n             for(var method in methods.prototype) {\n                 if(methods.prototype[method][\"!type\"] == 'fn()') {\n                     m_mytree.insertNewChild(0, method, method);\n                     m_mytree.setItemImage2(method, \"tree/fun.png\", \"tree/fun.png\", \"tree/fun.png\")\n                     var treenode = m_mytree.item(method);\n                     treenode.content = methods.prototype[method][\"!doc\"];\n                     m_mytree.itemObj[method] = treenode;\n                 }\n             }\n         }\n     }\n }\n\n function addComEvent(methods) {\n     var mytree = compsTree;\n     var e_mytree = compEvent;\n     var selNode = mytree.getSelectedItemId()\n     if(!selNode)\n         return;\n     if(def_platformControl[selNode]) {\n         var methods = def_platformControl[def_platformControl[selNode][\"!type\"].replace(\"+\", \"\")]\n         if(methods) {\n             for(var method in methods.prototype) {\n                 if(methods.prototype[method][\"!type\"] == 'event') {\n                     e_mytree.insertNewChild(0, method, method);\n                     e_mytree.setItemImage2(method, \"tree/event.png\", \"tree/event.png\", \"tree/event.png\")\n                     var treenode = e_mytree.item(method);\n                     treenode.content = methods.prototype[method][\"!doc\"];\n                     e_mytree.itemObj[method] = treenode;\n                 }\n             }\n         }\n     }\n }\n\n function addComPropertys(methods) {\n     var mytree = compsTree;\n     var p_mytree = compPropertys;\n     var selNode = mytree.getSelectedItemId()\n     if(!selNode)\n         return\n     if(def_platformControl[selNode]) {\n         var methods = def_platformControl[def_platformControl[selNode][\"!type\"].replace(\"+\", \"\")]\n         if(methods) {\n             for(var method in methods.prototype) {\n                 if(methods.prototype[method][\"!type\"] == '') {\n                     p_mytree.insertNewChild(0, method, method);\n                     p_mytree.setItemImage2(method, \"tree/pro.png\", \"tree/pro.png\", \"tree/pro.png\")\n                     var treenode = p_mytree.item(method);\n                     treenode.content = methods.prototype[method][\"!doc\"];\n                     p_mytree.itemObj[method] = treenode;\n                 }\n             }\n         }\n     }\n }\n\n function clearcompPropertys() {\n     var mytree = compPropertys;\n     if(mytree.rendered) {\n         mytree.deleteChildItems(0);\n         mytree.loadJSONObject({\n             id: 0,\n             text: \"我的属性\",\n             item: []\n         });\n         mytree.itemObj = {};\n     }\n }\n\n function clearcompMethods() {\n     var mytree = compMethods;\n     if(mytree.rendered) {\n         mytree.deleteChildItems(0);\n         mytree.loadJSONObject({\n             id: 0,\n             text: \"我的方法\",\n             item: []\n         });\n         mytree.itemObj = {};\n     }\n }\n\n function clearcompEvent() {\n     var mytree = compEvent;\n     if(mytree.rendered) {\n         mytree.deleteChildItems(0);\n         mytree.loadJSONObject({\n             id: 0,\n             text: \"我的事件\",\n             item: []\n         });\n         mytree.itemObj = {};\n     }\n }\n\n function compPropertys_afterrender(sender) {\n     clearcompPropertys();\n     // addComPropertys();\n }\n\n function compMethods_afterrender(sender) {\n     clearcompMethods();\n     addComMethods();\n }\n\n function compEvent_afterrender(sender) {\n     clearcompEvent();\n     addComEvent();\n }\n\n function compPropertys_nodeClick(sender, id) {\n     hwEditor.setValue(compPropertys.itemObj[id].content);\n     hwEditor.readOnly = true;\n }\n\n function hwEditor_afterrender(sender) {\n     hwEditor.readOnly = true;\n }\n\n function compMethods_nodeClick(sender, id) {\n     hwEditor.setValue(compMethods.itemObj[id].content);\n     hwEditor.readOnly = true;\n }\n\n function compEvent_nodeClick(sender, id) {\n     hwEditor.setValue(compEvent.itemObj[id].content);\n     hwEditor.readOnly = true;\n }\n\n function compPropertys_doubleClick(sender, id) {\n     aceEdit.insert(compsTree.getSelectedItemId() + \".\" + compPropertys.itemObj[id].text);\n }\n\n function compMethods_doubleClick(sender, id) {\n     aceEdit.insert(compsTree.getSelectedItemId() + \".\" + compMethods.itemObj[id].text);\n }\n\n function compEvent_doubleClick(sender, id) {\n     aceEdit.insert(compsTree.getSelectedItemId() + \".\" + compEvent.itemObj[id].text);\n }\n\n function publicMethodsTree_afterrender(sender) {\n     var mytree = publicMethodsTree;\n     mytree.deleteChildItems(0);\n     mytree.loadJSONObject({\n         id: 0,\n         text: \"我的组件\",\n         item: []\n     });\n     mytree.itemObj = {};\n     //添加分类\n\n     for(var Mymethods in allPublicMethods.items) {\n         var methods = allPublicMethods.items[Mymethods];\n         mytree.insertNewChild(0, methods.name, methods.text);\n         var treenode = mytree.item(methods.id);\n         treenode.insert = \"\";\n         mytree.itemObj[methods.name] = treenode;\n         if(methods.type == publicMethodsType.Category)\n             mytree.setItemImage2(methods.name, \"folderClosed.gif\", \"folderOpen.gif\", \"folderClosed.gif\")\n         if(methods.items) {\n             for(var method in methods.items) {\n                 addMethodsTree(methods.items[method], methods.name);\n             }\n         }\n     }\n }\n\n function addMethodsTree(method, parentId) {\n     var mytree = publicMethodsTree;\n     mytree.insertNewChild(parentId, method.name, method.text);\n     var treenode = mytree.item(method.name);\n     treenode.insert = method.insert;\n     treenode.comment = method.comment;\n     mytree.itemObj[method.name] = treenode;\n     if(method.type == publicMethodsType.Category)\n         mytree.setItemImage2(method.name, \"folderClosed.gif\", \"folderOpen.gif\", \"folderClosed.gif\")\n     if(method.type == publicMethodsType.fun)\n         mytree.setItemImage2(method.name, \"tree/fun.png\", \"tree/fun.png\", \"tree/fun.png\")\n     if(method.items) {\n         for(var c_method in method.items) {\n             addMethodsTree(method.items[c_method], method.name);\n         }\n     }\n }\n\n function publicMethodsTree_nodeClick(sender, id) {\n     hwEditor1.setValue(publicMethodsTree.itemObj[id].comment);\n     hwEditor1.readOnly = true;\n }\n\n function publicMethodsTree_doubleClick(sender, id) {\n     aceEdit.insert(publicMethodsTree.itemObj[id].insert);\n }\n\n function MyViewport_afterrender(sender) {\n\n     parent.Ext.getCmp(\"aceWin\") && parent.Ext.getCmp(\"aceWin\").loading.hide();\n     setTimeout(function() {\n         bindtree()\n\n     }, 200)\n\n }\n\n function p_ace_afterrender(sender) {\n\n     p_ace.add(aceEdit);\n     if(typeof(p_aceEdit) != 'undefined' && p_aceEdit) {\n         window.setTimeout(function() {\n             aceEdit.gotoLine(p_aceEdit.aceline)\n             aceEdit.ace.focus()\n         }, 150)\n     }\n }\n\n function closeAce() {\n     if(typeof(p_aceEdit) != 'undefined' && p_aceEdit) {\n         parent.Ext.getCmp(\"aceWin\").val = aceEdit.getValue();\n\n         parent.Ext.getCmp(\"aceWin\").un('close', closeAce)\n         parent.Ext.getCmp(\"aceWin\").closeFn();\n     }\n\n }\n\n function MyViewport_beforerender(sender) {\n\n }","vmdcss":"","vmdprops":"\"\"","type":"module"}