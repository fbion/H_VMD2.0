{"vmdversion":"vmd2.0.5.200306","vmdlayout":"{\"components\":[{\"cid\":\"viewport\",\"id\":\"MyViewport\",\"layoutConfig\":{},\"userConfig\":{\"layout\":\"border\",\"afterrender\":\"MyViewport_afterrender\"},\"cn\":[{\"cid\":\"panel\",\"id\":\"MyPanel_head\",\"layoutConfig\":{},\"userConfig\":{\"x\":0,\"y\":0,\"height\":60,\"layout\":\"border\",\"bodyStyle\":\"background-color:skyblue;\",\"region\":\"north\",\"id\":\"MyPanel_head\",\"header\":false},\"cn\":[{\"cid\":\"panel\",\"id\":\"MyPanel_logo\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"west\",\"layout\":\"border\",\"width\":500,\"maskDisabled\":true,\"border\":false,\"bodyStyle\":\"background-color: #409EFF;\",\"id\":\"MyPanel_logo\",\"header\":false},\"cn\":[{\"cid\":\"container\",\"id\":\"MyC_Logoimg\",\"layoutConfig\":{},\"userConfig\":{\"width\":58,\"height\":30,\"style\":\"margin-left: 20px;    margin-top: 5px;\",\"x\":0,\"y\":0,\"region\":\"west\",\"id\":\"MyC_Logoimg\",\"border\":false,\"backgroundImage\":\"/system/modules/eQ9ULgcVb1/img/复合组件1.png\"}},{\"cid\":\"label\",\"id\":\"MyLb_name\",\"layoutConfig\":{},\"userConfig\":{\"x\":70,\"y\":10,\"text\":\"复合组件管理\",\"style\":\"font-size: 26px;    color: #ffffff;    margin-left: 20px;    margin-top: 4px;\",\"region\":\"center\",\"split\":false,\"cls\":\"lineHeight200\",\"id\":\"MyLb_name\"}}]},{\"cid\":\"panel\",\"id\":\"MyPanel7\",\"layoutConfig\":{\"align\":\"middle\",\"pack\":\"end\"},\"userConfig\":{\"region\":\"center\",\"border\":false,\"style\":\"background-color: #1e7fff;\",\"bodyStyle\":\"background-color: #409EFF\",\"header\":false,\"layout\":\"hbox\"},\"cn\":[{\"cid\":\"container\",\"id\":\"hwDiv1\",\"layoutConfig\":{\"align\":\"middle\",\"pack\":\"center\"},\"userConfig\":{\"width\":80,\"layout\":\"hbox\",\"overCls\":\"div-hove\",\"border\":false},\"cn\":[{\"cid\":\"vmdButton\",\"id\":\"logserach\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"logserach\",\"text\":\"日志查询\",\"type\":\"text\",\"style\":\"font-size: 12px;    color: #ffffff;    margin-right: 10px;    line-height: 30px;\",\"click\":\"logserach_click\"}}]}]}]},{\"cid\":\"panel\",\"id\":\"MyP_info\",\"layoutConfig\":{},\"userConfig\":{\"x\":0,\"y\":60,\"height\":640,\"layout\":\"border\",\"region\":\"center\",\"id\":\"MyP_info\",\"header\":false},\"cn\":[{\"cid\":\"panel\",\"id\":\"MyP_jcxx\",\"layoutConfig\":{},\"userConfig\":{\"width\":900,\"x\":220,\"y\":0,\"height\":640,\"layout\":\"anchor\",\"region\":\"center\",\"id\":\"MyP_jcxx\",\"header\":false,\"autoScroll\":true},\"cn\":[{\"cid\":\"vmd.ux.UserControlInfo\",\"id\":\"UserControlInfo\",\"layoutConfig\":{},\"userConfig\":{\"x\":0,\"y\":20,\"hidden\":false,\"width\":618,\"height\":630}},{\"cid\":\"container\",\"id\":\"div\",\"layoutConfig\":{},\"userConfig\":{\"border\":false,\"anchor\":\"100% 99%\",\"hidden\":true,\"layout\":\"fit\"}}]},{\"cid\":\"tabpanel\",\"id\":\"hwMyTabs\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"west\",\"width\":220,\"split\":true,\"collapseMode\":\"mini\",\"activeTab\":0,\"height\":\"\",\"autoWidth\":false,\"autoHeight\":false},\"cn\":[{\"cid\":\"panel\",\"id\":\"MyP_ModelTree\",\"layoutConfig\":{},\"userConfig\":{\"width\":220,\"height\":\"\",\"layout\":\"border\",\"x\":0,\"y\":0,\"region\":\"\",\"id\":\"MyP_ModelTree\",\"header\":false,\"style\":\"background-color: white;    padding-top: 5px;\",\"bodyStyle\":\" background-color: white;\",\"split\":true,\"floatable\":false,\"collapseMode\":\"mini\",\"collapsible\":true,\"title\":\"组件\",\"autoHeight\":false},\"cn\":[{\"cid\":\"panel\",\"id\":\"panel\",\"layoutConfig\":{},\"userConfig\":{\"border\":false,\"header\":false,\"region\":\"north\",\"layout\":\"fit\",\"height\":30},\"cn\":[{\"cid\":\"vmdComlist\",\"id\":\"queryCom\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"queryCom\",\"afterrender\":\"queryCom_afterrender\",\"selectChanged\":\"queryCom_selectChanged\",\"style\":\"font-size: 13px;\"}}]},{\"cid\":\"panel\",\"id\":\"MyPanel1\",\"layoutConfig\":{},\"userConfig\":{\"x\":70,\"y\":125,\"height\":300,\"border\":false,\"header\":false,\"region\":\"center\",\"layout\":\"fit\",\"style\":\"margin-left: 5px;    margin-top: 3px;    padding-right: 5px;    padding-bottom: 10px;\"},\"cn\":[{\"cid\":\"vmdTree\",\"id\":\"hwTree\",\"layoutConfig\":{},\"userConfig\":{\"x\":0,\"y\":0,\"afterrender\":\"hwTree_afterrender\",\"height\":580,\"width\":220,\"onOpenEnd\":\"hwTree_onOpenEnd\",\"nodeClick\":\"hwTree_nodeClick\",\"region\":\"center\",\"onOpenStart\":\"hwTree_onOpenStart\",\"onDblClick\":\"hwTree_onDblClick\",\"doubleClick\":\"\",\"nodeSelected\":\"\",\"beforerender\":\"hwTree_beforerender\"}}]}]},{\"cid\":\"panel\",\"id\":\"MyP_PModelTree\",\"layoutConfig\":{},\"userConfig\":{\"title\":\"属性面板\",\"id\":\"MyP_PModelTree\",\"layout\":\"fit\",\"height\":\"\",\"header\":false},\"cn\":[{\"cid\":\"vmdTree\",\"id\":\"hwPTree\",\"layoutConfig\":{},\"userConfig\":{\"x\":0,\"y\":0,\"afterrender\":\"hwPTree_afterrender\",\"height\":580,\"width\":220,\"onOpenEnd\":\"hwPTree_onOpenEnd\",\"nodeClick\":\"hwPTree_nodeClick\",\"region\":\"center\",\"onOpenStart\":\"hwTree_onOpenStart\",\"onDblClick\":\"hwTree_onDblClick\",\"doubleClick\":\"\",\"nodeSelected\":\"\",\"beforerender\":\"hwPTree_beforerender\"}}]}]}]},{\"cid\":\"container\",\"id\":\"hwDiv\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"south\",\"height\":0,\"hidden\":true,\"disabled\":true},\"cn\":[{\"cid\":\"vmd.ux.Uploader\",\"id\":\"Uploader\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"west\",\"hidden\":true,\"disabled\":false}}]}]},{\"cid\":\"vmddataset\",\"id\":\"数据\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdvariable\",\"id\":\"变量\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdsubviewport\",\"id\":\"SubView_Window\",\"layoutConfig\":{},\"userConfig\":{}}]}","vmdevents":"//上次点击的节点\r\nvar bselNodeId = \"\";\r\n//获取传递的设计模式\r\nvar allowedDesigner = false;\r\nvar page = this\r\n// 检索组件\r\nvar selectData = [],\r\n    cateData = [];\r\nvar store = new Ext.data.JsonStore({\r\n    proxy: new Ext.data.MemoryProxy(),\r\n    fields: ['id', 'text']\r\n});\r\n//进度提示\r\nvar myMask = new Ext.LoadMask(Ext.getBody(), {\r\n    msg: \"数据加载中,请稍后...\",\r\n    msgCls: 'z-index:10000;'\r\n});\r\n// 数据服务地址\r\n//初始化数据\r\nfunction hwTree_afterrender(sender) {\r\n    treeInit(hwTree)\r\n    hwTree.attachEvent(\"onDrag\", function(sId, tId, id, sObject, tObject) {\r\n        return _treeDrag(sId, tId, id, sObject, tObject, hwTree)\r\n    });\r\n    hwTree.attachEvent(\"onDrop\", function(sId, tId, id, sObject, tObject) {\r\n        _treeDrop(sId, tId, id, sObject, tObject, hwTree)\r\n    });\r\n    panel.doLayout()\r\n}\r\n\r\nfunction _treeDrag(sId, tId, id, sObject, tObject, _tree) {\r\n    console.log(\"sid:\" + sId + \",tId:\" + tId)\r\n    var dragNode = _tree.itemObj[sId];\r\n    if (tId) {\r\n        var trgNode = _tree.itemObj[tId];\r\n        if (dragNode.isFord && trgNode.isModel) {\r\n            return false;\r\n        } else if (dragNode.isModel && trgNode.isModel) {\r\n            return false;\r\n        } else {\r\n            var mymessage = confirm(\"确定要移动到该节点下么?\");\r\n            return mymessage\r\n        }\r\n    } else\r\n        return false\r\n}\r\n\r\nfunction _treeDrop(sId, tId, id, sObject, tObject, _tree) { //通过服务修改数据\r\n    _tree.clearSelection();\r\n    console.log(\"sid:\" + sId + \",tId:\" + tId + \",id:\" + id)\r\n    var dragNode = _tree.itemObj[sId];\r\n    if (dragNode.isModel) {\r\n        if (sId === null || sId === \"\" || tId === \"\" || tId === null)\r\n            Tips.tips(\"节点移动失败！\", \"error\");\r\n        else\r\n            hwDas.edit(\"CDEServcie/resource/cmptreecmpdrag\", {}, {\r\n                id: sId,\r\n                category_id: tId\r\n            }, {}, function() {}, function() {})\r\n    } else if (dragNode.isFord) {\r\n        if (sId === null || sId === \"\" || tId === \"\" || tId === null)\r\n            Tips.tips(\"节点移动失败！\", \"error\");\r\n        else\r\n            hwDas.edit(\"CDEServcie/resource/cmptreecatedrag\", {}, {\r\n                id: sId,\r\n                parent_id: tId\r\n            }, {}, function() {}, function() {})\r\n    } else\r\n        return;\r\n}\r\n\r\nfunction treeInit(_tree) {\r\n    var mytree = _tree;\r\n    myMask = new Ext.LoadMask(mytree.el, {\r\n        msg: \"数据加载中,请稍后...\",\r\n        msgCls: 'z-index:10000;'\r\n    });\r\n    myMask.show();\r\n    var firstNode = \"\";\r\n    mytree.deleteChildItems(0);\r\n    mytree.loadJSONObject({\r\n        id: 0,\r\n        text: \"我的复合组件\",\r\n        item: []\r\n    });\r\n    mytree.itemObj = {};\r\n    mytree.newnode = false;\r\n    mytree.enableDragAndDrop(true);\r\n    var publish = false\r\n\r\n    var loadTree = function() {\r\n        hwDas.ajax({\r\n            das: {\r\n                idedas: true\r\n            },\r\n            url: \"CDEServcie/resource/category\",\r\n            type: 'get',\r\n            timeout: 50000,\r\n            params: {\r\n                parent_id: \"0\",\r\n                type: _tree.uxType\r\n            },\r\n            success: function(result) {\r\n                var datajson = result.data[0].datas;\r\n                var treeDataJson = [];\r\n                for (var i = 0; i < datajson.length; i++) {\r\n                    if (publish && datajson[i].name == \"vmd框架\")\r\n                        continue;\r\n                    mytree.insertNewChild(\"0\", datajson[i].id, datajson[i].name);\r\n                    mytree.setItemImage2(datajson[i].id, \"tree/folderClosed.gif\", \"tree/folderOpen.gif\", \"tree/folderClosed.gif\")\r\n                    mytree.insertNewChild(datajson[i].id, datajson[i].id + \"-0\", \"\");\r\n                    mytree.closeItem(datajson[i].id);\r\n                    var treenode = mytree.item(datajson[i].id);\r\n                    if (treenode) {\r\n                        treenode.isFord = true;\r\n                        treenode.loadChild = false;\r\n                        treenode.path = \"/0/\" + datajson[i].id;\r\n                    }\r\n                    mytree.itemObj[datajson[i].id] = treenode;\r\n                }\r\n                myMask.hide();\r\n                mytree.makeAllDraggable();\r\n            },\r\n            error: function(msg) {\r\n                myMask.hide();\r\n                Ext.Msg.alert(\"提示\", \"获取模块信息失败\", function() {})\r\n            }\r\n        })\r\n\r\n    }\r\n    //获取当前是否为开发环境，通过版本 publish  来判断，隐藏vmd的组件节点\r\n\r\n    var hwFao1 = new HwFao(vmd.MicService.getReportIp(), \"vmd\");\r\n    hwFao1.read(\"vmdVersion.json\", function(result) {\r\n        try {\r\n            var vers = JSON.parse(result.data)\r\n            publish = vers.publish\r\n        } catch (q) {}\r\n        loadTree()\r\n    }, function() {\r\n        loadTree()\r\n    })\r\n    //绑定右键菜单\r\n    var menu = new dhtmlXMenuObject();\r\n    menu.renderAsContextMenu();\r\n    menu.attachEvent(\"onClick\", onMenuClick);\r\n    menu.addNewChild(menu.topId, 1, \"newFord\", \"新建分类\", false);\r\n    if (mytree.uxType == '5')\r\n        menu.addNewChild(menu.topId, 2, \"newMode\", \"新建属性面板\", false);\r\n    else\r\n        menu.addNewChild(menu.topId, 2, \"newMode\", \"新建复合组件\", false);\r\n    menu.addNewChild(menu.topId, 3, \"copy\", \"复制\", false);\r\n    menu.addNewChild(menu.topId, 5, \"paste\", \"粘帖\", false);\r\n    menu.addNewChild(menu.topId, 6, \"delete\", \"删除\", false);\r\n    menu.addNewChild(menu.topId, 7, \"exp\", \"导出\", false);\r\n    menu.addNewChild(menu.topId, 8, \"imp\", \"导入\", false);\r\n    //mytree.enableDragAndDrop(\"temporary_disabled\");\r\n    mytree.enableContextMenu(menu);\r\n    menu.bindtree = mytree\r\n\r\n    mytree.attachEvent(\"onBeforeContextMenu\", function(itemId) {\r\n        //var mytree = this;\r\n        var selId = mytree.getSelectedItemId();\r\n        var selnode = mytree.itemObj[selId];\r\n        if (selnode.isProject) {\r\n            menu.showItem('newFord');\r\n            menu.hideItem('newMode');\r\n            menu.hideItem('copy');\r\n            menu.hideItem('paste');\r\n            menu.hideItem('delete');\r\n        } else if (selnode.isFord) {\r\n            menu.showItem('newFord');\r\n            menu.showItem('newMode');\r\n            menu.hideItem('copy');\r\n            menu.showItem('paste');\r\n            menu.showItem('delete');\r\n        } else if (selnode.isModel) {\r\n            menu.hideItem('newFord');\r\n            menu.hideItem('newMode');\r\n            menu.showItem('copy');\r\n            menu.hideItem('paste');\r\n            menu.showItem('delete');\r\n        }\r\n        return true\r\n    })\r\n    //绑定右键事件 设置右键选中节点\r\n    mytree.attachEvent('onRightClick', function(id) {\r\n        mytree.selectItem(id);\r\n    })\r\n    var menu1 = new dhtmlXMenuObject();\r\n    menu1.renderAsContextMenu();\r\n    menu1.attachEvent(\"onClick\", onMenuClick);\r\n    menu1.addNewChild(menu1.topId, 1, \"newFord\", \"新建分类\", false);\r\n    menu1.addNewChild(menu.topId, 7, \"exp\", \"导出\", false);\r\n    menu1.addNewChild(menu.topId, 8, \"imp\", \"导入\", false);\r\n    menu1.addContextZone(mytree.allTree);\r\n    menu1.bindtree = mytree\r\n    menu1.attachEvent(\"onShow\", function(id) {\r\n        mytree.clearSelection();\r\n    });\r\n}\r\nwindow.treeInit = treeInit;\r\n\r\nfunction hwTree_onOpenEnd(sender, id) {\r\n    TreeOpenEnd(hwTree, id, '4')\r\n}\r\n\r\nfunction TreeOpenEnd(_tree, id) {\r\n    myMask.show();\r\n    var proId = id;\r\n    var mytree = _tree;\r\n    mytree.newnode = false;\r\n    var hasChild = mytree.hasChildren(proId);\r\n    var selnode = mytree.itemObj[proId];\r\n    var selnodepath = selnode.path;\r\n    var projectId = \"\";\r\n    var childParentId = \"0\";\r\n    childParentId = proId\r\n    if (!selnode.loadChild && !selnode.isModel) {\r\n        //绑定项目下的资源目录\r\n        hwDas.ajax({\r\n            das: {\r\n                idedas: true\r\n            },\r\n            url: \"CDEServcie/resource/category\",\r\n            type: 'get',\r\n            timeout: 50000,\r\n            params: {\r\n                //project_id: projectId,\r\n                parent_id: childParentId,\r\n                type: mytree.uxType\r\n            },\r\n            success: function(result) {\r\n                var datajson = result.data[0].datas;\r\n                var treeDataJson = [];\r\n                for (var i = 0; i < datajson.length; i++) {\r\n                    mytree.insertNewChild(proId, datajson[i].id, datajson[i].name);\r\n                    mytree.setItemImage2(datajson[i].id, \"tree/folderClosed.gif\", \"tree/folderOpen.gif\", \"tree/folderClosed.gif\")\r\n                    mytree.insertNewChild(datajson[i].id, datajson[i].id + \"-0\", \"\");\r\n                    mytree.closeItem(datajson[i].id);\r\n                    var treenode = mytree.item(datajson[i].id);\r\n                    treenode.path = selnodepath + \"/\" + datajson[i].id;\r\n                    //treenode.projectId = projectId;\r\n                    if (treenode) {\r\n                        treenode.isFord = true;\r\n                        treenode.loadChild = false;\r\n                    }\r\n                    mytree.itemObj[datajson[i].id] = treenode;\r\n                }\r\n                myMask.hide();\r\n            },\r\n            error: function(msg) {\r\n                myMask.hide();\r\n                Ext.Msg.alert(\"提示\", \"获取模块信息失败\", function() {})\r\n            }\r\n        })\r\n        if (!selnode.loadChild) {\r\n            mytree.deleteItem(id + \"-0\", false);\r\n        }\r\n        selnode.loadChild = true;\r\n        //获取项目下的资源\r\n        hwDas.ajax({\r\n            das: {\r\n                idedas: true\r\n            },\r\n            url: \"CDEServcie/resource/zygl\",\r\n            type: 'get',\r\n            timeout: 50000,\r\n            params: {\r\n                category_id: childParentId,\r\n                type: mytree.uxType\r\n            },\r\n            success: function(result) {\r\n                var datajson = result.data[0].datas;\r\n                var treeDataJson = [];\r\n                for (var i = 0; i < datajson.length; i++) {\r\n                    mytree.insertNewChild(proId, datajson[i].id, datajson[i].name);\r\n                    mytree.setItemImage2(datajson[i].id, \"tree/model.png\", \"tree/model.png\", \"tree/model.png\")\r\n                    var treenode = mytree.item(datajson[i].id);\r\n                    treenode.path = selnodepath + \"/\" + datajson[i].id;\r\n                    if (treenode) {\r\n                        treenode.isModel = true;\r\n                        treenode.createuser = datajson[i].row_created_by;\r\n                        treenode.createtime = datajson[i].row_created_date;\r\n                        treenode.changetime = datajson[i].row_changed_date;\r\n                        treenode.changeuser = datajson[i].row_changed_by;\r\n                        treenode.uxname = datajson[i].uxname;\r\n                        treenode.code = datajson[i].code;\r\n                        treenode.version = datajson[i].version;\r\n                        treenode.type = datajson[i].type;\r\n                        treenode.shared = datajson[i].shared;\r\n                        treenode.remark = datajson[i].remark;\r\n                    }\r\n                    mytree.itemObj[datajson[i].id] = treenode;\r\n                }\r\n                //数据操作  \r\n                myMask.hide();\r\n            },\r\n            error: function(msg) {\r\n                myMask.hide();\r\n                Ext.Msg.alert(\"提示\", \"获取复合组件信息失败\")\r\n            }\r\n        })\r\n    } else {\r\n        myMask.hide();\r\n    }\r\n}\r\n//////////////////////////////////////////点击树节点操作\r\nfunction hwTree_nodeClick(sender, id) {\r\n    treeNodeClick(hwTree, id)\r\n}\r\n\r\nfunction treeNodeClick(_tree, id) {\r\n    myMask.show();\r\n    var proId = id;\r\n    var mytree = _tree;\r\n    mytree.newnode = false;\r\n    var hasChild = mytree.hasChildren(proId);\r\n    var selnode = mytree.itemObj[proId];\r\n    var selnodepath = selnode.path;\r\n    var projectId = \"\";\r\n    var childParentId = \"0\";\r\n    if (bselNodeId != id) {\r\n        if (selnode.isModel) {\r\n            div.hide();\r\n            UserControlInfo.show()\r\n            UserControlInfo.refresh(mytree);\r\n        } else {\r\n            div.show();\r\n            UserControlInfo.hide()\r\n        }\r\n    }\r\n    bselNodeId = id;\r\n    myMask.hide();\r\n}\r\n//创建分类按钮操作\r\nfunction creatFord(_tree) {\r\n    var mytree = _tree;\r\n    var addford = function(fordname, _tree) {\r\n        //var mytree = _tree;\r\n        var selId = mytree.getSelectedItemId() || 0;\r\n        var selnode = mytree.itemObj[selId];\r\n        var selnodepath = selnode ? selnode.path || \"\" : \"\";\r\n        var nodename = fordname;\r\n        var newnodeid = newGuid(10);\r\n        var newcode = newGuid(10);\r\n        var xh = 10;\r\n        hwDas.ajax({\r\n            das: {\r\n                idedas: true\r\n            },\r\n            url: \"CDEServcie/resource/category\",\r\n            type: 'post',\r\n            timeout: 50000,\r\n            data: [{\r\n                parent_id: selId,\r\n                name: nodename,\r\n                code: newcode,\r\n                //project_id: projectId,\r\n                id: newnodeid,\r\n                xh: xh,\r\n                type: mytree.uxType\r\n            }],\r\n            success: function(result) {\r\n                mytree.insertNewChild(selId, newnodeid, nodename);\r\n                mytree.setItemImage2(newnodeid, \"tree/folderClosed.gif\", \"tree/folderOpen.gif\", \"tree/folderClosed.gif\")\r\n                var treenode = mytree.item(newnodeid);\r\n                treenode.path = selnodepath + \"/\" + newnodeid;\r\n                if (treenode) {\r\n                    treenode.isFord = true;\r\n                }\r\n                mytree.itemObj[newnodeid] = treenode;\r\n                var s = new vmd.proxy.Log();\r\n                s.save(\"复合组件新建分类\", newnodeid, Ext.util.Cookies.get('userName') + \"在\" + Ext.Date.dateFormat(new Date(), 'Y-m-d H:i:s') + \"新建了\" + nodename + \"的分类\", \"复合组件\", function() {\r\n                    // alert(\"保存成功了！\")\r\n                }, function() {\r\n                    console.log(\"日志报存失败了！\");\r\n                })\r\n            },\r\n            error: function(msg) {\r\n                Ext.Msg.alert(\"提示\", \"新建分类失败\")\r\n            }\r\n        })\r\n    }\r\n    var fordname = new page.MyFordWin(addford, _tree);\r\n    fordname.show();\r\n}\r\n//删除目录 模块信息\r\nfunction deleteNode(_tree) {\r\n    var mytree = _tree;\r\n    var selId = mytree.getSelectedItemId();\r\n    var selnode = mytree.itemObj[selId];\r\n    var haschild = mytree.hasChildren(selId);\r\n    //删除文件夹\r\n    if (selnode.isFord) {\r\n        if (haschild > 0) {\r\n            Ext.Msg.alert(\"提示\", \"存在子分类或资源，请删除子分类或资源后再删除该目录\")\r\n            return\r\n        }\r\n        Ext.Msg.confirm(\"提示\", \"确认要删除分类吗！\", function(type) {\r\n            if (type == \"yes\") {\r\n                hwDas.ajax({\r\n                    das: {\r\n                        idedas: true\r\n                    },\r\n                    url: \"CDEServcie/resource/category\",\r\n                    type: 'delete',\r\n                    timeout: 50000,\r\n                    params: {\r\n                        id: selId\r\n                    },\r\n                    success: function(result) {\r\n                        mytree.deleteItem(selId, true);\r\n                        getZJData();\r\n                        var s = new vmd.proxy.Log();\r\n                        s.save(\"删除复合组件分类\", selnode.text, Ext.util.Cookies.get('userName') + \"在\" + Ext.Date.dateFormat(new Date(), 'Y-m-d H:i:s') + \"删除了\" + selnode.text + \"复合组件息\", \"复合组件\", function() {\r\n                            // alert(\"保存成功了！\")\r\n                        }, function() {\r\n                            console.log(\"日志报存失败了！\");\r\n                        })\r\n                    },\r\n                    error: function(msg) {\r\n                        Ext.Msg.alert(\"提示\", \"删除分类失败\")\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        return;\r\n    }\r\n    //删除模块\r\n    if (selnode.isModel) {\r\n        Ext.Msg.confirm(\"提示\", \"组件删除后将不可恢复,确认要删除该复合组件?\", function(type) {\r\n            if (type == \"yes\") {\r\n                //先删除模块信息\r\n                var runtype = [];\r\n                myMask.show();\r\n                hwDas.ajax({\r\n                    das: {\r\n                        idedas: true\r\n                    },\r\n                    url: \"CDEServcie/resource/info\",\r\n                    type: 'delete',\r\n                    timeout: 50000,\r\n                    params: {\r\n                        id: selId\r\n                    },\r\n                    success: function(result) {\r\n                        mytree.deleteItem(selId); //, true);   \r\n                        runtype.push(true)\r\n                        if (runtype.length >= 3)\r\n                            myMask.hide()\r\n                        vmd.core.removeCmpFromList(selnode.text);\r\n                        getZJData();\r\n                        var s = new vmd.proxy.Log();\r\n                        s.save(\"删除复合组件\", selnode.id, Ext.util.Cookies.get('userName') + \"在\" + Ext.Date.dateFormat(new Date(), 'Y-m-d H:i:s') + \"删除了\" + selnode.text + \"复合组件息\", \"复合组件\", function() {\r\n                            // alert(\"保存成功了！\")\r\n                        }, function() {\r\n                            console.log(\"日志报存失败了！\");\r\n                        })\r\n                    },\r\n                    error: function(msg) {\r\n                        runtype.push(false)\r\n                        if (runtype.length >= 3)\r\n                            myMask.hide()\r\n                        Ext.Msg.alert(\"提示\", \"删除复合组件失败\")\r\n                        return\r\n                    }\r\n                })\r\n                //删除模块文件对应关系\r\n                hwDas.ajax({\r\n                    das: {\r\n                        idedas: true\r\n                    },\r\n                    url: \"CDEServcie/resource/file\",\r\n                    type: 'delete',\r\n                    timeout: 50000,\r\n                    params: {\r\n                        resource_id: selId\r\n                    },\r\n                    success: function(result) {\r\n                        runtype.push(true)\r\n                        if (runtype.length >= 3)\r\n                            myMask.hide()\r\n                    },\r\n                    error: function(msg) {\r\n                        runtype.push(false)\r\n                        if (runtype.length >= 3)\r\n                            myMask.hide()\r\n                        Ext.Msg.alert(\"提示\", \"删除模块文件信息失败\")\r\n                    }\r\n                })\r\n                //删除复合组件文件  删除js vmd\r\n                hwDas.ajax({\r\n                    host: vmdSettings.vmdFileIp || vmdSettings.dataServiceIp,\r\n                    das: {\r\n                        idedas: false\r\n                    },\r\n                    url: 'FileService',\r\n                    type: 'delete',\r\n                    timeout: 50000,\r\n                    params: {\r\n                        FileName: 'components/ide/' + selnode.text + '.js,components/ux/' + selnode.text + ',components/vmd/' + selnode.text + '.vmd'\r\n                    },\r\n                    success: function(result) {\r\n                        runtype.push(true)\r\n                        if (runtype.length >= 3)\r\n                            myMask.hide()\r\n                    },\r\n                    error: function(msg) {\r\n                        runtype.push(false)\r\n                        if (runtype.length >= 3)\r\n                            myMask.hide()\r\n                        Ext.Msg.alert(\"提示\", \"删除复合组件模块文件失败\")\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        return;\r\n    }\r\n}\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//自定义自定义方法\r\nfunction newGuid(len) {\r\n    var length = 32;\r\n    if (len)\r\n        length = len - 2\r\n    var guid = \"\";\r\n    arr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\r\n    for (var i = 0; i < length; i++) {\r\n        pos = Math.round(Math.random() * (arr.length - 1));\r\n        guid += arr[pos];\r\n    }\r\n    return \"hw\" + guid;\r\n}\r\n//文件夹名称录入框\r\npage.MyFordWin = Ext.extend(Ext.Window, {\r\n    xtype: \"window\",\r\n    title: \"分类对话框\",\r\n    width: 300,\r\n    height: 130,\r\n    layout: \"form\",\r\n    bodyStyle: 'padding:15px',\r\n    labelAlign: \"left\",\r\n    labelWidth: 40,\r\n    constructor: function(callback) {\r\n        this.callback = callback;\r\n        this.callParent();\r\n    },\r\n    initComponent: function() {\r\n        var me = this;\r\n        this.fbar = [{\r\n            text: \"确定\",\r\n            handler: function() {\r\n                me.callback(Ext.getCmp('filename').getValue())\r\n                me.close()\r\n            }\r\n        }, {\r\n            text: \"取消\",\r\n            handler: function() {\r\n                me.close()\r\n            }\r\n        }];\r\n        this.items = [{\r\n            id: 'filename',\r\n            xtype: \"textfield\",\r\n            fieldLabel: \"名称\",\r\n            anchor: \"100%\"\r\n        }]\r\n        page.MyFordWin.superclass.initComponent.call(this);\r\n    }\r\n})\r\n//右键菜单事件\r\nfunction onMenuClick(menuitemId) {\r\n    debugger\r\n    mytree = this.bindtree;\r\n    if (menuitemId == \"newFord\") {\r\n        creatFord(mytree);\r\n    } else if (menuitemId == \"newMode\") {\r\n        mytree.newnode = true;\r\n        div.hide();\r\n        UserControlInfo.show()\r\n        UserControlInfo.refresh(mytree);\r\n    } else if (menuitemId == \"delete\") {\r\n        deleteNode(mytree);\r\n    } else if (menuitemId == \"copy\") {\r\n        nodeCopy(mytree);\r\n    } else if (menuitemId == \"cut\") {\r\n        // nodeCut();\r\n    } else if (menuitemId == \"paste\") {\r\n        nodePaste(mytree);\r\n    } else if (menuitemId == \"exp\") {\r\n        expUx(mytree);\r\n    } else if (menuitemId == \"imp\") {\r\n        impUx(mytree);\r\n    }\r\n}\r\n///记录赋值或剪切的节点id\r\nvar copyNodeId = \"\";\r\n///复制节点\r\nfunction nodeCopy(_tree) {\r\n    var mytree = _tree;\r\n    var selId = mytree.getSelectedItemId();\r\n    copyNodeId = selId;\r\n}\r\n//粘帖节点\r\nfunction nodePaste(_tree) {\r\n    if (copyNodeId == \"\") {\r\n        return;\r\n    }\r\n    //创建一个form，填写name，备注\r\n    var copyNode = _tree.itemObj[copyNodeId];\r\n    var form = new Ext.form.FormPanel({\r\n        labelAlign: \"top\",\r\n        bodyStyle: \"padding: 10px\",\r\n        border: false,\r\n        items: [{\r\n            xtype: \"textfield\",\r\n            allowBlank: false,\r\n            anchor: \"100%\",\r\n            name: 'name',\r\n            height: 30,\r\n            regex: /^[A-Z][a-zA-Z0-9_]*$/,\r\n            regexText: \"名称须以大写字母开头，且只能包含数字、字母、下划线\",\r\n            fieldLabel: '将<span style=\"color:red;font-weight:bold\">' + copyNode.text + '</span>复制为',\r\n            emptyText: \"请输入复合组件名称\"\r\n        }, {\r\n            xtype: \"textarea\",\r\n            allowBlank: true,\r\n            name: 'remark',\r\n            anchor: \"100%\",\r\n            fieldLabel: \"备注\",\r\n            emptyText: \"请输入组件说明\"\r\n        }]\r\n    })\r\n    var win = new Ext.Window({\r\n        width: 440,\r\n        height: 260,\r\n        title: '复合组件粘贴',\r\n        hidden: false,\r\n        layout: \"fit\",\r\n        border: false,\r\n        modal: true,\r\n        items: form,\r\n        fbar: [{\r\n            text: '确定',\r\n            handler: function() {\r\n                if (form.getForm().isValid()) {\r\n                    var values = form.form.getValues()\r\n                    /*保存前校验*/\r\n                    if (values.name == \"\" || values.remark == \"\") {\r\n                        Ext.Msg.alert(\"提示\", \"组件名和备注不能为空\")\r\n                        return false;\r\n                    }\r\n                    saveModelInfo(_tree, copyNode.text, values.name, values.remark, function(result) {\r\n                        var arr = ['img', 'css', 'file', 'js'];\r\n                        // 复制组件下资源文件\r\n                        var hwFao = new HwFao(vmdSettings.vmdFileServiceIp || vmdSettings.dataServiceIp, \"vmd\"); //地址:端口和存储标识(服务管理员分配)\r\n                        arr.forEach(function(item, index) {\r\n                            var filepath = 'components/ux/' + copyNode.text + '/' + copyNode.version + '/' + item;\r\n                            var destPath = 'components/ux/' + result.text + '/' + result.version + '/' + item;\r\n                            hwFao.copy(filepath, destPath, function(res) {\r\n                                if (res.isSucceed) {\r\n                                    var str = JSON.stringify(res.data);\r\n                                    // alert(str);\r\n                                } else {\r\n                                    Ext.Msg.alert(\"提示\", res.errMsg);\r\n                                }\r\n                            }, function(res) {\r\n                                Ext.Msg.alert(\"提示\", res);\r\n                            });\r\n                        })\r\n                        copyNodeId = \"\";\r\n                        win.close()\r\n                    })\r\n                }\r\n            }\r\n        }, {\r\n            text: '取消',\r\n            handler: function() {\r\n                win.close()\r\n            }\r\n        }]\r\n    });\r\n    win.show()\r\n    form.form.setValues({\r\n        name: copyNode.text + '1'\r\n    })\r\n}\r\n\r\nfunction expUx(_tree) {\r\n    var nodepath;\r\n    if (_tree.getSelectedItemId() && _tree.itemObj[_tree.getSelectedItemId()])\r\n        nodepath = _tree.itemObj[_tree.getSelectedItemId()].path;\r\n    var expUxsWin = new vmd.window({\r\n        title: \"模块导出\",\r\n        url: vmd.core.getVirtualPath() + \"/modules/eQ9ULgcVb1/hw61499a5d/hwOzCoaxTN.html\",\r\n        auto: false,\r\n        height: 520,\r\n        width: 500,\r\n        maximizable: false,\r\n        enableLoading: true,\r\n        resizable: false,\r\n        params: {\r\n            nodepath: nodepath,\r\n            uxType: _tree.uxType,\r\n            r: new Date().getTime()\r\n        }\r\n    })\r\n    expUxsWin.show();\r\n    window.expUxsWin = expUxsWin;\r\n}\r\nvar myMask;\r\n\r\nfunction impUx(_tree) {\r\n    var uploader = Uploader.getUploader();\r\n    var uploaderwin = new vmd.window({\r\n        items: Uploader,\r\n        auto: false,\r\n        height: 500,\r\n        width: 655,\r\n        maximizable: false,\r\n        resizable: false,\r\n        closeAction: 'hide',\r\n        title: \"文件上传\"\r\n    })\r\n    Uploader.show()\r\n    uploaderwin.show();\r\n    uploaderwin.hide(); //上传接口\r\n    uploader.upload(vmdSettings.vmdFileServiceIp || vmdSettings.dataServiceIp, \"expandimp/expandimp/impuxs\", uploaderwin, function(fileList) {\r\n        //上传成功回调\r\n        var state = true;\r\n        var proName = \"\";\r\n        var proId = \"\";\r\n        var impPath = \"\";\r\n        var impUser = \"\";\r\n        var impDate = \"\";\r\n        //组织导入项目信息\r\n        if (fileList.length > 0) {\r\n            if (fileList[0].state == 'SUCCESS') {\r\n                state = true\r\n                if (fileList[0].title.split(\".\").length == 2 && fileList[0].title.split(\".\")[1] == 'zip') {\r\n                    var zipInfos = fileList[0].title.split(\"-\");\r\n                    impPath = \"expandimp/impuxs/\" + fileList[0].title;\r\n                } else {\r\n                    Ext.Msg.alert(\"提示\", '导入标准的zip复合组件导出文件')\r\n                    return;\r\n                }\r\n            } else\r\n                return;\r\n        }\r\n        var importSer = function() {\r\n            myMask = new Ext.LoadMask(document.body, {\r\n                msg: \"正在检测比对,请稍后...\",\r\n                msgCls: 'z-index:10000;'\r\n            });\r\n            myMask.show();\r\n            //调用服务，解压文件，并在服务器端比对数据并返回。\r\n            vmd.ajax({\r\n                url: \"/expandimp/api/uxcheck\",\r\n                type: 'post',\r\n                timeout: 120000,\r\n                data: {\r\n                    impUser: impUser,\r\n                    impDate: impDate,\r\n                    impPath: impPath\r\n                },\r\n                success: function(result) {\r\n                    myMask.hide();\r\n                    if (result.type == \"success\") {\r\n                        //返回模块信息比对信息\r\n                        window.UxsCheckInfos = {\r\n                            checkInfo: result.checkInfo,\r\n                            path: impPath,\r\n                            impUser: impUser,\r\n                            impDate: impUser\r\n                        }\r\n                        var UxsCheckWin = new vmd.window({\r\n                            title: \"导入复合组件对比\",\r\n                            url: vmd.core.getVirtualPath() + \"/modules/eQ9ULgcVb1/hw61499a5d/hwdhrlDbxS.html\",\r\n                            auto: false,\r\n                            height: 600,\r\n                            width: 520,\r\n                            maximizable: false,\r\n                            enableLoading: true,\r\n                            resizable: true,\r\n                            params: {\r\n                                categoryId: _tree.getSelectedItemId(),\r\n                                uxType: _tree.uxType,\r\n                                r: new Date().getTime()\r\n                            }\r\n                        })\r\n                        uploaderwin.hide();\r\n                        UxsCheckWin.show();\r\n                        window.UxsCheckWin = UxsCheckWin;\r\n                    } else\r\n                        Ext.Msg.alert(\"提示\", result.msg)\r\n                },\r\n                error: function(msg) {\r\n                    myMask.hide();\r\n                }\r\n            })\r\n        }\r\n        importSer()\r\n    }, \"vmd\")\r\n}\r\n//页面加载完后事件\r\nfunction MyViewport_afterrender(sender) {\r\n    div.show();\r\n    UserControlInfo.hide();\r\n    div.update(\"<iframe  id='iframe_page' src='\" + vmd.core.getVirtualPath() + \"/modules/eQ9ULgcVb1/eQ9ULgcVb5/hw03cb4931.html' width=100% height=100% frameborder=0  ></iframe>\");\r\n    MyP_ModelTree.onBodyResize();\r\n    getZJData(hwTree);\r\n}\r\n\r\nfunction saveModelInfo(_tree, oldname, name, remark, callback) {\r\n    var mytree = _tree;\r\n    var newnode = mytree.newnode;\r\n    var selId = mytree.getSelectedItemId();\r\n    var selnode = mytree.itemObj[selId];\r\n    var id = newGuid(10);\r\n    var category_id = selId;\r\n    //var Project_id = selnode.projectId;\r\n    var codeid = newGuid(32);\r\n    var name = name;\r\n    var remark = remark;\r\n    var type = \"0\";\r\n    var copyNode = mytree.itemObj[copyNodeId];\r\n    //编辑\r\n    checkName(name, function() {\r\n        //保存模块基础信息\r\n        var version = \"1.0\";\r\n        hwDas.ajax({\r\n            das: {\r\n                idedas: true\r\n            },\r\n            url: \"CDEServcie/resource/zygl\",\r\n            type: 'post',\r\n            timeout: 50000,\r\n            params: {},\r\n            headers: {\r\n                Ecylogin: Ext.util.Cookies.get('EcyLogin') || Ext.util.Cookies.get('ecyLogin')\r\n            },\r\n            data: [{\r\n                editid: newGuid(10),\r\n                id: id,\r\n                code: codeid,\r\n                type: mytree.uxType,\r\n                name: name,\r\n                uxname: copyNode.uxname || \"\",\r\n                edit_reason: remark,\r\n                category_id: category_id,\r\n                //project_id: Project_id,\r\n                shared: \"1\",\r\n                version: version,\r\n                readdate: Ext.Date.dateFormat(new Date(), 'Y-m-d H:i:s'),\r\n                filepath: '/components/vmd/' + name + '.vmd',\r\n                row_created_by: Ext.util.Cookies.get('userName'),\r\n                row_created_date: Ext.Date.dateFormat(new Date(), 'Y-m-d H:i:s'),\r\n                remark: remark\r\n            }],\r\n            success: function(result) {\r\n                mytree.insertNewChild(selId, id, name);\r\n                mytree.setItemImage2(id, \"tree/model.png\", \"tree/model.png\", \"tree/model.png\")\r\n                var treenode = mytree.item(id);\r\n                //treenode.projectId = Project_id;\r\n                if (treenode) {\r\n                    treenode.isModel = true;\r\n                    treenode.text = name;\r\n                    treenode.uxname = copyNode.uxname || \"\";\r\n                    treenode.createuser = Ext.util.Cookies.get('userName');\r\n                    treenode.createtime = Ext.Date.dateFormat(new Date(), 'Y-m-d H:i:s');\r\n                    treenode.changetime = Ext.Date.dateFormat(new Date(), 'Y-m-d H:i:s');\r\n                    treenode.changeuser = Ext.util.Cookies.get('userName');\r\n                    treenode.remark = remark;\r\n                    treenode.version = version;\r\n                    treenode.code = codeid;\r\n                    treenode.type = mytree.uxType;\r\n                    treenode.shared = \"1\";\r\n                    treenode.newnode = false;\r\n                }\r\n                mytree.itemObj[id] = treenode;\r\n                mytree.selectItem(id, false, false);\r\n                mytree.newnode = false;\r\n                vmd.core.saveAsCmp(oldname, version, name, function() {\r\n                    callback(treenode);\r\n                })\r\n                getZJData(mytree);\r\n            },\r\n            error: function(msg) {\r\n                Ext.Msg.alert(\"提示\", \"复制复合组件信息失败\")\r\n                return;\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nfunction checkName(name, callback) {\r\n    hwDas.ajax({\r\n        das: {\r\n            idedas: true\r\n        },\r\n        url: \"CDEServcie/resource/info\",\r\n        type: 'get',\r\n        timeout: 50000,\r\n        params: {\r\n            name: name\r\n        },\r\n        success: function(result) {\r\n            if (result.data[0].datas.length <= 0) {\r\n                if (callback)\r\n                    callback()\r\n            } else {\r\n                Ext.Msg.alert(\"提示\", \"该组件已存在，请重新命名组件！\")\r\n                return;\r\n            }\r\n        },\r\n        error: function(msg) {\r\n            Ext.Msg.alert(\"提示\", \"保存模块版本信息失败\")\r\n            return;\r\n        }\r\n    })\r\n}\r\n// 获取组建信息\r\nfunction getZJData(_tree) {\r\n    var mytree = _tree;\r\n    if (!mytree)\r\n        return;\r\n    hwDas.ajax({\r\n        das: {\r\n            idedas: true\r\n        },\r\n        url: \"CDEServcie/resource/zygl\",\r\n        type: 'get',\r\n        timeout: 50000,\r\n        params: {\r\n            type: mytree.uxType\r\n        },\r\n        success: function(result) {\r\n            var datajson = result.data[0].datas;\r\n            for (var i = 0; i < datajson.length; i++) {\r\n                if (datajson[i].uxname && datajson[i].uxname != '') {\r\n                    datajson[i].text = datajson[i].name + '(' + datajson[i].uxname + ')'\r\n                } else {\r\n                    datajson[i].text = datajson[i].name\r\n                }\r\n            }\r\n            selectData = datajson\r\n            store.loadData(selectData);\r\n            queryCom.bindStore(store)\r\n            queryCom.setValue('');\r\n        },\r\n        error: function(msg) {\r\n            myMask.hide();\r\n            Ext.Msg.alert(\"提示\", \"获取复合组件信息失败\")\r\n        }\r\n    })\r\n    hwDas.ajax({\r\n        das: {\r\n            idedas: true\r\n        },\r\n        url: \"CDEServcie/resource/category\",\r\n        type: 'get',\r\n        timeout: 50000,\r\n        params: {\r\n            type: mytree.uxType\r\n        },\r\n        success: function(result) {\r\n            var datajson = result.data[0].datas;\r\n            cateData = datajson\r\n            console.log(cateData)\r\n        },\r\n        error: function(msg) {\r\n            myMask.hide();\r\n            Ext.Msg.alert(\"提示\", \"获取复合组件信息失败\")\r\n        }\r\n    })\r\n}\r\n// 组建检索\r\nfunction queryCom_afterrender(sender) {\r\n    store.loadData(selectData);\r\n    queryCom.displayField = 'text';\r\n    queryCom.valueField = 'id';\r\n}\r\n\r\nfunction queryCom_selectChanged(sender, combo, record, index) {\r\n    var id = record.data.id;\r\n    if (id == '' || id == null) {\r\n        return\r\n    }\r\n    hwTree.closeAllItems()\r\n    var cataId, pidArr = [],\r\n        k = 0;\r\n    for (var i = 0; i < selectData.length; i++) {\r\n        if (selectData[i].id == id) {\r\n            cataId = selectData[i].category_id;\r\n            break\r\n        }\r\n    }\r\n    if (cataId == '0') {\r\n        hwTree.selectItem(id, true, false);\r\n        return\r\n    }\r\n    pidArr.push(cataId);\r\n    queryParen(pidArr, cataId)\r\n    diGuiopen(pidArr, k, id)\r\n}\r\n// 查找被检索界面的所有父级分类，并按顺序放到数组中\r\nfunction queryParen(arr, cId) {\r\n    var pid;\r\n    for (var i = 0; i < cateData.length; i++) {\r\n        if (cateData[i].id == cId) {\r\n            pid = cateData[i].parent_id;\r\n        }\r\n    }\r\n    if (pid != '0') {\r\n        arr.unshift(pid);\r\n        queryParen(arr, pid)\r\n    }\r\n}\r\n// 递归函数从祖父级开始逐层展开节点\r\nfunction diGuiopen(arr, m, seleId) {\r\n    if (m >= arr.length) {\r\n        return\r\n    }\r\n    if (m == arr.length - 1) {\r\n        // var isLoad = hwTree.itemObj[arr[m]].loadChild;\r\n        if (hwTree.itemObj[arr[m]] && hwTree.itemObj[arr[m]].loadChild == true) {\r\n            hwTree.openItem(arr[m])\r\n            hwTree.selectItem(seleId, true, false);\r\n        } else {\r\n            OpenNOde(arr[m], function() {\r\n                hwTree.selectItem(seleId, true, false);\r\n            })\r\n        }\r\n    } else {\r\n        // var isLoad = hwTree.itemObj[arr[m]].loadChild;\r\n        if (hwTree.itemObj[arr[m]] && hwTree.itemObj[arr[m]].loadChild == true) {\r\n            hwTree.openItem(arr[m])\r\n            m++;\r\n            diGuiopen(arr, m, seleId)\r\n        } else {\r\n            OpenNOde(arr[m], function() {\r\n                m++;\r\n                diGuiopen(arr, m, seleId)\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nfunction OpenNOde(id, callback) {\r\n    var proId = id;\r\n    var mytree = hwTree;\r\n    mytree.newnode = false;\r\n    var hasChild = mytree.hasChildren(proId);\r\n    var selnode = mytree.itemObj[proId];\r\n    var selnodepath = selnode.path;\r\n    var projectId = \"\";\r\n    var childParentId = \"0\";\r\n    childParentId = proId\r\n    if (!selnode.loadChild && !selnode.isModel) {\r\n        //绑定项目下的资源目录\r\n        hwDas.ajax({\r\n            das: {\r\n                idedas: true\r\n            },\r\n            url: \"CDEServcie/resource/category\",\r\n            type: 'get',\r\n            timeout: 50000,\r\n            params: {\r\n                //project_id: projectId,\r\n                parent_id: childParentId,\r\n                type: mytree.uxType\r\n            },\r\n            success: function(result) {\r\n                var datajson = result.data[0].datas;\r\n                var treeDataJson = [];\r\n                for (var i = 0; i < datajson.length; i++) {\r\n                    mytree.insertNewChild(proId, datajson[i].id, datajson[i].name);\r\n                    mytree.setItemImage2(datajson[i].id, \"tree/folderClosed.gif\", \"tree/folderOpen.gif\", \"tree/folderClosed.gif\")\r\n                    mytree.insertNewChild(datajson[i].id, datajson[i].id + \"-0\", \"\");\r\n                    mytree.closeItem(datajson[i].id);\r\n                    var treenode = mytree.item(datajson[i].id);\r\n                    treenode.path = selnodepath + \"/\" + datajson[i].id;\r\n                    //treenode.projectId = projectId;\r\n                    if (treenode) {\r\n                        treenode.isFord = true;\r\n                        treenode.loadChild = false;\r\n                    }\r\n                    mytree.itemObj[datajson[i].id] = treenode;\r\n                }\r\n                if (callback) {\r\n                    callback();\r\n                }\r\n            },\r\n            error: function(msg) {\r\n                Ext.Msg.alert(\"提示\", \"获取模块信息失败\", function() {})\r\n            }\r\n        })\r\n        if (!selnode.loadChild) {\r\n            mytree.deleteItem(id + \"-0\", false);\r\n        }\r\n        selnode.loadChild = true;\r\n        //获取项目下的资源\r\n        hwDas.ajax({\r\n            das: {\r\n                idedas: true\r\n            },\r\n            url: \"CDEServcie/resource/zygl\",\r\n            type: 'get',\r\n            timeout: 50000,\r\n            params: {\r\n                category_id: childParentId,\r\n                //project_id: projectId,\r\n                type: mytree.uxType\r\n            },\r\n            success: function(result) {\r\n                var datajson = result.data[0].datas;\r\n                var treeDataJson = [];\r\n                for (var i = 0; i < datajson.length; i++) {\r\n                    mytree.insertNewChild(proId, datajson[i].id, datajson[i].name);\r\n                    mytree.setItemImage2(datajson[i].id, \"tree/model.png\", \"tree/model.png\", \"tree/model.png\")\r\n                    var treenode = mytree.item(datajson[i].id);\r\n                    treenode.path = selnodepath + \"/\" + datajson[i].id;\r\n                    //treenode.projectId = projectId;\r\n                    if (treenode) {\r\n                        treenode.isModel = true;\r\n                        treenode.createuser = datajson[i].row_created_by;\r\n                        treenode.createtime = datajson[i].row_created_date;\r\n                        treenode.changetime = datajson[i].row_changed_date;\r\n                        treenode.changeuser = datajson[i].row_changed_by;\r\n                        treenode.uxname = datajson[i].uxname;\r\n                        treenode.code = datajson[i].code;\r\n                        treenode.version = datajson[i].version;\r\n                        treenode.type = datajson[i].type;\r\n                        treenode.shared = datajson[i].shared;\r\n                        treenode.remark = datajson[i].remark;\r\n                    }\r\n                    mytree.itemObj[datajson[i].id] = treenode;\r\n                }\r\n                if (callback) {\r\n                    callback();\r\n                }\r\n            },\r\n            error: function(msg) {\r\n                Ext.Msg.alert(\"提示\", \"获取复合组件信息失败\")\r\n            }\r\n        })\r\n    } else {}\r\n}\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//处理属性框组件的操作\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////\r\nfunction hwPTree_nodeClick(sender, id) {\r\n    treeNodeClick(hwPTree, id)\r\n}\r\n\r\nfunction hwPTree_onOpenEnd(sender, id, state) {\r\n    TreeOpenEnd(hwPTree, id, state)\r\n}\r\n\r\nfunction hwTree_beforerender(sender) {\r\n    hwTree.uxType = '4'\r\n}\r\n\r\nfunction hwPTree_beforerender(sender) {\r\n    hwPTree.uxType = '5'\r\n}\r\n\r\nfunction hwPTree_afterrender(sender) {\r\n    treeInit(hwPTree)\r\n    hwPTree.attachEvent(\"onDrag\", function(sId, tId, id, sObject, tObject) {\r\n        return _treeDrag(sId, tId, id, sObject, tObject, hwPTree)\r\n    });\r\n    hwPTree.attachEvent(\"onDrop\", function(sId, tId, id, sObject, tObject) {\r\n        _treeDrop(sId, tId, id, sObject, tObject, hwPTree)\r\n    });\r\n}\r\n\r\nfunction logserach_click(sender, e) {\r\n    window.open(vmd.virtualPath + '/system/modules/eQ9ULgcVb1/hwsit8zolX/hwbdbf1fe6.html', \"复合组件日志查询\");\r\n}","vmdcss":".x-combo-list-item{\n    margin: 5px 0\n}\n.div-hove:hover{\n    background-color: rgba(255,255,255,0.3);\n}\n.div-hove{\n    cursor: pointer\n}","vmdprops":"\"\"","type":"module","vmdcmpdeps":[],"vmdresource":"{\"components\":[{\"cid\":\"vmdrescsss\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdresjss\",\"layoutConfig\":{},\"userConfig\":{},\"cn\":[{\"cid\":\"resjs\",\"id\":\"project.config.js\",\"layoutConfig\":{},\"userConfig\":{}}]},{\"cid\":\"vmdresimgs\",\"layoutConfig\":{},\"userConfig\":{}}]}"}