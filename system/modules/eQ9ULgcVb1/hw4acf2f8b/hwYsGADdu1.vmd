{"vmdversion":"vmd2.0.5.191111","vmdlayout":"{\"components\":[{\"cid\":\"viewport\",\"id\":\"MyViewport\",\"layoutConfig\":{},\"userConfig\":{\"layout\":\"anchor\",\"afterrender\":\"MyViewport_afterrender\",\"beforerender\":\"MyViewport_beforerender\"},\"cn\":[{\"cid\":\"panel\",\"id\":\"panel\",\"layoutConfig\":{},\"userConfig\":{\"x\":0,\"y\":10,\"anchor\":\"100% -40\",\"border\":false,\"header\":false,\"layout\":\"border\",\"bodyStyle\":\"padding:10px\"},\"cn\":[{\"cid\":\"container\",\"id\":\"div2\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"west\",\"layout\":\"border\",\"width\":234},\"cn\":[{\"cid\":\"vmdTreeEx\",\"id\":\"tree\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"center\",\"parentField\":\"pid\",\"valueField\":\"id\",\"textField\":\"name\",\"loadType\":\"全部加载\",\"rootValue\":\"00000000000000000000000000000000\",\"hideRoot\":true,\"folderValue\":\"1\",\"leafValue\":\"0\",\"beforerender\":\"tree_beforerender\",\"nodeclick\":\"tree_nodeclick\",\"afterrender\":\"tree_afterrender\",\"folderImg\":\"/system/modules/eQ9ULgcVb1/img/folderClosed.gif\",\"leafImg\":\"/system/modules/eQ9ULgcVb1/img/flownode.png\",\"afterBindData\":\"tree_afterBindData\",\"style\":\"font-size: 16px\",\"cls\":\"fltree\"}}]},{\"cid\":\"container\",\"id\":\"div1\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"center\",\"autoScroll\":true,\"disabled\":false,\"html\":\"<iframe id='iframe_wf_page' src='' width=100% height=100% frameborder=0>\\n</iframe>\"}}]},{\"cid\":\"panel\",\"id\":\"panel1\",\"layoutConfig\":{\"align\":\"middle\",\"pack\":\"center\"},\"userConfig\":{\"x\":-2,\"y\":110,\"height\":40,\"anchor\":\"100%\",\"header\":false,\"layout\":\"hbox\"},\"cn\":[{\"cid\":\"vmdButton\",\"id\":\"button\",\"layoutConfig\":{},\"userConfig\":{\"text\":\"确定\",\"type\":\"info\",\"click\":\"button_click\"}},{\"cid\":\"container\",\"id\":\"div\",\"layoutConfig\":{},\"userConfig\":{\"width\":30,\"border\":false}},{\"cid\":\"vmdButton\",\"id\":\"button1\",\"layoutConfig\":{},\"userConfig\":{\"text\":\"取消\",\"click\":\"button1_click\"}}]}]},{\"cid\":\"vmddataset\",\"id\":\"数据\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdvariable\",\"id\":\"变量\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdsubviewport\",\"id\":\"SubView_Window\",\"layoutConfig\":{},\"userConfig\":{}}]}","vmdevents":"var arrVisualSelectedNodes = [];\r\n\r\n//\r\nvar myFlowInfo = {}; //记录流程基础信息\r\nvar myConfigInfo = { //记录节点的基础信息\r\n    modelId: \"\",\r\n    modelName: \"\",\r\n    variantNode: []\r\n};\r\n//myConfigInfo = {};\r\n//记录打开时已经记录的节点信息，留作备份使用\r\nvar defaultConfigInfo = {};\r\nvar defalueFlowInfo = {}\r\n\r\nif(parent.vmd.workspace)\r\n    vmd.workspace = parent.vmd.workspace;\r\n\r\nvar elogin = Ext.util.Cookies.get('ecyLogin');\r\n\r\nvar myMask = new Ext.LoadMask(Ext.getBody(), {\r\n    msg: \"数据加载中,请稍后...\",\r\n    msgCls: 'z-index:10000;'\r\n});\r\n\r\nvar comData = [{\r\n    name: '张三',\r\n    id: 12,\r\n    pid: \"000\",\r\n    type: \"0\"\r\n}]\r\nvar treeStore = new vmd.data.Store({\r\n    data: comData,\r\n    fields: ['id', 'name', 'pid', 'type']\r\n})\r\n\r\nfunction button_click(sender) {\r\n    try {\r\n        var strSelNodeInfo = getVisualSelectedNodesInfo()\r\n        var selNodes = eval(\"(\" + strSelNodeInfo + \")\")\r\n        var strartid = \"\"\r\n        if(selNodes && selNodes.length > 0)\r\n            strartid = selNodes[0].variantProcess.taskNodeid\r\n        var remNodeIds = [] //记录需要移除的节点id  在流程图的节点信息中移除模块的信息。   \r\n        //设置界面的节点选择\r\n        ///---------------------------------------------------------------------------------------------------------\r\n        ///先移除多余的节点  模块中的节点信息\r\n        ///---------------------------------------------------------------------------------------------------------\r\n        for(var i = myConfigInfo.variantNode.length - 1; i >= 0; i--) {\r\n            var hasNode = false;\r\n            for(var k = 0; k < selNodes.length; k++) {\r\n                if(myConfigInfo.variantNode[i].taskNodeid == selNodes[k].variantNode.taskNodeid) {\r\n                    hasNode = true\r\n                    break;\r\n                }\r\n            }\r\n            if(!hasNode) {\r\n                remNodeIds.push(myConfigInfo.variantNode[i].taskNodeid)\r\n                vmd.Array.remove(myConfigInfo.variantNode, myConfigInfo.variantNode[i]);\r\n            }\r\n        }\r\n        ///---------------------------------------------------------------------------------------------------------\r\n        ///添加新节点   模块中的节点信息\r\n        ///---------------------------------------------------------------------------------------------------------\r\n        for(var k = 0; k < selNodes.length; k++) {\r\n            var hasNode = false;\r\n            for(var i = myConfigInfo.variantNode.length - 1; i >= 0; i--) {\r\n                if(myConfigInfo.variantNode[i].taskNodeid == selNodes[k].variantNode.taskNodeid) {\r\n                    hasNode = true\r\n                    break;\r\n                }\r\n            }\r\n            //提取工作流程图中的 节点规则定义\r\n            var strModule = selNodes[k].variantNode.formkeydefinition\r\n            var strrule = \"\"\r\n            if(strModule) {\r\n                try {\r\n                    obj = Ext.decode(strModule);\r\n                    strrule = obj.rule || \"\"\r\n                } catch (ex) {\r\n                    strrule = \"\"\r\n                }\r\n            } else strrule = \"\"\r\n            //如果不存在该节点，则添加\r\n            if(!hasNode) {\r\n                selNodes[k].variantNode.formProperties = selNodes[k].variantNode.formProperties || []\r\n                //添加 模块中的节点信息 需要将rule添加进来\t\t\t\r\n                //添加规则变量\r\n                selNodes[k].variantNode.formProperties.push({\r\n                    name: \"调用规则\",\r\n                    id: \"调用规则\",\r\n                    value: strrule\r\n                })\r\n                myConfigInfo.variantNode.push(selNodes[k].variantNode);\r\n            } else { //如果已存在节点,则修改rule 规则\r\n                //递归当前节点变量\r\n                var cNode = myConfigInfo.variantNode[i]\r\n                if(cNode.formProperties) { //节点中是否存在变量\r\n                    //先循环设置调用规则的值\r\n                    for(var m = 0; m < cNode.formProperties.length; m++) {\r\n                        if(cNode.formProperties[m].id == \"调用规则\") {\r\n                            cNode.formProperties[m].value = strrule\r\n                            break;\r\n                        }\r\n                    }\r\n                    //遍历来判断节点中是否新增了变量，并添加到列表中\r\n                    var selnodevars = selNodes[k].variantNode.formProperties || []\r\n                    for(var j = 0; j < selnodevars.length; j++) {\r\n                        var hasVar = false;\r\n                        for(var m = 0; m < cNode.formProperties.length; m++) {\r\n                            if(selnodevars[j].id == cNode.formProperties[m].id) {\r\n                                hasVar = true;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if(!hasVar) {\r\n                            cNode.formProperties.push(selnodevars[j])\r\n                        }\r\n                    }\r\n                    //遍历是否移除了变量\r\n                    for(var m = cNode.formProperties.length - 1; m >= 0; m--) {\r\n                        var hasVar = false;\r\n                        if(cNode.formProperties[m].id == \"调用规则\") {} else {\r\n                            for(var j = 0; j < selnodevars.length; j++) {\r\n                                if(selnodevars[j].id == cNode.formProperties[m].id) {\r\n                                    hasVar = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                            if(!hasVar)\r\n                                vmd.Array.remove(cNode.formProperties, cNode.formProperties[m]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if(!myConfigInfo.variantProcess) {\r\n                myConfigInfo.variantProcess = selNodes[k].variantProcess.formProperties || [];\r\n            }\r\n        }\r\n        ///---------------------------------------------------------------------------------------------------------\r\n        ///保存工作流\r\n        ///添加工作流节点到工作留下,  更新流程的表单绑定信息\r\n        ///先组织节点表单的对应绑定关系\r\n        ///---------------------------------------------------------------------------------------------------------\r\n        var bindcount = 0;\r\n        var bindNodeList = [];\r\n        var isString = false //记录之前的模版信息是否为字符，如果为字符，则在保存后会变为对象存储\r\n        var moduleId = parent.getUrlParam(\"id\");\r\n        var modulePath = parent.getUrlParam(\"path\")\r\n        var moduleName = parent.getUrlParam(\"name\")\r\n        var newmoduleinfo = {\r\n            moduleId: moduleId,\r\n            moduleName: moduleName,\r\n            modulePath: modulePath,\r\n            remark: \"\"\r\n        }\r\n        //添加当前模块到选择的流程图节点中\r\n        for(var i = 0; i < selNodes.length; i++) {\r\n            var strModule = selNodes[i].variantNode.formkeydefinition\r\n            var obj = {}\r\n            if(strModule) {\r\n                try {\r\n                    obj = Ext.decode(strModule);\r\n                } catch (ex) {\r\n                    obj = strModule\r\n                }\r\n            }\r\n            if(strModule=='undefined')\r\n            {obj ={}}\r\n            var newmodulesinfo = []\r\n            if(typeof(obj) == \"string\") {\r\n                isString = true\r\n                var oldmoduleinfo = {\r\n                    moduleId: obj,\r\n                    moduleName: \"\",\r\n                    modulePath: \"\",\r\n                    remark: \"\"\r\n                }\r\n                if(obj == parent.getUrlParam(\"id\")) {\r\n                    newmodulesinfo.push(newmoduleinfo)\r\n                } else {\r\n                    newmodulesinfo.push(oldmoduleinfo)\r\n                    newmodulesinfo.push(newmoduleinfo)\r\n                }\r\n                bindNodeList.push({\r\n                    nodeId: selNodes[i].variantNode.taskNodeid,\r\n                    modulesInfo: Ext.encode({\r\n                        modulesInfo: newmodulesinfo,\r\n                        rule: \"\"\r\n                    })\r\n                })\r\n            } else { //先判断有没有绑定该模块\r\n                if(obj.modulesInfo) {\r\n                    var hasModule = false\r\n                    for(var k = 0; k < obj.modulesInfo.length; k++) {\r\n                        if(obj.modulesInfo[k].moduleId == moduleId)\r\n                            hasModule = true\r\n                    }\r\n                    if(!hasModule)\r\n                        obj.modulesInfo.push(newmoduleinfo)\r\n                }\r\n                bindNodeList.push({\r\n                    nodeId: selNodes[i].variantNode.taskNodeid,\r\n                    modulesInfo: Ext.encode(obj)\r\n                })\r\n            }\r\n        }\r\n        //移除取消的节点和模块绑定关系\r\n        for(var i = 0; i < remNodeIds.length; i++) {\r\n            var removeNodeinfo = []\r\n            var strModule = \"\"\r\n            if(getNodeModuleInfo)\r\n                strModule = getNodeModuleInfo(remNodeIds[i])\r\n            var obj = {}\r\n            try {\r\n                obj = Ext.decode(strModule);\r\n            } catch (ex) {\r\n                obj = strModule\r\n            }\r\n            if(strModule=='undefined')\r\n            {obj ={}}\r\n            if(typeof(obj) == \"string\") {\r\n                isString = true\r\n                var oldmoduleinfo = {\r\n                    moduleId: obj,\r\n                    moduleName: \"\",\r\n                    modulePath: \"\",\r\n                    remark: \"\"\r\n                }\r\n                if(obj == parent.getUrlParam(\"id\")) {\r\n                    newmodulesinfo = []\r\n                } else {\r\n                    newmodulesinfo.push(oldmoduleinfo)\r\n                }\r\n                bindNodeList.push({\r\n                    nodeId: remNodeIds[i],\r\n                    modulesInfo: Ext.encode({\r\n                        modulesInfo: newmodulesinfo,\r\n                        rule: \"\"\r\n                    })\r\n                })\r\n            } else { //先判断有没有绑定该模块\r\n                if(obj.moduleInfo) {\r\n                    for(var k = 0; k < obj.modulesInfo.length; k++) {\r\n                        if(obj.modulesInfo[k].moduleId == moduleId) {\r\n                            vmd.Array.remove(obj.modulesInfo, obj.modulesInfo[k])\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                bindNodeList.push({\r\n                    nodeId: remNodeIds[i],\r\n                    modulesInfo: Ext.encode(obj)\r\n                })\r\n            }\r\n        }\r\n\r\n        //保存流程方法，更新流程和表单的绑定关系\r\n        var savemodulesInfo = function() {\r\n            if(bindNodesForm)\r\n                bindNodesForm(bindNodeList, function(aa) {\r\n                    var mytree = tree;\r\n                    var selnode = tree.getSelNode()\r\n                    var flowInfo = {\r\n                        modelId: selnode.id,\r\n                        modelName: selnode.text\r\n                    } //parent.xds.vmd.getTreeNodeById(parent.edValue.id).component.setConfig(\"modelName\",mytree.getSelectedItemText())\r\n                    window.vmdReturnValue = selnode.text;\r\n                    //此处获取选择的节点，并把节点信息添加到节点属性里边\r\n                    //调用方法设置节点信息的属性值\r\n                    /////\r\n                    if(parent && parent.xds && parent.xds.active && parent.xds.active.component) {\r\n                        wfcomp = parent.xds.active.component\r\n                        myConfigInfo.modelId = selnode.id\r\n                        myConfigInfo.startNodeId = strartid\r\n                        wfcomp.setConfig(\"flowName\", selnode.text)\r\n                        wfcomp.setConfig(\"flowInfo\", Ext.encode(flowInfo))\r\n                        wfcomp.setConfig(\"configInfo\", Ext.encode(myConfigInfo))\r\n                        parent.xds.props.refresh()\r\n                    }\r\n                    parent.edClose(true);\r\n                })\r\n        }\r\n        ///在保存信息前，先进行提示，\r\n        if(isString)\r\n            Ext.Msg.confirm(\"提示\", \"流程中模块信息记录的为模块ID，确定后将修改为模块对象，待办获取模块部分需要进行相应的调整。确定要修改么？\", function(type) {\r\n                if(type == \"yes\") {\r\n                    savemodulesInfo();\r\n                } else\r\n                    return;\r\n            })\r\n        else\r\n            savemodulesInfo()\r\n    } catch (exc) {\r\n        vmd.alert(\"提示\", \"绑定节点时出错，请联系管理员。\\n错误信息：\" + exc)\r\n    }\r\n\r\n}\r\n\r\nfunction button1_click(sender) {\r\n    parent.edClose();\r\n}\r\n\r\nfunction MyViewport_afterrender(sender) {}\r\n\r\nfunction MyViewport_beforerender(sender) {\r\n    myFlowInfo = Ext.decode(parent.edValue.flowInfo) || {}\r\n    myConfigInfo = Ext.decode(parent.edValue.configInfo) || {\r\n        modelId: \"\",\r\n        modelName: \"\",\r\n        variantNode: []\r\n    }\r\n    //复制\r\n    defaultConfigInfo = Ext.clone(myConfigInfo) || {};\r\n    defaultFlowInfo = Ext.clone(myFlowInfo) || {};\r\n    //\r\n}\r\n\r\nfunction tree_beforerender(sender) {\r\n    tree.nodeMarkFiled = \"type\"\r\n    tree.store = treeStore;\r\n}\r\n\r\nvar preSelNode; //记录选中流程。\r\nfunction tree_nodeclick(sender, node, e) {\r\n    if(node.nodeDataJson.type == \"0\" && preSelNode != node) {\r\n        preSelNode = node\r\n        if(myFlowInfo.modelId != node.id) { //当切换的节点不是初始化节点时处理\r\n            myConfigInfo = {\r\n                modelId: \"\",\r\n                modelName: \"\",\r\n                variantNode: []\r\n            }\r\n            window.arrVisualSelectedNodes = []; //切换节点后，设置默认选择项为空\r\n\r\n        } else { //当切换的节点为初始化节点时处理\r\n            myConfigInfo = Ext.decode(parent.edValue.configInfo) || {\r\n                modelId: \"\",\r\n                modelName: \"\",\r\n                variantNode: []\r\n            }\r\n            if(myConfigInfo && myConfigInfo.variantNode) {\r\n                for(var i = 0; i < myConfigInfo.variantNode.length; i++) {\r\n                    window.arrVisualSelectedNodes.push(myConfigInfo.variantNode[i].taskNodeid)\r\n                }\r\n            }\r\n        }\r\n        Ext.getDom(\"iframe_wf_page\").src = \"/activiti/modeler-visualnew.html?mode=visualmultiple&modelId=\" + node.id + \"&info=kermit\";\r\n    }\r\n}\r\n\r\nfunction workflowModelSel(value) {}\r\nwindow.workflowModelSel = workflowModelSel\r\n\r\nfunction tree_afterrender(sender) {\r\n    var firstNode = \"\";\r\n    var elogin = Ext.util.Cookies.get('ecyLogin');\r\n    myMask.show();\r\n    var workflowIp = vmdSettings.workflowIp;\r\n    if(parent.vmd.workspace) {\r\n        workflowIp = parent.vmd.workspace.workflowIp || vmdSettings.workflowIp\r\n    } else if(parent.parent.vmd.workspace) {\r\n        workflowIp = parent.parent.vmd.workspace.workflowIp || vmdSettings.workflowIp\r\n    }\r\n    hwDas.ajax({\r\n        url: \"http://\" + workflowIp + \"/activiti-rest/service/repository/categorys?info=kermit&size=100000\",\r\n        type: 'get',\r\n        timeout: 5000,\r\n        params: {},\r\n        success: function(result) {\r\n            var storeData = [];\r\n            for(var i = 0; i < result.data.length; i++) {\r\n                storeData.push({\r\n                    id: result.data[i].id,\r\n                    name: result.data[i].name,\r\n                    pid: result.data[i].superid,\r\n                    type: \"1\"\r\n                })\r\n            }\r\n            hwDas.ajax({\r\n                url: \"http://\" + workflowIp + \"/activiti-rest/service/repository/hwmodels?info=kermit&size=100000\",\r\n                type: 'get',\r\n                timeout: 5000,\r\n                params: {},\r\n                success: function(result) {\r\n                    for(var i = 0; i < result.data[0].datas.length; i++) {\r\n                        storeData.push({\r\n                            id: result.data[0].datas[i].ID,\r\n                            name: result.data[0].datas[i].NAME,\r\n                            pid: result.data[0].datas[i].CATEGORYID,\r\n                            type: \"0\"\r\n                        })\r\n                    }\r\n                    treeStore = new vmd.data.Store({\r\n                        data: storeData,\r\n                        fields: ['id', 'name', 'pid', 'type']\r\n                    })\r\n                    tree.bindStore(treeStore, true);\r\n                    myMask.hide();\r\n                },\r\n                error: function(msg) {\r\n                    myMask.hide();\r\n                    Ext.Msg.alert(\"提示\", \"获取流程列表失败\", function() {})\r\n                }\r\n            })\r\n        },\r\n        error: function(msg) {\r\n            myMask.hide();\r\n            Ext.Msg.alert(\"提示\", \"获取分类节点信息失败\", function() {})\r\n        }\r\n    })\r\n}\r\nwindow.arrVisualSelectedNodes = []\r\n//数组件绑定数据集之后，并默认加载流程图\r\nfunction tree_afterBindData(sender) {\r\n    var modelId = myFlowInfo.modelId;\r\n    var snode = tree.getNodeById(modelId)\r\n    window.arrVisualSelectedNodes = []\r\n    if(myConfigInfo && myConfigInfo.variantNode) {\r\n        for(var i = 0; i < myConfigInfo.variantNode.length; i++) {\r\n            window.arrVisualSelectedNodes.push(myConfigInfo.variantNode[i].taskNodeid)\r\n        }\r\n        if(snode) {\r\n            tree.expandPath(snode.getPath())\r\n            snode.select()\r\n            Ext.getDom(\"iframe_wf_page\").src = \"/activiti/modeler-visualnew.html?mode=visualmultiple&modelId=\" + modelId + \"&info=kermit\";\r\n            //div1.update(\"<iframe  id='iframe_page' src='\" + \"/activiti/modeler-visualnew.html?mode=visualmultiple&modelId=\" + modelId + \"&info=kermit' width=100% height=100% frameborder=0  ></iframe>\");\r\n        }\r\n    }\r\n\r\n}\r\n//工作流点击时调用的方法，用于传递当前选中的节点\r\nfunction openConfig(a, state) {\r\n    return\r\n    //传递的当前节点的调用规则\r\n    var noderule = \"\"\r\n    //判断当前选中节点是否已经添加\r\n    var nodeinfo = Ext.decode(a)\r\n    var taskNodeName = nodeinfo.variantNode.taskNodeName;\r\n    var taskNodeId = nodeinfo.variantNode.taskNodeid;\r\n    var hasnode = false;\r\n    var nindex = -1\r\n    if(!myConfigInfo.variantNode)\r\n        myConfigInfo.variantNode = []\r\n    for(var i = 0; i < myConfigInfo.variantNode.length; i++) {\r\n        if(myConfigInfo.variantNode[i].taskNodeid == taskNodeId) {\r\n            hasnode = true\r\n            nindex = i\r\n            break;\r\n        }\r\n    }\r\n    myConfigInfo.startNodeId = nodeinfo.variantProcess.taskNodeid;\r\n    if(!hasnode) {\r\n        //if(state) \r\n        if(!nodeinfo.variantNode.formProperties)\r\n            nodeinfo.variantNode.formProperties = []\r\n        nodeinfo.variantNode.formProperties.push({\r\n            name: \"调用规则\",\r\n            id: \"调用规则\"\r\n        })\r\n        myConfigInfo.variantNode.push(nodeinfo.variantNode);\r\n    } else {\r\n        //if(!state)\r\n        vmd.Array.remove(myConfigInfo.variantNode, myConfigInfo.variantNode[nindex]);\r\n    }\r\n    if(!myConfigInfo.variantProcess) {\r\n        myConfigInfo.variantProcess = nodeinfo.variantProcess.formProperties || [];\r\n    }\r\n}\r\nwindow[\"workflowNodeDblClick\"] = openConfig;","vmdcss":".fltree .x-tree-node-icon {\n    margin-top: 3px;\n}\n\n.fltree .x-tree-ec-icon {\n    margin-top: 3px;\n}\n\n.fltree .x-tree-node-el {\n    line-height: 24px;\n}\n\n.fltree .vmd-tree-node {\n    font-size: 14px;\n}\n::-webkit-scrollbar-track {\n    background-color: #F5F5F5;\n}\n\n::-webkit-scrollbar {\n    width: 6px;\n    height: 7px;\n    background-color: #F5F5F5;\n}\n\n::-webkit-scrollbar-thumb {\n    background-color: #999; \n    border-radius: 10px;\n}","vmdprops":"\"\"","type":"module","vmdresource":"{\"components\":[{\"cid\":\"vmdrescsss\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdresjss\",\"layoutConfig\":{},\"userConfig\":{},\"cn\":[{\"cid\":\"resjs\",\"id\":\"project.config.js\",\"layoutConfig\":{},\"userConfig\":{}}]},{\"cid\":\"vmdresimgs\",\"layoutConfig\":{},\"userConfig\":{}}]}"}