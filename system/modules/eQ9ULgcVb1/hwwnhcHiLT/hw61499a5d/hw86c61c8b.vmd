{"vmdlayout":"{\"components\":[{\"cid\":\"viewport\",\"id\":\"MyViewport\",\"layoutConfig\":{},\"userConfig\":{\"layout\":\"border\",\"afterrender\":\"MyViewport_afterrender\"},\"cn\":[{\"cid\":\"panel\",\"id\":\"MyPanel_head\",\"layoutConfig\":{},\"userConfig\":{\"x\":0,\"y\":0,\"height\":60,\"layout\":\"border\",\"bodyStyle\":\"background-color:skyblue;\",\"region\":\"north\",\"id\":\"MyPanel_head\",\"header\":false},\"cn\":[{\"cid\":\"panel\",\"id\":\"MyPanel_logo\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"west\",\"layout\":\"border\",\"width\":500,\"maskDisabled\":true,\"border\":false,\"bodyStyle\":\"background-color: #409EFF;\",\"id\":\"MyPanel_logo\",\"header\":false},\"cn\":[{\"cid\":\"container\",\"id\":\"MyC_Logoimg\",\"layoutConfig\":{},\"userConfig\":{\"width\":58,\"height\":30,\"style\":\"margin-left: 20px;    margin-top: 5px;\",\"x\":0,\"y\":0,\"region\":\"west\",\"id\":\"MyC_Logoimg\",\"border\":false,\"backgroundImage\":\"/system/modules/eQ9ULgcVb1/img/复合组件1.png\"}},{\"cid\":\"label\",\"id\":\"MyLb_name\",\"layoutConfig\":{},\"userConfig\":{\"x\":70,\"y\":10,\"text\":\"复合组件管理\",\"style\":\"font-size: 26px;    color: #ffffff;    margin-left: 20px;    margin-top: 4px;\",\"region\":\"center\",\"split\":false,\"cls\":\"lineHeight200\",\"id\":\"MyLb_name\"}}]},{\"cid\":\"panel\",\"id\":\"MyPanel7\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"center\",\"border\":false,\"style\":\"background-color: #1e7fff;\",\"bodyStyle\":\"background-color: #409EFF\",\"header\":false}}]},{\"cid\":\"panel\",\"id\":\"MyP_info\",\"layoutConfig\":{},\"userConfig\":{\"x\":0,\"y\":60,\"height\":640,\"layout\":\"border\",\"region\":\"center\",\"id\":\"MyP_info\",\"header\":false},\"cn\":[{\"cid\":\"panel\",\"id\":\"MyP_ModelTree\",\"layoutConfig\":{},\"userConfig\":{\"width\":220,\"height\":639,\"layout\":\"border\",\"x\":0,\"y\":0,\"region\":\"west\",\"id\":\"MyP_ModelTree\",\"header\":false,\"style\":\"background-color: white;\",\"bodyStyle\":\" background-color: white;\",\"split\":true,\"floatable\":false,\"collapseMode\":\"mini\",\"collapsible\":true},\"cn\":[{\"cid\":\"panel\",\"id\":\"MyPanel\",\"layoutConfig\":{},\"userConfig\":{\"x\":60,\"y\":110,\"border\":false,\"header\":false,\"layout\":\"border\",\"width\":220,\"height\":22,\"region\":\"north\",\"style\":\"margin-left: 5px;    margin-top: 5px;    padding-right: 10px;\"},\"cn\":[{\"cid\":\"textfield\",\"id\":\"MyF_searchtext\",\"layoutConfig\":{},\"userConfig\":{\"x\":0,\"y\":0,\"width\":200,\"id\":\"MyF_searchtext\",\"region\":\"center\",\"style\":\"\"}},{\"cid\":\"vmdButton\",\"id\":\"btn_search\",\"layoutConfig\":{},\"userConfig\":{\"x\":190,\"y\":0,\"size\":\"mini\",\"icon\":\"search\",\"text\":\"\",\"width\":23,\"id\":\"btn_search\",\"region\":\"east\",\"style\":\"border-radius: 0px;\",\"margins\":\"\"}}]},{\"cid\":\"panel\",\"id\":\"MyPanel1\",\"layoutConfig\":{},\"userConfig\":{\"x\":70,\"y\":130,\"height\":300,\"border\":false,\"header\":false,\"region\":\"center\",\"layout\":\"fit\",\"style\":\"margin-left: 5px;    margin-top: 10px;    padding-right: 5px;    padding-bottom:  10px;\"},\"cn\":[{\"cid\":\"vmdTree\",\"id\":\"hwTree\",\"layoutConfig\":{},\"userConfig\":{\"x\":0,\"y\":0,\"afterrender\":\"hwTree_afterrender\",\"height\":580,\"width\":220,\"onOpenEnd\":\"hwTree_onOpenEnd\",\"nodeClick\":\"hwTree_nodeClick\",\"region\":\"center\",\"onOpenStart\":\"hwTree_onOpenStart\",\"onDblClick\":\"hwTree_onDblClick\",\"doubleClick\":\"\",\"nodeSelected\":\"\"}}]}]},{\"cid\":\"panel\",\"id\":\"MyP_jcxx\",\"layoutConfig\":{},\"userConfig\":{\"width\":900,\"x\":220,\"y\":0,\"height\":640,\"layout\":\"absolute\",\"region\":\"center\",\"id\":\"MyP_jcxx\",\"header\":false}}]}]},{\"cid\":\"vmddataset\",\"id\":\"数据集\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdvariable\",\"id\":\"变量\",\"layoutConfig\":{},\"userConfig\":{}}]}","vmdevents":"//上次点击的节点\nvar bselNodeId = \"\";\n//获取传递的设计模式\nvar allowedDesigner = false;\n\n//进度提示\nvar myMask = new Ext.LoadMask(Ext.getBody(), {\n    msg: \"数据加载中,请稍后...\",\n    msgCls: 'z-index:10000;'\n});\n\n//初始化数据\nfunction hwTree_afterrender(sender) {\n    myMask = new Ext.LoadMask(Ext.getCmp(\"hwTree\").el, {\n        msg: \"数据加载中,请稍后...\",\n        msgCls: 'z-index:10000;'\n    });\n    myMask.show();\n    var mytree = hwTree;\n    var firstNode = \"\";\n    mytree.deleteChildItems(0);\n    mytree.loadJSONObject({\n        id: 0,\n        text: \"我的复合组件\",\n        item: []\n    });\n    mytree.itemObj = {};\n    mytree.newnode = false;\n\n    hwDas.ajax({\n        das: {\n            idedas: true\n        },\n        url: \"CDEServcie/resource/category\",\n        type: 'get',\n        timeout: 5000,\n        params: {\n            parent_id: \"0\",\n            type: \"4\"\n        },\n        success: function(result) {\n            var datajson = result.data[0].datas;\n            var treeDataJson = [];\n            for(var i = 0; i < datajson.length; i++) {\n                mytree.insertNewChild(\"0\", datajson[i].id, datajson[i].name);\n                mytree.setItemImage2(datajson[i].id, \"tree/folderClosed.gif\", \"tree/folderOpen.gif\", \"tree/folderClosed.gif\")\n                mytree.insertNewChild(datajson[i].id, datajson[i].id + \"-0\", \"\");\n                mytree.closeItem(datajson[i].id);\n                var treenode = mytree.item(datajson[i].id);\n                if(treenode) {\n                    treenode.isFord = true;\n                    treenode.loadChild = false;\n                }\n                mytree.itemObj[datajson[i].id] = treenode;\n            }\n            myMask.hide();\n        },\n        error: function(msg) {\n            myMask.hide();\n            Ext.Msg.alert(\"提示\", \"获取模块信息失败\", function() {})\n        }\n    })\n\n    //绑定右键菜单\n    var menu = new dhtmlXMenuObject();\n    menu.renderAsContextMenu();\n    menu.attachEvent(\"onClick\", onMenuClick);\n    menu.addNewChild(menu.topId, 1, \"newFord\", \"新建分类\", false);\n    menu.addNewChild(menu.topId, 2, \"newMode\", \"新建复合组件\", false);\n    menu.addNewChild(menu.topId, 3, \"copy\", \"复制\", false);\n    menu.addNewChild(menu.topId, 5, \"paste\", \"粘帖\", false);\n    menu.addNewChild(menu.topId, 6, \"delete\", \"删除\", false);\n    mytree.enableDragAndDrop(\"temporary_disabled\");\n    mytree.enableContextMenu(menu);\n\n    mytree.attachEvent(\"onBeforeContextMenu\", function(itemId) {\n        var mytree = hwTree;\n        var selId = mytree.getSelectedItemId();\n        var selnode = mytree.itemObj[selId];\n        if(selnode.isProject) {\n            menu.showItem('newFord');\n            menu.hideItem('newMode');\n            menu.hideItem('copy');\n            menu.hideItem('paste');\n            menu.hideItem('delete');\n        } else if(selnode.isFord) {\n            menu.showItem('newFord');\n            menu.showItem('newMode');\n            menu.hideItem('copy');\n            menu.showItem('paste');\n            menu.showItem('delete');\n        } else if(selnode.isModel) {\n            menu.hideItem('newFord');\n            menu.hideItem('newMode');\n            menu.showItem('copy');\n            menu.hideItem('paste');\n            menu.showItem('delete');\n        }\n        return true\n    })\n\n    //绑定右键事件 设置右键选中节点\n    mytree.attachEvent('onRightClick', function(id) {\n        mytree.selectItem(id);\n    })\n    \n    var menu1 = new dhtmlXMenuObject();\n    menu1.renderAsContextMenu();\n    menu1.attachEvent(\"onClick\", onMenuClick);\n    menu1.addNewChild(menu1.topId, 1, \"newFord\", \"新建分类\", false);\n    menu1.addContextZone(mytree.allTree);\n    menu1.attachEvent(\"onShow\", function(id) {\n        mytree.clearSelection();\n    });\n}\n\nfunction hwTree_onOpenEnd(sender, id) {\n    myMask.show();\n    var proId = id;\n    var mytree = hwTree;\n    mytree.newnode = false;\n    var hasChild = mytree.hasChildren(proId);\n    var selnode = mytree.itemObj[proId];\n    var selnodepath = selnode.path;\n    var projectId = \"\";\n    var childParentId = \"0\";\n    childParentId = proId\n    if(!selnode.loadChild && !selnode.isModel) {\n        //绑定项目下的资源目录\n        hwDas.ajax({\n            das: {\n                idedas: true\n            },\n            url: \"CDEServcie/resource/category\",\n            type: 'get',\n            timeout: 5000,\n            params: {\n                //project_id: projectId,\n                parent_id: childParentId,\n                type: \"4\"\n            },\n            success: function(result) {\n                var datajson = result.data[0].datas;\n                var treeDataJson = [];\n                for(var i = 0; i < datajson.length; i++) {\n                    mytree.insertNewChild(proId, datajson[i].id, datajson[i].name);\n                    mytree.setItemImage2(datajson[i].id, \"tree/folderClosed.gif\", \"tree/folderOpen.gif\", \"tree/folderClosed.gif\")\n                    mytree.insertNewChild(datajson[i].id, datajson[i].id + \"-0\", \"\");\n                    mytree.closeItem(datajson[i].id);\n                    var treenode = mytree.item(datajson[i].id);\n                    treenode.path = selnodepath + \"/\" + datajson[i].id;\n                    //treenode.projectId = projectId;\n                    if(treenode) {\n                        treenode.isFord = true;\n                        treenode.loadChild = false;\n                    }\n                    mytree.itemObj[datajson[i].id] = treenode;\n                }\n                myMask.hide();\n            },\n            error: function(msg) {\n                myMask.hide();\n                Ext.Msg.alert(\"提示\", \"获取模块信息失败\", function() {})\n            }\n        })\n        if(!selnode.loadChild) {\n            mytree.deleteItem(id + \"-0\", false);\n        }\n        selnode.loadChild = true;\n        //获取项目下的资源\n        hwDas.ajax({\n            das: {\n                idedas: true\n            },\n            url: \"CDEServcie/resource/zygl\",\n            type: 'get',\n            timeout: 5000,\n            params: {\n                category_id: childParentId,\n                //project_id: projectId,\n                type: \"4\"\n            },\n            success: function(result) {\n                var datajson = result.data[0].datas;\n                var treeDataJson = [];\n                for(var i = 0; i < datajson.length; i++) {\n                    mytree.insertNewChild(proId, datajson[i].id, datajson[i].name);\n                    mytree.setItemImage2(datajson[i].id, \"tree/model.png\", \"tree/model.png\", \"tree/model.png\")\n                    var treenode = mytree.item(datajson[i].id);\n                    treenode.path = selnodepath + \"/\" + datajson[i].id;\n                    //treenode.projectId = projectId;\n                    if(treenode) {\n                        treenode.isModel = true;\n                        treenode.createuser = datajson[i].row_created_by;\n                        treenode.createtime = datajson[i].row_created_date;\n                        treenode.changetime = datajson[i].row_changed_date;\n                        treenode.changeuser = datajson[i].row_changed_by;\n                        treenode.code = datajson[i].code;\n                        treenode.version = datajson[i].version;\n                        treenode.type = datajson[i].type;\n                        treenode.shared = datajson[i].shared;\n                        treenode.remark = datajson[i].remark;\n                    }\n                    mytree.itemObj[datajson[i].id] = treenode;\n                }\n                //数据操作  \n                myMask.hide();\n            },\n            error: function(msg) {\n                myMask.hide();\n                Ext.Msg.alert(\"提示\", \"获取复合组件信息失败\")\n            }\n        })\n    } else {\n        myMask.hide();\n    }\n}\n//////////////////////////////////////////点击树节点操作\nfunction hwTree_nodeClick(sender, id) {\n    myMask.show();\n    var proId = id;\n    var mytree = hwTree;\n    mytree.newnode = false;\n    var hasChild = mytree.hasChildren(proId);\n    var selnode = mytree.itemObj[proId];\n    var selnodepath = selnode.path;\n    var projectId = \"\";\n    var childParentId = \"0\";\n    if(bselNodeId != id) {\n        if(selnode.isModel) {\n            document.getElementById(\"iframe_page\").src = '/modules/eQ9ULgcVb1/hw61499a5d/hw6000f88a.html';\n        }\n        else {\n            document.getElementById(\"iframe_page\").src = '/modules/eQ9ULgcVb1/eQ9ULgcVb5/hw03cb4931.html';\n        }\n    }\n    bselNodeId = id;\n    myMask.hide();\n}\n//创建分类按钮操作\nfunction creatFord() {\n    var addford = function(fordname) {\n        var mytree = hwTree;\n        var selId = mytree.getSelectedItemId() || 0;\n        var selnode = mytree.itemObj[selId];\n        var selnodepath = selnode ? selnode.path || \"\" : \"\";\n        var nodename = fordname;\n        var newnodeid = newGuid(10);\n        var newcode = newGuid(10);\n        var xh = 10;\n        hwDas.ajax({\n            das: {\n                idedas: true\n            },\n            url: \"CDEServcie/resource/category\",\n            type: 'post',\n            timeout: 5000,\n            data: [{\n                parent_id: selId,\n                name: nodename,\n                code: newcode,\n                //project_id: projectId,\n                id: newnodeid,\n                xh: xh,\n                type: \"4\"\n            }],\n            success: function(result) {\n                mytree.insertNewChild(selId, newnodeid, nodename);\n                mytree.setItemImage2(newnodeid, \"tree/folderClosed.gif\", \"tree/folderOpen.gif\", \"tree/folderClosed.gif\")\n                var treenode = mytree.item(newnodeid);\n                treenode.path = selnodepath + \"/\" + newnodeid;\n                //treenode.projectId = projectId;\n                if(treenode) {\n                    treenode.isFord = true;\n                }\n                mytree.itemObj[newnodeid] = treenode;\n            },\n            error: function(msg) {\n                Ext.Msg.alert(\"提示\", \"新建分类失败\")\n            }\n        })\n    }\n    var fordname = new Ext.MyFordWin(addford);\n    fordname.show();\n}\n\n//删除目录 模块信息\nfunction button1_click(sender) {\n    var mytree = hwTree;\n    var selId = mytree.getSelectedItemId();\n    var selnode = mytree.itemObj[selId];\n    var haschild = mytree.hasChildren(selId);\n    deleteNode();\n}\n\nfunction deleteNode() {\n    var mytree = hwTree;\n    var selId = mytree.getSelectedItemId();\n    var selnode = mytree.itemObj[selId];\n    var haschild = mytree.hasChildren(selId);\n    //删除文件夹\n    if(selnode.isFord) {\n        if(haschild > 0) {\n            Ext.Msg.alert(\"提示\", \"存在子分类或资源，请删除子分类或资源后再删除该目录\")\n            return\n        }\n        Ext.Msg.confirm(\"提示\", \"确认要删除分类吗！\", function(type) {\n            if(type == \"yes\") {\n                hwDas.ajax({\n                    das: {\n                        idedas: true\n                    },\n                    url: \"CDEServcie/resource/category\",\n                    type: 'delete',\n                    timeout: 5000,\n                    params: {\n                        id: selId\n                    },\n                    success: function(result) {\n                        mytree.deleteItem(selId, true);\n                    },\n                    error: function(msg) {\n                        Ext.Msg.alert(\"提示\", \"删除分类失败\")\n                    }\n                })\n            }\n        })\n        return;\n    }\n    //删除模块\n    if(selnode.isModel) {\n        Ext.Msg.confirm(\"提示\", \"组件删除后将不可恢复,确认要删除该复合组件?\", function(type) {\n            if(type == \"yes\") {\n                //先删除模块信息\n                var runtype = [];\n                myMask.show();\n                hwDas.ajax({\n                        das: {\n                            idedas: true\n                        },\n                        url: \"CDEServcie/resource/info\",\n                        type: 'delete',\n                        timeout: 5000,\n                        params: {\n                            id: selId\n                        },\n                        success: function(result) {\n                            mytree.deleteItem(selId); //, true);   \n                            runtype.push(true)\n                            if(runtype.length >= 3)\n                                myMask.hide()\n                            vmd.core.removeCmpFromList(selnode.text);\n                        },\n                        error: function(msg) {\n                            runtype.push(false)\n                            if(runtype.length >= 3)\n                                myMask.hide()\n                            Ext.Msg.alert(\"提示\", \"删除复合组件失败\")\n                            return\n                        }\n                    })\n                    //删除模块文件对应关系\n                hwDas.ajax({\n                        das: {\n                            idedas: true\n                        },\n                        url: \"CDEServcie/resource/file\",\n                        type: 'delete',\n                        timeout: 5000,\n                        params: {\n                            resource_id: selId\n                        },\n                        success: function(result) {\n                            runtype.push(true)\n                            if(runtype.length >= 3)\n                                myMask.hide()\n                        },\n                        error: function(msg) {\n                            runtype.push(false)\n                            if(runtype.length >= 3)\n                                myMask.hide()\n                            Ext.Msg.alert(\"提示\", \"删除模块文件信息失败\")\n                        }\n                    })\n                    //删除复合组件文件  删除js vmd\n                hwDas.ajax({\n                    das: {\n                        idedas: false\n                    },\n                    url: 'FileService',\n                    type: 'delete',\n                    timeout: 5000,\n                    params: {\n                        FileName: 'components/ide/' + selnode.text + '.js,components/ux/' + selnode.text + ',components/vmd/' + selnode.text + '.vmd'\n                    },\n                    success: function(result) {\n                        runtype.push(true)\n                        if(runtype.length >= 3)\n                            myMask.hide()\n                    },\n                    error: function(msg) {\n                        runtype.push(false)\n                        if(runtype.length >= 3)\n                            myMask.hide()\n                        Ext.Msg.alert(\"提示\", \"删除复合组件模块文件失败\")\n                    }\n                })\n            }\n        })\n        return;\n    }\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//自定义自定义方法\nfunction newGuid(len) {\n    var length = 32;\n    if(len)\n        length = len - 2\n    var guid = \"\";\n    arr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n    for(var i = 0; i < length; i++) {\n        pos = Math.round(Math.random() * (arr.length - 1));\n        guid += arr[pos];\n    }\n    return \"hw\" + guid;\n}\n\n//文件夹名称录入框\nExt.MyFordWin = Ext.extend(Ext.Window, {\n        xtype: \"window\",\n        title: \"分类对话框\",\n        width: 300,\n        height: 130,\n        layout: \"form\",\n        bodyStyle: 'padding:15px',\n        labelAlign: \"left\",\n        labelWidth: 40,\n        constructor: function(callback) {\n            this.callback = callback;\n            this.callParent();\n        },\n        initComponent: function() {\n            var me = this;\n            this.fbar = [{\n                text: \"确定\",\n                handler: function() {\n                    me.callback(Ext.getCmp('filename').getValue())\n                    me.close()\n                }\n            }, {\n                text: \"取消\",\n                handler: function() {\n                    me.close()\n                }\n            }];\n\n            this.items = [{\n                id: 'filename',\n                xtype: \"textfield\",\n                fieldLabel: \"名称\",\n                anchor: \"100%\"\n            }]\n            Ext.MyFordWin.superclass.initComponent.call(this);\n        }\n    })\n    //右键菜单事件\nfunction onMenuClick(menuitemId) {\n    if(menuitemId == \"newFord\") {\n        creatFord();\n    } else if(menuitemId == \"newMode\") {\n        hwTree.newnode = true;\n        document.getElementById(\"iframe_page\").src = '/modules/eQ9ULgcVb1/hw61499a5d/hw6000f88a.html';\n    } else if(menuitemId == \"delete\") {\n        button1_click();\n    } else if(menuitemId == \"copy\") {\n        nodeCopy();\n    } else if(menuitemId == \"cut\") {\n        // nodeCut();\n    } else if(menuitemId == \"paste\") {\n        nodePaste();\n    }\n}\n\n///记录赋值或剪切的节点id\nvar copyNodeId = \"\";\n///复制节点\nfunction nodeCopy() {\n    var mytree = hwTree;\n    var selId = mytree.getSelectedItemId();\n    copyNodeId = selId;\n}\n//粘帖节点\nfunction nodePaste() {\n    if(copyNodeId == \"\") {\n        return;\n    }\n\n    //创建一个form，填写name，备注\n    var copyNode = hwTree.itemObj[copyNodeId];\n    var form = new Ext.form.FormPanel({\n        labelAlign: \"top\",\n        bodyStyle: \"padding: 10px\",\n        border: false,\n        items: [{\n            xtype: \"textfield\",\n            allowBlank: false,\n            anchor: \"100%\",\n            name: 'name',\n            height: 30,\n            regex: /^[A-Z][a-zA-Z0-9_]*$/,\n            regexText: \"名称须以大写字母开头，且只能包含数字、字母、下划线\",\n            fieldLabel: '将<span style=\"color:red;font-weight:bold\">' + copyNode.text + '</span>复制为',\n            emptyText: \"请输入复合组件名称\"\n        }, {\n            xtype: \"textarea\",\n            allowBlank: true,\n            name: 'remark',\n            anchor: \"100%\",\n            fieldLabel: \"备注\",\n            emptyText: \"请输入组件说明\"\n        }]\n    })\n\n    var win = new Ext.Window({\n        width: 440,\n        height: 260,\n        title: '复合组件粘贴',\n        hidden: false,\n        layout: \"fit\",\n        border: false,\n        modal: true,\n        items: form,\n        fbar: [{\n            text: '确定',\n            handler: function() {\n                if(form.getForm().isValid()) {\n                    var values = form.form.getValues()\n                        /*保存前校验*/\n                    if(values.name == \"\" || values.remark == \"\") {\n                        Ext.Msg.alert(\"提示\", \"组件名和备注不能为空\")\n                        return false;\n                    }\n                    saveModelInfo(copyNode.text, values.name, values.remark, function() {\n                        copyNodeId = \"\";\n                        win.close()\n                    })\n                }\n            }\n        }, {\n            text: '取消',\n            handler: function() {\n                win.close()\n            }\n        }]\n    });\n    win.show()\n    form.form.setValues({\n        name: copyNode.text + '1'\n    })\n}\n\n//页面加载完后事件\nfunction MyViewport_afterrender(sender) {\n    MyP_jcxx.body.update(\"<iframe  id='iframe_page' src='/modules/eQ9ULgcVb1/eQ9ULgcVb5/hw03cb4931.html' width=100% height=100% frameborder=0  ></iframe>\");\n}\n\nfunction saveModelInfo(oldname, name, remark, callback) {\n    var mytree = parent.hwTree;\n    var newnode = mytree.newnode;\n    var selId = mytree.getSelectedItemId();\n    var selnode = mytree.itemObj[selId];\n    var id = newGuid(10);\n    var category_id = selId;\n    //var Project_id = selnode.projectId;\n    var codeid = newGuid(32);\n    var name = name;\n    var remark = remark;\n    var type = \"0\";\n    //编辑\n    checkName(name, function() {\n        //保存模块基础信息\n        var version = \"1.0\";\n        hwDas.ajax({\n            das: {\n                idedas: true\n            },\n            url: \"CDEServcie/resource/zygl\",\n            type: 'post',\n            timeout: 5000,\n            params: {},\n            headers: {\n                Ecylogin: Ext.util.Cookies.get('EcyLogin') || Ext.util.Cookies.get('ecyLogin')\n            },\n            data: [{\n                editid: newGuid(10),\n                id: id,\n                code: codeid,\n                type: '4',\n                name: name,\n                edit_reason: remark,\n                category_id: category_id,\n                //project_id: Project_id,\n                shared: \"1\",\n                version: version,\n                readdate: Ext.Date.dateFormat(new Date(), 'Y-m-d H:i:s'),\n                filepath: '/components/vmd/' + name + '.vmd',\n                row_created_by: Ext.util.Cookies.get('userName'),\n                row_created_date: Ext.Date.dateFormat(new Date(), 'Y-m-d H:i:s'),\n                remark: remark\n            }],\n            success: function(result) {\n                mytree.insertNewChild(selId, id, name);\n                mytree.setItemImage2(id, \"tree/model.png\", \"tree/model.png\", \"tree/model.png\")\n                var treenode = mytree.item(id);\n                //treenode.projectId = Project_id;\n                if(treenode) {\n                    treenode.isModel = true;\n                    treenode.text = name;\n                    treenode.createuser = Ext.util.Cookies.get('userName');\n                    treenode.createtime = Ext.Date.dateFormat(new Date(), 'Y-m-d H:i:s');\n                    treenode.changetime = Ext.Date.dateFormat(new Date(), 'Y-m-d H:i:s');\n                    treenode.changeuser = Ext.util.Cookies.get('userName');\n                    treenode.remark = remark;\n                    treenode.version = version;\n                    treenode.code = codeid;\n                    treenode.type = '4';\n                    treenode.shared = \"1\";\n                    treenode.newnode = false;\n                }\n                mytree.itemObj[id] = treenode;\n                mytree.selectItem(id, false, false);\n                mytree.newnode = false;\n                vmd.core.saveAsCmp(oldname, version, name, function() {\n                    callback();\n                })\n            },\n            error: function(msg) {\n                Ext.Msg.alert(\"提示\", \"复制复合组件信息失败\")\n                return;\n            }\n        })\n    })\n}\n\nfunction checkName(name, callback) {\n    hwDas.ajax({\n        das: {\n            idedas: true\n        },\n        url: \"CDEServcie/resource/info\",\n        type: 'get',\n        timeout: 5000,\n        params: {\n            name: name\n        },\n        success: function(result) {\n            if(result.data[0].datas.length <= 0) {\n                if(callback)\n                    callback()\n            } else {\n                Ext.Msg.alert(\"提示\", \"该组件已存在，请重新命名组件！\")\n                return;\n            }\n        },\n        error: function(msg) {\n            Ext.Msg.alert(\"提示\", \"保存模块版本信息失败\")\n            return;\n        }\n    })\n}","vmdcss":"","vmdprops":"\"\"","type":"module"}