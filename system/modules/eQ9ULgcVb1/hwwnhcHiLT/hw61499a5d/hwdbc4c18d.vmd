{"vmdlayout":"{\"components\":[{\"cid\":\"viewport\",\"id\":\"MyViewport\",\"layoutConfig\":{},\"userConfig\":{\"layout\":\"border\",\"afterrender\":\"MyViewport_afterrender\"},\"cn\":[{\"cid\":\"panel\",\"id\":\"MyPanel_head\",\"layoutConfig\":{},\"userConfig\":{\"x\":0,\"y\":0,\"height\":60,\"layout\":\"border\",\"bodyStyle\":\"background-color:skyblue;\",\"region\":\"north\",\"id\":\"MyPanel_head\",\"header\":false},\"cn\":[{\"cid\":\"panel\",\"id\":\"MyPanel_logo\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"west\",\"layout\":\"border\",\"width\":500,\"maskDisabled\":true,\"border\":false,\"bodyStyle\":\"background-color:#1e7fff;\",\"id\":\"MyPanel_logo\",\"header\":false},\"cn\":[{\"cid\":\"container\",\"id\":\"MyC_Logoimg\",\"layoutConfig\":{},\"userConfig\":{\"width\":58,\"height\":30,\"style\":\"background: url('/system/img/main/vmdlogo.png') no-repeat center;    margin-left: 20px;    margin-top: 5px;\",\"x\":0,\"y\":0,\"region\":\"west\",\"id\":\"MyC_Logoimg\"}},{\"cid\":\"label\",\"id\":\"MyLb_name\",\"layoutConfig\":{},\"userConfig\":{\"x\":70,\"y\":10,\"text\":\"VMD2.0资源管理\",\"style\":\"font-size: 26px;    color: #ffffff;    margin-left: 20px;    margin-top: 4px;\",\"region\":\"center\",\"split\":false,\"cls\":\"lineHeight200\",\"id\":\"MyLb_name\"}}]},{\"cid\":\"panel\",\"id\":\"MyPanel7\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"center\",\"border\":false,\"style\":\"background-color: #1e7fff;\",\"bodyStyle\":\"background-color:#1e7fff;\",\"header\":false}}]},{\"cid\":\"panel\",\"id\":\"MyP_info\",\"layoutConfig\":{},\"userConfig\":{\"x\":0,\"y\":60,\"height\":640,\"layout\":\"border\",\"region\":\"center\",\"id\":\"MyP_info\",\"header\":false},\"cn\":[{\"cid\":\"panel\",\"id\":\"MyP_ModelTree\",\"layoutConfig\":{},\"userConfig\":{\"width\":220,\"height\":639,\"layout\":\"border\",\"x\":0,\"y\":0,\"region\":\"west\",\"id\":\"MyP_ModelTree\",\"header\":false,\"style\":\"background-color: white;\",\"bodyStyle\":\" background-color: white;\",\"split\":true,\"floatable\":false,\"collapseMode\":\"mini\",\"collapsible\":true},\"cn\":[{\"cid\":\"panel\",\"id\":\"MyPanel\",\"layoutConfig\":{},\"userConfig\":{\"x\":60,\"y\":110,\"border\":false,\"header\":false,\"layout\":\"border\",\"width\":220,\"height\":22,\"region\":\"north\",\"style\":\"margin-left: 5px;    margin-top: 5px;    padding-right: 10px;\"},\"cn\":[{\"cid\":\"textfield\",\"id\":\"MyF_searchtext\",\"layoutConfig\":{},\"userConfig\":{\"x\":0,\"y\":0,\"width\":200,\"id\":\"MyF_searchtext\",\"region\":\"center\",\"style\":\"\"}},{\"cid\":\"vmdButton\",\"id\":\"btn_search\",\"layoutConfig\":{},\"userConfig\":{\"x\":190,\"y\":0,\"size\":\"mini\",\"icon\":\"search\",\"text\":\"\",\"width\":30,\"id\":\"btn_search\",\"region\":\"east\",\"style\":\"\",\"margins\":\"\"}}]},{\"cid\":\"panel\",\"id\":\"MyPanel1\",\"layoutConfig\":{},\"userConfig\":{\"x\":70,\"y\":130,\"height\":300,\"border\":false,\"header\":false,\"region\":\"center\",\"layout\":\"fit\",\"style\":\"margin-left: 5px;    margin-top: 10px;    padding-right: 5px;    padding-bottom:  10px;\"},\"cn\":[{\"cid\":\"vmdTree\",\"id\":\"hwTree\",\"layoutConfig\":{},\"userConfig\":{\"x\":0,\"y\":0,\"afterrender\":\"hwTree_afterrender\",\"height\":580,\"width\":220,\"onOpenEnd\":\"hwTree_onOpenEnd\",\"nodeClick\":\"hwTree_nodeClick\",\"region\":\"center\",\"onOpenStart\":\"hwTree_onOpenStart\",\"onDblClick\":\"hwTree_onDblClick\",\"doubleClick\":\"\",\"nodeSelected\":\"\"}}]}]},{\"cid\":\"panel\",\"id\":\"MyP_jcxx\",\"layoutConfig\":{},\"userConfig\":{\"width\":900,\"x\":220,\"y\":0,\"height\":640,\"layout\":\"absolute\",\"region\":\"center\",\"id\":\"MyP_jcxx\",\"header\":false}}]}]},{\"cid\":\"vmddataset\",\"id\":\"数据集\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdvariable\",\"id\":\"变量\",\"layoutConfig\":{},\"userConfig\":{}}]}","vmdevents":"//上次点击的节点\nvar bselNodeId = \"\";\n\n//进度提示\nvar myMask = new Ext.LoadMask(Ext.getBody(), {\n    msg: \"数据加载中,请稍后...\",\n    msgCls: 'z-index:10000;'\n});\n\n//初始化数据\nfunction hwTree_afterrender(sender) {\n    myMask = new Ext.LoadMask(Ext.getCmp(\"hwTree\").el, {\n        msg: \"数据加载中,请稍后...\",\n        msgCls: 'z-index:10000;'\n    });\n    myMask.show();\n    var mytree = hwTree;\n    var firstNode = \"\";\n    mytree.deleteChildItems(0); //清空\n    //添加根节点\n    mytree.loadJSONObject({\n        id: 0,\n        text: \"我的文件\",\n        item: []\n    });\n    //创建对象记录节点信息\n    mytree.itemObj = {};\n    mytree.newnode = false;\n    //服务获取项目信息\n    hwDas.ajax({\n            das: {\n                idedas: true\n            },\n            url: \"CDEServcie/project/info\",\n            type: 'get',\n            timeout: 5000,\n            params: {},\n            success: function(result) {\n                var datajson = result.data[0].datas;\n                var treeDataJson = [];\n                //循环添加项目节点\n                for(var i = 0; i < datajson.length; i++) {\n                    //通过vmddesigner来判断当前登录用户是否有操作系统办公的权限\n                    if(datajson[i].id == \"eQ9ULgcVb1\") {\n                        continue\n                    } else {\n                        //添加节点\n                        mytree.insertNewChild(0, datajson[i].id, datajson[i].name);\n                        //设置图片\n                        mytree.setItemImage2(datajson[i].id, \"tree/projectclose.png\", \"tree/projectopen.png\", \"tree/projectclose.png\");\n                        //创建节点对象\n                        var treenode = mytree.item(datajson[i].id);\n                        treenode.path = \"/\" + datajson[i].id;\n                        if(treenode) {\n                            treenode.isProject = true;\n                            treenode.code = datajson[i].code;\n                            treenode.loadChild = true; //是否已加载子节点\n                        }\n                        mytree.itemObj[datajson[i].id] = treenode;\n                        if(firstNode == \"\")\n                            firstNode = datajson[i].id;\n                    }\n                    //添加 js  css 文件夹\n                    var jsfordid = newGuid(32)\n                    var cssfordid = newGuid(32)\n                    var imgfordid = newGuid(32)\n                    var filefordid = newGuid(32)\n                        //添加js文件夹节点\n                    mytree.insertNewChild(datajson[i].id, jsfordid, \"js\");\n                    mytree.setItemImage2(jsfordid, \"tree/folderClosed.gif\", \"tree/folderOpen.gif\", \"tree/folderClosed.gif\")\n                    mytree.insertNewChild(jsfordid, jsfordid + \"-0\", \"\");\n                    mytree.closeItem(jsfordid);\n                    var jstreenode = mytree.item(jsfordid);\n                    jstreenode.projectId = datajson[i].id;\n                    jstreenode.path = \"/\" + datajson[i].id + \"/js\";\n                    if(jstreenode) {\n                        jstreenode.isFord = true; //该节点为目录节点\n                        jstreenode.isJs = true; //该目录为脚本的目录\n                        jstreenode.isRoot = true; //该目录为脚本的根目录，根目录下创建文件夹或文件时，父节点为0\n                        jstreenode.loadChild = false;\n                    }\n                    mytree.itemObj[jsfordid] = jstreenode;\n                    //添加css文件夹节点\n                    mytree.insertNewChild(datajson[i].id, cssfordid, \"css\");\n                    mytree.setItemImage2(cssfordid, \"tree/folderClosed.gif\", \"tree/folderOpen.gif\", \"tree/folderClosed.gif\")\n                    mytree.insertNewChild(cssfordid, cssfordid + \"-0\", \"\");\n                    mytree.closeItem(cssfordid);\n                    var csstreenode = mytree.item(cssfordid);\n                    csstreenode.path = \"/\" + datajson[i].id + \"/css\";\n                    csstreenode.projectId = datajson[i].id;\n                    if(csstreenode) {\n                        csstreenode.isFord = true;\n                        csstreenode.isCss = true;\n                        csstreenode.isRoot = true;\n                        csstreenode.loadChild = false;\n                    }\n                    mytree.itemObj[cssfordid] = csstreenode;\n\n                    //添加图片文件夹节点\n                    mytree.insertNewChild(datajson[i].id, imgfordid, \"图片\");\n                    mytree.setItemImage2(imgfordid, \"tree/folderClosed.gif\", \"tree/folderOpen.gif\", \"tree/folderClosed.gif\")\n                    mytree.insertNewChild(imgfordid, imgfordid + \"-0\", \"\");\n                    mytree.closeItem(imgfordid);\n                    var imgtreenode = mytree.item(imgfordid);\n                    imgtreenode.path = \"/\" + datajson[i].id + \"/img\";\n                    imgtreenode.projectId = datajson[i].id;\n                    if(imgtreenode) {\n                        imgtreenode.isFord = true;\n                        imgtreenode.isImg = true;\n                        imgtreenode.isRoot = true;\n                        imgtreenode.loadChild = false;\n                    }\n                    mytree.itemObj[imgfordid] = imgtreenode;\n                    //添加文件文件夹节点\n                    mytree.insertNewChild(datajson[i].id, filefordid, \"文件\");\n                    mytree.setItemImage2(filefordid, \"tree/folderClosed.gif\", \"tree/folderOpen.gif\", \"tree/folderClosed.gif\")\n                    mytree.insertNewChild(filefordid, filefordid + \"-0\", \"\");\n                    mytree.closeItem(filefordid);\n                    var filetreenode = mytree.item(filefordid);\n                    filetreenode.path = \"/\" +datajson[i].id+ \"/file\";\n                    filetreenode.projectId = datajson[i].id;\n                    if(filetreenode) {\n                        filetreenode.isFord = true;\n                        filetreenode.isFile = true;\n                        filetreenode.isRoot = true;\n                        filetreenode.loadChild = false;\n                    }\n                    mytree.itemObj[filefordid] = filetreenode;\n                    //折叠项目节点\n                    mytree.closeItem(datajson[i].id);\n                }\n                //默认选中首项 \n                if(firstNode != \"\")\n                    mytree.selectItem(firstNode);\n\n                myMask.hide();\n            },\n            error: function(msg) {\n                myMask.hide();\n                Ext.Msg.alert(\"提示\", \"获取模块信息失败\", function() {})\n            }\n        })\n        //绑定右键菜单\n    var menu = new dhtmlXMenuObject();\n    menu.renderAsContextMenu();\n    menu.attachEvent(\"onClick\", onMenuClick);\n    menu.addNewChild(menu.topId, 1, \"newCss\", \"新建CSS样式\", false);\n    menu.addNewChild(menu.topId, 2, \"newJs\", \"新建js脚本\", false);\n    menu.addNewChild(menu.topId, 3, \"delete\", \"删除\", false);\n    menu.addNewChild(menu.topId, 4, \"upload\", \"上传\", false);\n    menu.addNewChild(menu.topId, 5, \"newFord\", \"新建目录\", false);\n    mytree.enableDragAndDrop(\"temporary_disabled\");\n    mytree.enableContextMenu(menu);\n\n    mytree.attachEvent(\"onBeforeContextMenu\", function(itemId) {\n        var mytree = hwTree;\n        var selId = mytree.getSelectedItemId();\n        var selnode = mytree.itemObj[selId];\n        if(selnode.isProject) {\n            menu.hideItem('newCss');\n            menu.hideItem('newJs');\n            menu.hideItem('delete');\n            menu.hideItem('upload');\n            menu.hideItem('newFord');\n        } else if(selnode.isFord) {\n            if(selnode.isJs) {\n                menu.hideItem('newCss');\n                menu.showItem('newJs');\n                menu.hideItem('delete');\n                menu.showItem('upload');\n                menu.showItem('newFord');\n            } else if(selnode.isCss) {\n                menu.showItem('newCss');\n                menu.hideItem('newJs');\n                menu.hideItem('delete');\n                menu.showItem('upload');\n                menu.showItem('newFord');\n            } else {\n                menu.hideItem('newCss');\n                menu.hideItem('newJs');\n                menu.hideItem('delete');\n                menu.showItem('upload');\n                menu.showItem('newFord');\n            }\n        } else if(selnode.isJs) {\n            menu.hideItem('newCss');\n            menu.showItem('newJs');\n            menu.showItem('delete');\n            menu.hideItem('upload');\n            menu.hideItem('newFord');\n        } else if(selnode.isCss) {\n            menu.showItem('newCss');\n            menu.hideItem('newJs');\n            menu.showItem('delete');\n            menu.hideItem('upload');\n            menu.hideItem('newFord');\n        } else {\n            menu.showItem('delete');\n        }\n        return true\n    })\n\n    //绑定右键事件 设置右键选中节点\n    mytree.attachEvent('onRightClick', function(id) {\n        mytree.selectItem(id);\n    })\n}\n\n//右键菜单事件\nfunction onMenuClick(menuitemId) {\n    if(menuitemId == \"newCss\" || menuitemId == \"newJs\") {\n        creatFile(\"file\");\n    } else if(menuitemId == \"delete\") {\n        deleteNode()\n    } else if(menuitemId == \"upload\") {\n        upload()\n    } else if(menuitemId == \"newFord\") {\n        creatFile(\"ford\")\n    }\n}\n\nfunction hwTree_onOpenEnd(sender, id) {\n    var proId = id;\n    var mytree = hwTree;\n    mytree.newnode = false;\n    var hasChild = mytree.hasChildren(proId);\n    var selnode = mytree.itemObj[proId];\n\n    if(selnode.isProject)\n        return\n\n    if(selnode.loadChild)\n        return\n        \n    var selnodepath = selnode.path;\n    var projectId = selnode.projectId;\n    var childParentId = \"0\";\n    if(selnode.isRoot) {\n        childParentId = \"0\";\n    } else {\n        childParentId = id;\n    }\n\n    var type = \"\"\n        //获取当前文件夹类型\n    if(selnode.isJs == true)\n        type = \"1\"\n    if(selnode.isCss == true)\n        type = \"5\"\n    if(selnode.isImg == true)\n        type = \"6\"\n    if(selnode.isFile == true)\n        type = \"7\"\n\n    myMask.show();\n    var fordtype = \"\"\n\n    //获取项目下的资源目录\n\n    var getFord = function(callback) {\n        hwDas.ajax({\n            das: {\n                idedas: true\n            },\n            url: \"CDEServcie/resource/category\",\n            type: 'get',\n            timeout: 5000,\n            params: {\n                parent_id: childParentId,\n                project_id: projectId,\n                type: type\n            },\n            success: function(result) {\n\n                var datajson = result.data[0].datas;\n                var treeDataJson = [];\n                for(var i = 0; i < datajson.length; i++) {\n                    mytree.insertNewChild(proId, datajson[i].id, datajson[i].name);\n                    mytree.setItemImage2(datajson[i].id, \"tree/folderClosed.gif\", \"tree/folderOpen.gif\", \"tree/folderClosed.gif\")\n                    var treenode = mytree.item(datajson[i].id);\n                    mytree.insertNewChild(datajson[i].id, datajson[i].id + \"-0\", \"\");\n                    mytree.closeItem(datajson[i].id);\n                    treenode.path = selnodepath + \"/\" + datajson[i].name;\n                    treenode.projectId = projectId;\n                    if(treenode) {\n\n                        treenode.isFord = true;\n                        if(datajson[i].type == \"1\")\n                            treenode.isJs = true;\n                        if(datajson[i].type == \"5\")\n                            treenode.isCss = true;\n                        if(datajson[i].type == \"6\")\n                            treenode.isImg = true;\n                        if(datajson[i].type == \"7\")\n                            treenode.isFile = true;\n                        treenode.code = datajson[i].code;\n                        treenode.shared = datajson[i].shared;\n                    }\n                    mytree.itemObj[datajson[i].id] = treenode;\n                }\n                callback()\n            },\n            error: function(msg) {\n                myMask.hide();\n                Ext.Msg.alert(\"提示\", \"获取复合组件信息失败\")\n            }\n        })\n    }\n    var getFile = function() {\n        hwDas.ajax({\n            das: {\n                idedas: true\n            },\n            url: \"CDEServcie/resource/info\",\n            type: 'get',\n            timeout: 5000,\n            params: {\n                category_id: childParentId,\n                project_id: projectId,\n                type: type\n            },\n            success: function(result) {\n                var datajson = result.data[0].datas;\n                var treeDataJson = [];\n                for(var i = 0; i < datajson.length; i++) { \n                    mytree.insertNewChild(proId, datajson[i].id, datajson[i].name);\n                    mytree.setItemImage2(datajson[i].id, \"tree/model.png\", \"tree/model.png\", \"tree/model.png\")\n                    var treenode = mytree.item(datajson[i].id);\n                    treenode.path = selnodepath + \"/\" + datajson[i].name;\n                    treenode.projectId = projectId;\n                    if(treenode) {\n                        treenode.isModel = true;\n                        if(datajson[i].type == \"1\")\n                            treenode.isJs = true;\n                        if(datajson[i].type == \"5\")\n                            treenode.isCss = true;\n                        if(datajson[i].type == \"6\")\n                            treenode.isImg = true;\n                        if(datajson[i].type == \"7\")\n                            treenode.isFile = true;\n                        treenode.createuser = datajson[i].row_created_by;\n                        treenode.createtime = datajson[i].row_created_date;\n                        treenode.changetime = datajson[i].row_changed_date;\n                        treenode.changeuser = datajson[i].row_changed_by;\n                        treenode.code = datajson[i].code;\n                        treenode.shared = datajson[i].shared;\n                    }\n                    mytree.itemObj[datajson[i].id] = treenode;\n                }\n                //数据操作  \n                myMask.hide();\n            },\n            error: function(msg) {\n                myMask.hide();\n                Ext.Msg.alert(\"提示\", \"获取复合组件信息失败\")\n            }\n        })\n    }\n    getFord(getFile)\n    if(!selnode.loadChild) {\n        mytree.deleteItem(id + \"-0\", false);\n    }\n    selnode.loadChild = true;\n}\n//////////////////////////////////////////点击树节点操作\nfunction hwTree_nodeClick(sender, id) {\n    myMask.show();\n    var proId = id;\n    var mytree = hwTree;\n    mytree.newnode = false;\n    var hasChild = mytree.hasChildren(proId);\n    var selnode = mytree.itemObj[proId];\n    var selnodepath = selnode.path;\n    var projectId = \"\";\n    var childParentId = \"0\";\n    if(bselNodeId != id) {\n        if(!selnode.isFord && selnode.isJs) {\n            Ext.Msg.alert(\"打开js编辑\")\n            document.getElementById(\"iframe_page\").src = '/modules/eQ9ULgcVb1/hw61499a5d/hwdc74eca1.html';\n        } else if(!selnode.isFord && selnode.isCss) {\n            Ext.Msg.alert(\"打开Css编辑\")\n            document.getElementById(\"iframe_page\").src = '/modules/eQ9ULgcVb1/hw61499a5d/hwdc74eca1.html';\n        } else {\n            Ext.Msg.alert(\"打开使用方法\")\n        }\n    }\n    bselNodeId = id;\n    myMask.hide();\n}\n//创建分类按钮操作\nfunction creatFile(type) {\n    debugger\n    var mytree = hwTree;\n    var selId = mytree.getSelectedItemId();\n    var selnode = mytree.itemObj[selId];\n    if(selnode.isModel) {\n        return;\n    }\n\n    var selnodepath = selnode.path;\n    var parentId;\n    var projectId;\n    var newnodeid = newGuid(10);\n    var newcode = newGuid(32);\n    var xh = 10;\n    var fordType = \"\";\n    //获取创建 的文件或文件夹类型\n    if(selnode.isJs) {\n        fordType = \"1\"\n    } else if(selnode.isCss) {\n        fordType = \"5\"\n    } else if(selnode.isImg) {\n        fordType = \"6\"\n    } else if(selnode.isFile) {\n        fordType = \"7\"\n    }\n\n    if(selnode.isRoot)\n        parentId = 0\n    else\n        parentId = selId;\n\n    projectId = selnode.projectId;\n\n    var addFile = function(nodename) {\n        var createuser = Ext.util.Cookies.get('userName');\n        var createtime = Ext.Date.dateFormat(new Date(), 'Y-m-d H:i:s');\n        var filepath=selnodepath+\"/\"+nodename\n        hwDas.ajax({\n            das: {\n                idedas: true\n            },\n            url: \"CDEServcie/resource/zygl\",\n            type: 'post',\n            timeout: 5000,\n            data: [{\n                category_id: parentId,\n                name: nodename,\n                code: newcode,\n                project_id: projectId,\n                id: newnodeid,\n                xh: xh,\n                version: \"1\",\n                type: fordType,\n                row_created_by: createuser,\n                row_created_date: createtime,\n                filepath: filepath\n            }],\n            success: function(result) {\n                mytree.insertNewChild(selId, newnodeid, nodename);\n                mytree.setItemImage2(newnodeid, \"tree/model.png\", \"tree/model.png\", \"tree/model.png\")\n                var treenode = mytree.item(newnodeid);\n                treenode.path = filepath;\n                treenode.projectId = projectId;\n                if(treenode) {\n                    if(fordType == \"1\")\n                        treenode.isJs = true;\n                    if(fordType == \"5\")\n                        treenode.isCss = true;\n                    if(fordType == \"6\")\n                        treenode.isImg = true;\n                    if(fordType == \"7\")\n                        treenode.isFile = true;\n\n                    treenode.createuser = createuser;\n                    treenode.createtime = createtime;\n                    treenode.code = newcode;\n                    treenode.shared = true;\n                }\n                mytree.itemObj[newnodeid] = treenode;\n            },\n            error: function(msg) {\n                Ext.Msg.alert(\"提示\", \"新建分类失败\")\n            }\n        })\n    }\n\n\n    var addFord = function(nodename) {\n        var filepath=selnodepath+\"/\"+nodename\n        hwDas.ajax({\n            das: {\n                idedas: true\n            },\n            url: \"CDEServcie/resource/category\",\n            type: 'post',\n            timeout: 5000,\n            data: [{\n                parent_id: parentId,\n                name: nodename,\n                code: newcode,\n                project_id: projectId,\n                id: newnodeid,\n                xh: xh,\n                type: fordType\n            }],\n            success: function(result) {\n                mytree.insertNewChild(selId, newnodeid, nodename);\n                mytree.setItemImage2(newnodeid, \"tree/folderClosed.gif\", \"tree/folderOpen.gif\", \"tree/folderClosed.gif\")\n                var treenode = mytree.item(newnodeid);\n                treenode.path = filepath;\n                treenode.projectId = projectId;\n                if(treenode) {\n                    if(fordType == \"1\")\n                        treenode.isJs = true;\n                    if(fordType == \"5\")\n                        treenode.isCss = true;\n                    if(fordType == \"6\")\n                        treenode.isImg = true;\n                    if(fordType == \"7\")\n                        treenode.isFile = true;\n                }\n                mytree.itemObj[newnodeid] = treenode;\n            },\n            error: function(msg) {\n                Ext.Msg.alert(\"提示\", \"新建分类失败\")\n            }\n        })\n    }\n\n    if(type == \"file\") {\n        var fordname = new Ext.MyFordWin(addFile);\n        fordname.show();\n    } else {\n        var fordname = new Ext.MyFordWin(addFord);\n        fordname.show();\n    }\n}\n\n\nfunction deleteNode() {\n    var mytree = hwTree;\n    var selId = mytree.getSelectedItemId();\n    var selnode = mytree.itemObj[selId];\n    var haschild = mytree.hasChildren(selId);\n    var projectid = selnode.projectId;\n    //删除文件夹\n    if(selnode.isProject) {\n        Ext.Msg.alert(\"提示\", \"项目禁止删除，请在模块管理中操作！\")\n        return\n    }\n    //删除文件夹\n    if(selnode.isFord) {\n        Ext.Msg.alert(\"提示\", \"目录禁止删除，请在模块管理中操作！\")\n        return\n    }\n    //删除模块\n    var type = \"\"\n    var ford = \"\"\n    if(selnode.isCss) {\n        type = \"Css样式\"\n        ford = \"css\"\n    }\n    if(selnode.isJs) {\n        type = \"Js脚本\"\n        ford = \"js\"\n    }\n    debugger\n    Ext.Msg.confirm(\"提示\", \"确认要删除该\" + type + \"文件\", function(type) {\n        if(type == \"yes\") {\n            //先删除模块信息\n            var runtype = [];\n            myMask.show();\n            hwDas.ajax({\n                    das: {\n                        idedas: true\n                    },\n                    url: \"CDEServcie/resource/info\",\n                    type: 'delete',\n                    timeout: 5000,\n                    params: {\n                        id: selId\n                    },\n                    success: function(result) {\n                        mytree.deleteItem(selId); //, true);   \n                        runtype.push(true)\n                        if(runtype.length >= 3)\n                            myMask.hide()\n                            //vmd.core.removeCmpFromList(selnode.text);\n                    },\n                    error: function(msg) {\n                        runtype.push(false)\n                        if(runtype.length >= 3)\n                            myMask.hide()\n                        Ext.Msg.alert(\"提示\", \"删除复合组件失败\")\n                        return\n                    }\n                })\n                //删除模块文件对应关系\n            hwDas.ajax({\n                    das: {\n                        idedas: true\n                    },\n                    url: \"CDEServcie/resource/file\",\n                    type: 'delete',\n                    timeout: 5000,\n                    params: {\n                        resource_id: selId\n                    },\n                    success: function(result) {\n                        runtype.push(true)\n                        if(runtype.length >= 3)\n                            myMask.hide()\n                    },\n                    error: function(msg) {\n                        runtype.push(false)\n                        if(runtype.length >= 3)\n                            myMask.hide()\n                        Ext.Msg.alert(\"提示\", \"删除模块文件信息失败\")\n                    }\n                })\n                //删除复合组件文件  删除js vmd\n            hwDas.ajax({\n                das: {\n                    idedas: false\n                },\n                url: 'FileService',\n                type: 'delete',\n                timeout: 5000,\n                params: {\n                    FileName: projectid + '/' + ford + '/' + selnode.text\n                },\n                success: function(result) {\n                    runtype.push(true)\n                    if(runtype.length >= 3)\n                        myMask.hide()\n                },\n                error: function(msg) {\n                    runtype.push(false)\n                    if(runtype.length >= 3)\n                        myMask.hide()\n                    Ext.Msg.alert(\"提示\", \"删除复合组件模块文件失败\")\n                }\n            })\n        }\n    })\n    return;\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//自定义自定义方法\n\nfunction newGuid(len) {\n    var length = 32;\n    if(len)\n        length = len - 2\n    var guid = \"\";\n    arr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n    for(var i = 0; i < length; i++) {\n        pos = Math.round(Math.random() * (arr.length - 1));\n        guid += arr[pos];\n    }\n    return \"hw\" + guid;\n}\n\n//文件夹名称录入框\nExt.MyFordWin = Ext.extend(Ext.Window, {\n    xtype: \"window\",\n    title: \"文件对话框\",\n    width: 300,\n    height: 130,\n    layout: \"form\",\n    bodyStyle: 'padding:15px',\n    labelAlign: \"left\",\n    labelWidth: 40,\n    constructor: function(callback) {\n        this.callback = callback;\n        this.callParent();\n    },\n    initComponent: function() {\n        var me = this;\n        this.fbar = [{\n            text: \"确定\",\n            handler: function() {\n                me.callback(Ext.getCmp('filename').getValue())\n                me.close()\n            }\n        }, {\n            text: \"取消\",\n            handler: function() {\n                me.close()\n            }\n        }];\n\n        this.items = [{\n            id: 'filename',\n            xtype: \"textfield\",\n            fieldLabel: \"名称\",\n            anchor: \"100%\"\n        }]\n        Ext.MyFordWin.superclass.initComponent.call(this);\n    }\n})\n\n\n\n\n\n//页面加载完后事件\nfunction MyViewport_afterrender(sender) {\n    MyP_jcxx.body.update(\"<iframe  id='iframe_page' src='/modules/eQ9ULgcVb1/eQ9ULgcVb5/hw03cb4931.html' width=100% height=100% frameborder=0  ></iframe>\");\n}","vmdcss":"","vmdprops":"\"\"","type":"module"}