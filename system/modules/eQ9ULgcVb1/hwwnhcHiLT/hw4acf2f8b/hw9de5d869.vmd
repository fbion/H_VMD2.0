{"vmdlayout":"{\"components\":[{\"cid\":\"viewport\",\"id\":\"MyViewport\",\"layoutConfig\":{},\"userConfig\":{\"layout\":\"anchor\"},\"cn\":[{\"cid\":\"panel\",\"id\":\"panel\",\"layoutConfig\":{},\"userConfig\":{\"anchor\":\"100% -50\",\"header\":false,\"layout\":\"border\",\"border\":false},\"cn\":[{\"cid\":\"panel\",\"id\":\"panel2\",\"layoutConfig\":{},\"userConfig\":{\"width\":176,\"height\":599,\"region\":\"center\",\"border\":true,\"header\":false,\"layout\":\"anchor\",\"style\":\"background-color: #fff\",\"bodyStyle\":\"background-color: #fff\"},\"cn\":[{\"cid\":\"panel\",\"id\":\"panel6\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"north\",\"anchor\":\"100% 50%\",\"border\":false,\"header\":false,\"layout\":\"anchor\"},\"cn\":[{\"cid\":\"container\",\"id\":\"div4\",\"layoutConfig\":{},\"userConfig\":{\"anchor\":\"100% \",\"height\":40,\"layout\":\"absolute\"},\"cn\":[{\"cid\":\"label\",\"id\":\"label\",\"layoutConfig\":{},\"userConfig\":{\"x\":10,\"y\":10,\"text\":\"全局变量\"}}]},{\"cid\":\"vmdGrid\",\"id\":\"hwGrid\",\"layoutConfig\":{},\"userConfig\":{\"anchor\":\"100% -40\",\"beforerender\":\"hwGrid_beforerender\",\"afterrender\":\"hwGrid_afterrender\",\"fillReport\":true}}]},{\"cid\":\"panel\",\"id\":\"panel7\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"center\",\"anchor\":\"100% 50%\",\"border\":false,\"header\":false,\"layout\":\"anchor\",\"bodyStyle\":\"border-top: 1px  solid lightblue\"},\"cn\":[{\"cid\":\"container\",\"id\":\"div5\",\"layoutConfig\":{},\"userConfig\":{\"anchor\":\"100%\",\"height\":40,\"layout\":\"absolute\"},\"cn\":[{\"cid\":\"label\",\"id\":\"label1\",\"layoutConfig\":{},\"userConfig\":{\"x\":10,\"y\":10,\"text\":\"节点变量\"}}]},{\"cid\":\"vmdGrid\",\"id\":\"hwGrid1\",\"layoutConfig\":{},\"userConfig\":{\"anchor\":\"100% -40\",\"beforerender\":\"hwGrid1_beforerender\",\"afterrender\":\"hwGrid1_afterrender\",\"fillReport\":true}}]}]},{\"cid\":\"panel\",\"id\":\"panel3\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"west\",\"width\":229,\"header\":false,\"border\":true,\"layout\":\"anchor\",\"collapseMode\":\"mini\",\"split\":true},\"cn\":[{\"cid\":\"panel\",\"id\":\"panel4\",\"layoutConfig\":{},\"userConfig\":{\"height\":40,\"border\":false,\"header\":false,\"layout\":\"fit\"},\"cn\":[{\"cid\":\"container\",\"id\":\"div\",\"layoutConfig\":{},\"userConfig\":{\"style\":\"padding-top: 8px;    padding-left: 5px;\",\"layout\":\"hbox\"},\"cn\":[{\"cid\":\"textfield\",\"id\":\"MyField\",\"layoutConfig\":{},\"userConfig\":{\"width\":194,\"columnWidth\":0.99}},{\"cid\":\"vmdButton\",\"id\":\"button\",\"layoutConfig\":{},\"userConfig\":{\"icon\":\"search\",\"text\":\"\",\"size\":\"mini\",\"height\":22,\"width\":22}}]}]},{\"cid\":\"panel\",\"id\":\"panel5\",\"layoutConfig\":{},\"userConfig\":{\"anchor\":\"100% -40\",\"border\":false,\"header\":false,\"layout\":\"fit\",\"style\":\"padding-left: 5px;    padding-right: 5px\"},\"cn\":[{\"cid\":\"vmdTree\",\"id\":\"hwTree\",\"layoutConfig\":{},\"userConfig\":{\"afterrender\":\"hwTree_afterrender\",\"onOpenEnd\":\"hwTree_onOpenEnd\",\"nodeClick\":\"hwTree_nodeClick\",\"Check\":\"hwTree_Check\"}}]}]}]},{\"cid\":\"panel\",\"id\":\"panel1\",\"layoutConfig\":{},\"userConfig\":{\"height\":50,\"anchor\":\"\",\"header\":false,\"layout\":\"column\",\"border\":false},\"cn\":[{\"cid\":\"container\",\"id\":\"div1\",\"layoutConfig\":{},\"userConfig\":{\"columnWidth\":0.5}},{\"cid\":\"container\",\"id\":\"div2\",\"layoutConfig\":{},\"userConfig\":{\"width\":200,\"layout\":\"absolute\"},\"cn\":[{\"cid\":\"vmdButton\",\"id\":\"button1\",\"layoutConfig\":{},\"userConfig\":{\"x\":10,\"y\":10,\"type\":\"primary\",\"text\":\"确定\",\"click\":\"button1_click\"}},{\"cid\":\"vmdButton\",\"id\":\"button2\",\"layoutConfig\":{},\"userConfig\":{\"x\":110,\"y\":10,\"text\":\"取消\",\"click\":\"button2_click\"}}]},{\"cid\":\"container\",\"id\":\"div3\",\"layoutConfig\":{},\"userConfig\":{\"columnWidth\":0.5}}]}]},{\"cid\":\"vmddataset\",\"id\":\"数据集\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdvariable\",\"id\":\"变量\",\"layoutConfig\":{},\"userConfig\":{}}]}","vmdevents":"var nodeInfo = {\n    modelId: '2501',\n    variantProcess: {\n        processKey: 'forLeave1',\n        taskNodeid: 'startevent1',\n        taskNodeName: 'Start',\n        formProperties: [{\n            id: \"startDate\",\n            name: \"请假开始日期\",\n            type: \"date\",\n            expression: null,\n            variable: null,\n            datePattern: \"yyyy-MM-dd\",\n            required: true,\n            readable: true,\n            writable: true\n        }, {\n            id: \"endDate\",\n            name: \"请假结束日期\",\n            type: \"date\",\n            expression: null,\n            variable: null,\n            datePattern: \"yyyy-MM-dd\",\n            required: true,\n            readable: true,\n            writable: true\n        }, {\n            id: \"reason\",\n            name: \"请假原因\",\n            type: \"string\",\n            expression: null,\n            variable: null,\n            required: true,\n            readable: true,\n            writable: true\n        }]\n    },\n    variantNode: {\n        processKey: 'forLeave1',\n        taskNodeid: 'deptLeaderAudit',\n        taskNodeName: '部门领导审批',\n        formProperties: [{\n            id: \"startDate\",\n            name: \"请假开始日期\",\n            type: \"date\",\n            expression: null,\n            variable: null,\n            datePattern: \"yyyy-MM-dd\",\n            required: false,\n            readable: true,\n            writable: false\n        }, {\n            id: \"endDate\",\n            name: \"请假结束时间\",\n            type: \"date\",\n            expression: null,\n            variable: null,\n            datePattern: \"yyyy-MM-dd\",\n            required: false,\n            readable: true,\n            writable: false\n        }, {\n            id: \"deptLeaderApproved\",\n            name: \"审批意见\",\n            type: \"enum\",\n            expression: null,\n            variable: null,\n            enumValues: [{\n                name: \"同意\",\n                id: \"1\"\n            }, {\n                name: \"不同意\",\n                id: \"2\"\n            }],\n            required: true,\n            readable: true,\n            writable: true\n        }]\n    }\n}\nif(parent.nodeInfo)\n    nodeInfo = parent.nodeInfo;\n\n\n//进度提示\nvar myMask = new Ext.LoadMask(Ext.getBody(), {\n    msg: \"数据加载中,请稍后...\",\n    msgCls: 'z-index:10000;'\n});\n\n//初始化数据\nfunction hwTree_afterrender(sender) {\n    myMask = new Ext.LoadMask(Ext.getCmp(\"hwTree\").el, {\n        msg: \"数据加载中,请稍后...\",\n        msgCls: 'z-index:10000;'\n    });\n    myMask.show();\n    var mytree = hwTree;\n    var firstNode = \"\";\n    mytree.deleteChildItems(0);\n    mytree.loadJSONObject({\n        id: 0,\n        text: \"我的项目\",\n        item: []\n    });\n    mytree.enableRadioButtons(true)\n    mytree.enableSingleRadioMode(true)\n    mytree.itemObj = {};\n    mytree.newnode = false;\n    hwDas.ajax({\n        das: {\n            idedas: true\n        },\n        url: \"CDEServcie/project/info\",\n        type: 'get',\n        timeout: 5000,\n        params: {},\n        success: function(result) {\n            var datajson = result.data[0].datas;\n            var treeDataJson = [];\n            for(var i = 0; i < datajson.length; i++) {\n                if(datajson[i].id == \"eQ9ULgcVb1\") {\n                    continue\n                } else {\n                    mytree.insertNewChild(0, datajson[i].id, datajson[i].name);\n                    mytree.setItemImage2(datajson[i].id, \"tree/projectclose.png\", \"tree/projectopen.png\", \"tree/projectclose.png\");\n                    mytree.showItemCheckbox(datajson[i].id,false)\n                    mytree.insertNewChild(datajson[i].id, datajson[i].id + \"-0\", \"\");\n                    mytree.closeItem(datajson[i].id);\n                    var treenode = mytree.item(datajson[i].id);\n                    treenode.path = \"/\" + datajson[i].id;\n                    if(treenode) {\n                        treenode.isProject = true;\n                        treenode.createuser = datajson[i].row_created_by;\n                        treenode.createtime = datajson[i].row_created_date;\n                        treenode.changetime = datajson[i].row_changed_date;\n                        treenode.changeuser = datajson[i].row_changed_by;\n                        treenode.code = datajson[i].code;\n                        treenode.loadChild = false;\n                    }\n                    mytree.itemObj[datajson[i].id] = treenode;\n                    if(firstNode == \"\")\n                        firstNode = datajson[i].id;\n                }\n            }\n            //默认选中首项 \n            if(firstNode != \"\")\n                mytree.selectItem(firstNode);\n\n            myMask.hide();\n        },\n        error: function(msg) {\n            myMask.hide();\n            Ext.Msg.alert(\"提示\", \"获取模块信息失败\", function() {})\n        }\n    })\n}\n\nfunction hwTree_onOpenEnd(sender, id, state) {\n    myMask.show();\n    var proId = id;\n    var mytree = hwTree;\n    mytree.newnode = false;\n    var hasChild = mytree.hasChildren(proId);\n    var selnode = mytree.itemObj[proId];\n    var selnodepath = selnode.path;\n    var projectId = \"\";\n    var childParentId = \"0\";\n    if(selnode.isProject) {\n        projectId = proId;\n        childParentId = \"0\";\n    } else {\n        projectId = selnode.projectId;\n        childParentId = proId\n    }\n    if(!selnode.loadChild && !selnode.isModel) {\n        hwDas.ajax({\n            das: {\n                idedas: true\n            },\n            url: \"CDEServcie/module/category\",\n            type: 'get',\n            timeout: 5000,\n            params: {\n                project_id: projectId,\n                parent_id: childParentId\n            },\n            success: function(result) {\n                var datajson = result.data[0].datas;\n                var treeDataJson = [];\n                for(var i = 0; i < datajson.length; i++) {\n                    mytree.insertNewChild(proId, datajson[i].id, datajson[i].name);\n                    mytree.setItemImage2(datajson[i].id, \"tree/folderClosed.gif\", \"tree/folderOpen.gif\", \"tree/folderClosed.gif\")\n                    mytree.showItemCheckbox(datajson[i].id,false)\n                    mytree.insertNewChild(datajson[i].id, datajson[i].id + \"-0\", \"\");\n                    mytree.closeItem(datajson[i].id);\n                    var treenode = mytree.item(datajson[i].id);\n                    treenode.path = selnodepath + \"/\" + datajson[i].id;\n                    treenode.projectId = projectId;\n                    if(treenode) {\n                        treenode.isFord = true;\n                        treenode.loadChild = false;\n                    }\n                    mytree.itemObj[datajson[i].id] = treenode;\n                }\n                myMask.hide();\n            },\n            error: function(msg) {\n                myMask.hide();\n                Ext.Msg.alert(\"提示\", \"获取模块信息失败\", function() {})\n            }\n        })\n        if(!selnode.loadChild) {\n            mytree.deleteItem(id + \"-0\", false);\n        }\n        selnode.loadChild = true;\n        hwDas.ajax({\n            das: {\n                idedas: true\n            },\n            url: \"CDEServcie/module/info\",\n            type: 'get',\n            timeout: 5000,\n            params: {\n                category_id: childParentId,\n                project_id: projectId\n            },\n            success: function(result) {\n                var datajson = result.data[0].datas;\n                var treeDataJson = [];\n                for(var i = 0; i < datajson.length; i++) {\n                    mytree.insertNewChild(proId, datajson[i].id, datajson[i].name);\n                    mytree.setItemImage2(datajson[i].id, \"tree/model.png\", \"tree/model.png\", \"tree/model.png\")\n                   // mytree.showItemCheckbox(datajson[i].id);\n                    var treenode = mytree.item(datajson[i].id);\n                    treenode.path = selnodepath + \"/\" + datajson[i].id;\n                    treenode.projectId = projectId;\n                    if(treenode) {\n                        treenode.isModel = true;\n                        treenode.createuser = datajson[i].row_created_by;\n                        treenode.createtime = datajson[i].row_created_date;\n                        treenode.changetime = datajson[i].row_changed_date;\n                        treenode.changeuser = datajson[i].row_changed_by;\n                        treenode.remark = datajson[i].remark;\n                        treenode.code = datajson[i].code;\n                    }\n                    mytree.itemObj[datajson[i].id] = treenode;\n                }\n                //数据操作  \n                myMask.hide();\n            },\n            error: function(msg) {\n                myMask.hide();\n                Ext.Msg.alert(\"提示\", \"获取模块信息失败\")\n            }\n        })\n    } else {\n        myMask.hide();\n    }\n}\n\nfunction hwGrid_beforerender(sender) {\n    initgrid(hwGrid)\n}\n\nfunction hwGrid1_beforerender(sender) {\n    initgrid(hwGrid1)\n}\n\nfunction initgrid(sender) {\n    sender.headstr = \"序号,变量编码,变量名称,类型,表单变量\";\n    sender.colType = \"ro,ro,ro,ed,ed\";\n    //sender.colSorting = \"int,str,str,str,str\";\n    var headerWidth = \"50,100,100,100,120\"\n    var colId = \"xh,id,name,type,value\";\n    sender.headerWidth = headerWidth;\n    sender.colId = colId;\n}\n\n\nfunction hwGrid1_afterrender(sender) {\n    hwGrid1.clearAll();\n    var dsdata = nodeInfo.variantProcess.formProperties || [];\n    var dsdata1 = [];\n    for(var i = 0; i < dsdata.length; i++) {\n        var datarow = {};\n        datarow.xh = i + 1;\n        datarow.id = dsdata[i].id;\n        datarow.name = dsdata[i].name;\n        datarow.type = dsdata[i].type;\n        datarow.value = dsdata[i].value;\n        dsdata1.push(datarow);\n    }\n    //绑定节点变量\n    var ds1 = new dhtmlXDataStore({\n        data: dsdata1,\n        datatype: \"json\"\n    });\n    hwGrid1.sync(ds1);\n}\n\nfunction hwGrid_afterrender(sender) {\n    hwGrid.clearAll();\n    var dsdata = nodeInfo.variantNode.formProperties || [];\n    var dsdata2 = [];\n    for(var i = 0; i < dsdata.length; i++) {\n        var datarow = {};\n        datarow.xh = i + 1;\n        datarow.id = dsdata[i].id;\n        datarow.name = dsdata[i].name;\n        datarow.type = dsdata[i].type;\n        datarow.value = dsdata[i].value;\n        dsdata2.push(datarow);\n    }\n    //绑定节点变量\n    var ds2 = new dhtmlXDataStore({\n        data: dsdata2,\n        datatype: \"json\"\n    });\n    hwGrid.sync(ds2);\n}\n\nfunction button2_click(sender) {\n    parent.openWinFrom.hide();\n}\n\nfunction button1_click(sender) {\n\n    var nodeBindInfo = {};\n    var variantNode = [];\n    hwGrid.editStop(true);\n    for(var i = 0; i < hwGrid.getRowsNum(); i++) {\n        variantNode.push({\n            nodeVar: hwGrid.cells2(i, 1).getValue(),\n            modelVar: hwGrid.cells2(i, 4).getValue()\n        });\n    }\n\n    var variantProcess = [];\n    hwGrid1.editStop(true);\n    for(var i = 0; i < hwGrid1.getRowsNum(); i++) {\n        variantProcess.push({\n            nodeVar: hwGrid1.cells2(i, 1).getValue(),\n            modelVar: hwGrid1.cells2(i, 4).getValue()\n        });\n    }\n    nodeBindInfo.modelId = nodeInfo.modelId;\n    nodeBindInfo.nodeId = nodeInfo.variantNode.taskNodeid;\n    nodeBindInfo.nodeName = nodeInfo.variantNode.taskNodeName;\n    nodeBindInfo.variantNode = variantNode;\n    nodeBindInfo.variantProcess = variantProcess;\n    nodeBindInfo.formId = hwTree.getSelectedItemId();\n\n    return nodeBindInfo;\n\n\n\n    // loadVmdFile(\"modules/hw38ca28ed/hw35989c15/hw2e8bdc0a.vmd\");\n\n\n}\n\nvar vmdPro = {};\n\nfunction loadVmdFile(path) {\n\n    if(!vmd.vmdUploadPath) {\n        Ext.Msg.alert('出错', '请检查服务配置config.js')\n        return\n    }\n    //默认加载登录测试页面\n    var filename = path;\n    var myMask = new Ext.LoadMask(Ext.getBody(), {\n        msg: \"模块加载中,请稍后...\",\n        msgCls: 'z-index:10000;'\n    });\n    var url = vmd.vmdUploadPath + 'FileService?FileName=' + filename;\n    if(!filename) url = \"templete/module.html\";\n\n    myMask.show();\n    Ext.Ajax.request({\n        url: url,\n        timeout: 5000,\n        success: function(result) {\n            var res;\n            try {\n                res = Ext.util.JSON.decode(result.responseText);\n                if(res.errMsg) {\n                    Ext.Msg.alert('错误', res.errMsg);\n                    return\n                }\n            } catch(ex) {\n                res = {};\n            }\n            var vmd;\n            try {\n                vmd = Ext.util.JSON.decode(res.data);\n                //事件\n                vmdPro.events = vmd.vmdevents;\n                //样式\n                vmdPro.css = vmd.vmdcss;\n                //特殊属性\n                vmdPro.props = Ext.decode(vmd.vmdprops);\n                vmdPro.vmdWorkFlow = Ext.decode(vmd.vmdWorkFlow);\n            } catch(ex) {\n                Ext.Msg.alert('反序列化失败', ex.message)\n            }\n            //结构\n            var layout = {\n                \"components\": [{\n                    \"cid\": \"viewport\",\n                    \"name\": \"MyViewport\",\n                    \"layoutConfig\": {},\n                    \"userConfig\": {\n                        \"layout\": \"absolute\"\n                    }\n                }]\n            }\n\n            layout = {\n                \"components\": [{\n                    \"cid\": \"viewport\",\n                    \"name\": \"MyViewport\",\n                    \"layoutConfig\": {},\n                    \"userConfig\": {\n                        \"layout\": \"absolute\"\n                    }\n                }, {\n                    \"cid\": \"vmddataset\"\n                }, {\n                    \"cid\": \"vmdvariable\"\n                }]\n            }\n            if(vmd && vmd.vmdlayout) {\n                // xds.vmd.layoutStr = vmd.vmdlayout;\n                layout = Ext.util.JSON.decode(vmd.vmdlayout);\n                //数据集\n                if(!layout.components[1]) {\n                    layout.components.push({\n                        cid: 'vmddataset'\n                    })\n                }\n                //变量\n                if(!layout.components[2]) {\n                    layout.components.push({\n                        cid: 'vmdvariable'\n                    })\n                }\n                vmdPro.layoutStr = Ext.encode(layout);\n            }\n            myMask.hide()\n        },\n        failure: function(result) {\n            myMask.hide()\n            Ext.Msg.alert('加载失败', '错误' + result.status + '：' + result.statusText)\n\n        }\n\n    })\n}\n\nfunction saveVmdFile(path, bodyStr, callback) {\n    var myMask = new Ext.LoadMask(Ext.getBody(), {\n        msg: \"正在保存中,请稍后...\",\n        msgCls: 'z-index:10000;'\n    });\n    myMask.show();\n    //默认保存登录测试页面\n    var filename = path;\n    var tastList = {\n        vmdState: false,\n        htmlState: false\n    };\n    var saveVmd = function(filename, bodyStr, taskName) {\n        Ext.Ajax.request({\n            url: vmd.vmdUploadPath + 'FileService',\n            // defaultPostHeader: 'text/plain',\n            timeout: 5000,\n            success: function(result) {\n                var res = Ext.util.JSON.decode(result.responseText);\n                if(res.errMsg) {\n                    //vmdstate = true;\n                    tastList[taskName] = true;\n                    Ext.Msg.alert('错误', res.errMsg);\n                    return;\n                }\n                //Ext.Msg.alert('提示', '保存成功！');\n                //vmdstate = true;\n                tastList[taskName] = true;\n                myMask.hide()\n            },\n            failure: function(result) {\n                //vmdstate = true;\n                tastList[taskName] = true;\n                Ext.Msg.alert('错误', '网络超时，保存失败！')\n                myMask.hide()\n\n            },\n            headers: {\n                token: '',\n                FileName: filename\n            },\n            params: {\n                body: bodyStr\n            }\n\n        });\n    }\n\n    //module.html\n\n    var readModuleTemplete = function(filename, codeStr, cls) {\n        hwDas.ajax({\n            das: false,\n            url: xds.vmd.getReleasePath(),\n            type: 'get',\n            dataType: 'html',\n            success: function(data) {\n                //解析vmd为html文件\n                var title = unescape(xds.vmd.params.name() || '')\n                var html = String.format(data, codeStr, cls, title, xds.vmd.css || '');\n                saveVmd(filename, html, \"htmlState\");\n            },\n            error: function(data) {\n                Ext.Msg.alert('提示', '加载模块模版文件出错！');\n            }\n        })\n    }\n\n    saveVmd(filename, bodyStr, \"vmdState\")\n\n    var page = xds.project.getJson()[0];\n    var codeStr = SourceX.JonsScript(page);\n\n    var cls = page.name;\n    var htmlfile = filename.replace('.vmd', '.html');\n    readModuleTemplete(htmlfile, codeStr, cls)\n\n\n    var runner = new Ext.util.TaskRunner();\n    var taskRun = function() {\n        //vmd文件和html文件保存成功后才提示\n        if(tastList.vmdState && tastList.htmlState) {\n            Ext.Msg.alert('提示', '保存成功！', function() {\n                if(callback) {\n                    window.close()\n                }\n            });\n            runner.stop(task); //停止 任务\n            if(callback) callback();\n        }\n    }\n    var task = {\n        run: taskRun,\n        interval: 100,\n        duration: 5000\n    }\n\n    runner.start(task);\n\n\n\n}\n\nfunction hwTree_nodeClick(sender,id){\n    var mytree=hwTree;\n    var selnode = mytree.itemObj[id];\n    if(selnode.isModel&&!mytree.isItemChecked(id))\n    {\n       mytree.setSubChecked(id,true)\n    }\n}\n\nfunction hwTree_Check(sender,id,state){\n     var mytree=hwTree;\n   mytree.selectItem( id,true );\nmytree.setSubChecked(id,true)\n}","vmdcss":"","vmdprops":"\"\"","type":"module"}