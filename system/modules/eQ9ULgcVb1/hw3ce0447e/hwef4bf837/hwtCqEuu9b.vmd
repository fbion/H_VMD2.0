{"vmdversion":"2.0.4.190627","vmdlayout":"{\"components\":[{\"cid\":\"viewport\",\"id\":\"MyViewport\",\"layoutConfig\":{},\"userConfig\":{\"layout\":\"border\",\"afterrender\":\"MyViewport_afterrender\",\"beforerender\":\"MyViewport_beforerender\"},\"cn\":[{\"cid\":\"panel\",\"id\":\"p_ace\",\"layoutConfig\":{},\"userConfig\":{\"x\":0,\"y\":70,\"layout\":\"fit\",\"height\":\"\",\"border\":true,\"header\":false,\"region\":\"center\",\"autoScroll\":false,\"id\":\"p_ace\",\"afterrender\":\"p_ace_afterrender\"},\"cn\":[{\"cid\":\"vmdAceEditor\",\"id\":\"MyAce\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"west\",\"hidden\":false,\"disabled\":false}}]},{\"cid\":\"panel\",\"id\":\"panel1\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"west\",\"header\":false,\"layout\":\"border\",\"border\":true,\"height\":50,\"width\":230,\"split\":true,\"collapseMode\":\"mini\",\"bodyStyle\":\"background-color: #fff\"},\"cn\":[{\"cid\":\"tabpanel\",\"id\":\"MyTabs\",\"layoutConfig\":{},\"userConfig\":{\"activeTab\":0,\"region\":\"center\",\"split\":true,\"collapseMode\":\"mini\",\"unstyled\":true,\"maskDisabled\":true,\"activeItem\":\"panel2\"},\"cn\":[{\"cid\":\"panel\",\"id\":\"panel2\",\"layoutConfig\":{},\"userConfig\":{\"title\":\"组件\",\"width\":249,\"height\":362,\"border\":false,\"header\":false,\"layout\":\"border\",\"style\":\"\",\"bodyStyle\":\"background-color: #fff\"},\"cn\":[{\"cid\":\"vmdTree\",\"id\":\"compsTree\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"north\",\"split\":true,\"afterrender\":\"hwTree3_afterrender\",\"id\":\"compsTree\",\"nodeClick\":\"compsTree_nodeClick\",\"height\":213,\"anchor\":\"100% 40%\",\"style\":\"height: 100px\",\"minHeight\":150,\"width\":\"\"}},{\"cid\":\"tabpanel\",\"id\":\"MyTabs1\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"center\",\"bodyStyle\":\"background-color: #fff;    border: 0px solid;\",\"hideBorders\":false,\"autoDestroy\":false,\"unstyled\":true,\"anchor\":\"100% 30%\",\"minHeight\":150,\"activeTab\":0},\"cn\":[{\"cid\":\"panel\",\"id\":\"panel3\",\"layoutConfig\":{},\"userConfig\":{\"title\":\"属性\",\"header\":false,\"layout\":\"fit\",\"border\":false},\"cn\":[{\"cid\":\"vmdTree\",\"id\":\"compPropertys\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"compPropertys\",\"afterrender\":\"compPropertys_afterrender\",\"nodeClick\":\"compPropertys_nodeClick\",\"doubleClick\":\"compPropertys_doubleClick\"}}]},{\"cid\":\"panel\",\"id\":\"panel4\",\"layoutConfig\":{},\"userConfig\":{\"title\":\"方法\",\"border\":false,\"header\":false,\"layout\":\"fit\"},\"cn\":[{\"cid\":\"vmdTree\",\"id\":\"compMethods\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"compMethods\",\"afterrender\":\"compMethods_afterrender\",\"nodeClick\":\"compMethods_nodeClick\",\"doubleClick\":\"compMethods_doubleClick\"}}]},{\"cid\":\"panel\",\"id\":\"panel5\",\"layoutConfig\":{},\"userConfig\":{\"title\":\"事件\",\"border\":false,\"header\":false,\"layout\":\"fit\"},\"cn\":[{\"cid\":\"vmdTree\",\"id\":\"compEvent\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"compEvent\",\"afterrender\":\"compEvent_afterrender\",\"nodeClick\":\"compEvent_nodeClick\",\"doubleClick\":\"compEvent_doubleClick\"}}]}]},{\"cid\":\"panel\",\"id\":\"panel7\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"south\",\"height\":150,\"layout\":\"border\",\"title\":\"说明\",\"split\":true,\"collapseMode\":\"standard\",\"border\":false,\"header\":false,\"autoScroll\":false,\"anchor\":\"100% 30%\",\"minHeight\":150},\"cn\":[{\"cid\":\"htmleditor\",\"id\":\"hwEditor\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"center\",\"enableColors\":false,\"enableFont\":false,\"enableAlignments\":false,\"enableFontSize\":false,\"enableFormat\":false,\"enableLinks\":false,\"enableLists\":false,\"enableSourceEdit\":false,\"afterrender\":\"hwEditor_afterrender\",\"style\":\"background-color: #fff;    border-left: 0px;    border-right: 0px;    margin-top: -5\",\"floatable\":false,\"margins\":\"-3\",\"split\":false,\"autoHide\":false,\"animFloat\":false,\"hidden\":false}}]}]},{\"cid\":\"panel\",\"id\":\"panel6\",\"layoutConfig\":{},\"userConfig\":{\"title\":\"公共方法\",\"border\":false,\"header\":false,\"layout\":\"border\",\"bodyStyle\":\"background-color: #fff\"},\"cn\":[{\"cid\":\"panel\",\"id\":\"panel8\",\"layoutConfig\":{},\"userConfig\":{\"width\":236,\"header\":false,\"border\":false,\"region\":\"north\",\"height\":30,\"layout\":\"fit\"},\"cn\":[{\"cid\":\"vmdComlist\",\"id\":\"comlist\",\"layoutConfig\":{},\"userConfig\":{\"style\":\"border: 1px solid #dfdfdf;    border-right: 0;    font-size: 13px;\",\"region\":\"center\",\"width\":388,\"editable\":true,\"query\":false,\"afterrender\":\"comlist_afterrender\",\"collapseMode\":\"mini\",\"split\":false,\"minWidth\":\"\",\"selectChanged\":\"comlist_selectChanged\",\"listWidth\":\"\"}}]},{\"cid\":\"vmdTree\",\"id\":\"publicMethodsTree\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"publicMethodsTree\",\"afterrender\":\"publicMethodsTree_afterrender\",\"nodeClick\":\"publicMethodsTree_nodeClick\",\"doubleClick\":\"publicMethodsTree_doubleClick\",\"anchor\":\"100% 70%\",\"region\":\"center\",\"minHeight\":150}},{\"cid\":\"panel\",\"id\":\"panel\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"south\",\"height\":250,\"layout\":\"border\",\"title\":\"说明\",\"split\":true,\"collapseMode\":\"standard\",\"border\":false,\"header\":false,\"autoScroll\":false,\"anchor\":\"100% 30%\",\"minHeight\":150},\"cn\":[{\"cid\":\"container\",\"id\":\"hwEditor1\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"center\",\"id\":\"hwEditor1\",\"autoScroll\":true}}]}]}]}]},{\"cid\":\"container\",\"id\":\"div\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"north\",\"style\":\"padding: 5px\",\"layout\":\"auto\",\"height\":43},\"cn\":[{\"cid\":\"vmdButton\",\"id\":\"button\",\"layoutConfig\":{},\"userConfig\":{\"type\":\"primary\",\"height\":\"\",\"icon\":\"icon-save font\",\"text\":\"保存\",\"click\":\"button_click\"}},{\"cid\":\"label\",\"id\":\"label\",\"layoutConfig\":{},\"userConfig\":{\"text\":\"（温馨提示：编辑后请点击保存）\",\"style\":\"padding-left: 10px;    font-family: Microsoft YaHei;    font-size: 14px;    color: #f7ba2a;    color: #ff4949;\"}}]}]},{\"cid\":\"vmddataset\",\"id\":\"数据集\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdvariable\",\"id\":\"变量\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdsubviewport\",\"id\":\"SubView_Window\",\"layoutConfig\":{},\"userConfig\":{}}]}","vmdevents":"var path = getUrlParam('path');\nvar wopener = opener || parent\nvar readonly = getUrlParam('readonly');\nvar editServer\nif (wopener.hwdasFileServer)\n    editServer = wopener.hwdasFileServer;\nelse {\n    editServer = {\n        host: vmdSettings.dataServiceIp,\n        mark: 'vmd'\n    }\n}\nvar comData = []; // 定义公共方法搜索列表数据\nif (wopener.def_platformControl) {\n    def_platformControl = wopener.def_platformControl;\n}\nvar isController = vmd.getUrlParam('isController');\nif (wopener.publicMethodsType)\n    window.publicMethodsType = wopener.publicMethodsType;\nelse\n    window.publicMethodsType = {\n        fun: \"fun\",\n        Category: \"Category\",\n        pro: \"pro\",\n        pbVar: \"pbvar\"\n    };\n//---------------\nif (wopener.allPublicMethods) {\n    window.allPublicMethods = wopener.allPublicMethods;\n} else\n    window.allPublicMethods = {\n        text: \"vmd2.0\",\n        value: {},\n        name: \"vmd\",\n        Class: \"vmd\",\n        type: publicMethodsType.Category,\n        items: {}\n    };\n//---------------------------------\n// if (wopener.allHwDasMethods) {\n//     window.allHwDasMethods = wopener.allHwDasMethods;\n// } else\n//     window.allHwDasMethods = {\n//         text: \"数据服务\",\n//         value: {},\n//         name: \"hwDas\",\n//         Class: \"hwDas\",\n//         type: publicMethodsType.Category,\n//         items: {}\n//     };\n// //---------------------------------\n// if (wopener.allWorkFlowMethods) {\n//     window.allWorkFlowMethods = wopener.allWorkFlowMethods;\n// } else\n//     window.allWorkFlowMethods = {\n//         text: \"工作流\",\n//         value: {},\n//         name: \"workFlow\",\n//         Class: \"workFlow\",\n//         type: publicMethodsType.Category,\n//         items: {}\n//     };\n// //---------------------------------\n// if (wopener.allMessageCenterMethods) {\n//     window.allMessageCenterMethods = wopener.allMessageCenterMethods;\n// } else\n//     window.allMessageCenterMethods = {\n//         text: \"消息中心\",\n//         value: {},\n//         name: \"hwMSC\",\n//         Class: \"hwMSC\",\n//         type: publicMethodsType.Category,\n//         items: {}\n//     };\n// //--------------------------------- \n// if (wopener.allAuthMethods) {\n//     window.allAuthMethods = wopener.allAuthMethods;\n// } else\n//     window.allAuthMethods = {\n//         text: \"认证中心\",\n//         value: {},\n//         name: \"hwAuth\",\n//         Class: \"hwAuth\",\n//         type: publicMethodsType.Category,\n//         items: {}\n//     };\nif (parent.allMicService) {\n    window.allMicService = parent.allMicService;\n} else\n    window.allMicService = {\n        text: \"微服务\",\n        value: {},\n        name: \"micService\",\n        Class: \"\",\n        type: publicMethodsType.Category,\n        items: {}\n    };\n//---------------------------------\nif (wopener.init_def_platformFun) {\n    wopener.init_def_platformFun({\n        vmd: allPublicMethods,\n        micService: allMicService\n        // hwDas: allHwDasMethods,\n        // workFlow: allWorkFlowMethods,\n        // hwMSC: allMessageCenterMethods,\n        // hwAuth: allAuthMethods\n    });\n    wopener.init_def_platformVmd();\n    def_platformWidget = wopener.def_platformWidget;\n}\n//ext框架类自动识别\ndef_platformExtjs = wopener.def_platformExtjs;\nvar components = wopener.comTree || wopener.xds && wopener.xds.inspector.root.childNodes;\n// aceEditCt = new vmd.comp.AceEx({\n//     language: 'javascript',\n//     id: \"ace_code\"\n// })\n//aceEdit = MyAce\n// if (vmd.getUrlParam('enableright')) {\n//     aceEditCt = new vmd.comp.Ace({\n//         language: 'javascript',\n//         id: \"ace_code\"\n//     })\n//     aceEdit = aceEditCt\n// }\n// if (wopener.Ext.getCmp(\"aceWin\")) {\n//     p_aceEdit = wopener.Ext.getCmp(\"aceWin\")\n//     aceEdit.value = p_aceEdit.val;\n//     wopener.Ext.getCmp(\"aceWin\").on('close', closeAce)\n// }\nvar uxaceWin = parent.Ext && parent.Ext.getCmp(\"uxaceWin\");\nvar page = this;\n\nfunction closeAce() {\n    if (uxaceWin && isController) {\n        uxaceWin.val = MyAce.getValue();\n        uxaceWin.un('close', closeAce)\n        uxaceWin.closeFn();\n    }\n}\n\nfunction hwTree3_afterrender(sender) {\n    // bindtree()\n}\n\nfunction bindtree() {\n    var mytree = compsTree;\n    mytree.iconURL = \"\";\n    mytree.deleteChildItems(0);\n    mytree.loadJSONObject({\n        id: 0,\n        text: \"我的组件\",\n        item: []\n    });\n    mytree.itemObj = {};\n    Ext.each(components, function(comp) {\n        mytree.insertNewChild(0, comp.id, comp.text);\n        var treenode = mytree.item(comp.id);\n        treenode.cid = comp.component.cid;\n        treenode.iconCls = comp.attributes.iconCls;\n        mytree.itemObj[comp.id] = treenode;\n        var iconImg = Ext.get(comp.ui.iconNode).getStyle('background-image').replace('url(\"', '').replace('\")', '')\n        mytree.setItemImage2(comp.id, iconImg, iconImg, iconImg)\n        if (comp.childNodes.length > 0) {\n            Ext.each(comp.childNodes, function(childComp) {\n                addComTree(childComp, comp.id);\n            })\n        }\n    })\n}\n\nfunction addComTree(comp, parentId) {\n    var mytree = compsTree;\n    mytree.insertNewChild(parentId, comp.id, comp.text);\n    var treenode = mytree.item(comp.id);\n    treenode.cid = comp.component.cid;\n    treenode.iconCls = comp.attributes.iconCls;\n    mytree.itemObj[comp.id] = treenode;\n    var iconImg = Ext.get(comp.ui.iconNode).getStyle('background-image');\n    var iconImg = Ext.get(comp.ui.iconNode).getStyle('background-image').replace('url(\"', '').replace('\")', '')\n    mytree.setItemImage2(comp.id, iconImg, iconImg, iconImg)\n    if (comp.childNodes.length > 0) {\n        Ext.each(comp.childNodes, function(childComp) {\n            addComTree(childComp, comp.id);\n        })\n    }\n    mytree.closeItem(comp.id)\n}\n\nfunction compsTree_nodeClick(sender, id) {\n    var mytree = compsTree;\n    var m_mytree = compMethods;\n    var p_mytree = compPropertys;\n    var e_mytree = compEvent;\n    clearcompMethods();\n    clearcompPropertys();\n    clearcompEvent();\n    var selNode = mytree.getSelectedItemId();\n    if (!selNode)\n        return;\n    if (def_platformControl[selNode]) {\n        var methods = def_platformControl[def_platformControl[selNode][\"!type\"].replace(\"+\", \"\")]\n        console.log(methods)\n        if (methods) {\n            for (var method in methods.prototype) {\n                if (methods.prototype[method][\"type\"] == 'fn()') {\n                    if (m_mytree.rendered) {\n                        if (methods.prototype[method][\"name\"] != '') {\n                            m_mytree.insertNewChild(0, method, method + \"(\" + methods.prototype[method][\"name\"] + \")\");\n                        } else {\n                            m_mytree.insertNewChild(0, method, method);\n                        }\n                        m_mytree.setItemImage2(method, \"tree/fun.png\", \"tree/fun.png\", \"tree/fun.png\")\n                        var treenode = m_mytree.item(method);\n                        treenode.content = methods.prototype[method][\"!doc\"];\n                        treenode.pro = methods.prototype[method][\"pro\"];\n                        m_mytree.itemObj[method] = treenode;\n                    }\n                } else if (methods.prototype[method][\"type\"] == 'event') {\n                    if (e_mytree.rendered) {\n                        if (methods.prototype[method][\"name\"] != '') {\n                            e_mytree.insertNewChild(0, method, method + \"(\" + methods.prototype[method][\"name\"] + \")\");\n                        } else {\n                            e_mytree.insertNewChild(0, method, method);\n                        }\n                        e_mytree.setItemImage2(method, \"tree/event.png\", \"tree/event.png\", \"tree/event.png\")\n                        var treenode = e_mytree.item(method);\n                        treenode.content = methods.prototype[method][\"!doc\"];\n                        treenode.pro = methods.prototype[method][\"pro\"];\n                        e_mytree.itemObj[method] = treenode;\n                    }\n                } else {\n                    if (p_mytree.rendered) {\n                        if (methods.prototype[method][\"name\"] != '') {\n                            p_mytree.insertNewChild(0, method, method + \"(\" + methods.prototype[method][\"name\"] + \")\");\n                        } else {\n                            p_mytree.insertNewChild(0, method, method);\n                        }\n                        p_mytree.setItemImage2(method, \"tree/pro.png\", \"tree/pro.png\", \"tree/pro.png\")\n                        var treenode = p_mytree.item(method);\n                        treenode.content = methods.prototype[method][\"!doc\"];\n                        p_mytree.itemObj[method] = treenode;\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction addComMethods(methods) {\n    var mytree = compsTree;\n    var m_mytree = compMethods;\n    var selNode = mytree.getSelectedItemId()\n    if (!selNode)\n        return;\n    if (def_platformControl[selNode]) {\n        var methods = def_platformControl[def_platformControl[selNode][\"!type\"].replace(\"+\", \"\")]\n        if (methods) {\n            for (var method in methods.prototype) {\n                if (methods.prototype[method][\"type\"] == 'fn()') {\n                    if (methods.prototype[method][\"name\"] != '') {\n                        m_mytree.insertNewChild(0, method, method + \"(\" + methods.prototype[method][\"name\"] + \")\");\n                    } else {\n                        m_mytree.insertNewChild(0, method, method);\n                    }\n                    m_mytree.setItemImage2(method, \"tree/fun.png\", \"tree/fun.png\", \"tree/fun.png\")\n                    var treenode = m_mytree.item(method);\n                    treenode.content = methods.prototype[method][\"!doc\"];\n                    treenode.pro = methods.prototype[method][\"pro\"];\n                    m_mytree.itemObj[method] = treenode;\n                }\n            }\n        }\n    }\n}\n\nfunction addComEvent(methods) {\n    var mytree = compsTree;\n    var e_mytree = compEvent;\n    var selNode = mytree.getSelectedItemId()\n    if (!selNode)\n        return;\n    if (def_platformControl[selNode]) {\n        var methods = def_platformControl[def_platformControl[selNode][\"!type\"].replace(\"+\", \"\")]\n        if (methods) {\n            for (var method in methods.prototype) {\n                if (methods.prototype[method][\"type\"] == 'event') {\n                    if (methods.prototype[method][\"name\"] != '') {\n                        e_mytree.insertNewChild(0, method, method + \"(\" + methods.prototype[method][\"name\"] + \")\");\n                    } else {\n                        e_mytree.insertNewChild(0, method, method);\n                    }\n                    e_mytree.setItemImage2(method, \"tree/event.png\", \"tree/event.png\", \"tree/event.png\")\n                    var treenode = e_mytree.item(method);\n                    treenode.content = methods.prototype[method][\"!doc\"];\n                    treenode.pro = methods.prototype[method][\"pro\"];\n                    e_mytree.itemObj[method] = treenode;\n                }\n            }\n        }\n    }\n}\n\nfunction addComPropertys(methods) {\n    var mytree = compsTree;\n    var p_mytree = compPropertys;\n    var selNode = mytree.getSelectedItemId()\n    if (!selNode)\n        return\n    if (def_platformControl[selNode]) {\n        var methods = def_platformControl[def_platformControl[selNode][\"!type\"].replace(\"+\", \"\")]\n        if (methods) {\n            for (var method in methods.prototype) {\n                if (methods.prototype[method][\"!type\"] == '') {\n                    p_mytree.insertNewChild(0, method, method);\n                    p_mytree.setItemImage2(method, \"tree/pro.png\", \"tree/pro.png\", \"tree/pro.png\")\n                    var treenode = p_mytree.item(method);\n                    treenode.content = methods.prototype[method][\"!doc\"];\n                    p_mytree.itemObj[method] = treenode;\n                }\n            }\n        }\n    }\n}\n\nfunction clearcompPropertys() {\n    var mytree = compPropertys;\n    if (mytree.rendered) {\n        mytree.deleteChildItems(0);\n        mytree.loadJSONObject({\n            id: 0,\n            text: \"我的属性\",\n            item: []\n        });\n        mytree.itemObj = {};\n    }\n}\n\nfunction clearcompMethods() {\n    var mytree = compMethods;\n    if (mytree.rendered) {\n        mytree.deleteChildItems(0);\n        mytree.loadJSONObject({\n            id: 0,\n            text: \"我的方法\",\n            item: []\n        });\n        mytree.itemObj = {};\n    }\n}\n\nfunction clearcompEvent() {\n    var mytree = compEvent;\n    if (mytree.rendered) {\n        mytree.deleteChildItems(0);\n        mytree.loadJSONObject({\n            id: 0,\n            text: \"我的事件\",\n            item: []\n        });\n        mytree.itemObj = {};\n    }\n}\n\nfunction compPropertys_afterrender(sender) {\n    clearcompPropertys();\n    // addComPropertys();\n}\n\nfunction compMethods_afterrender(sender) {\n    clearcompMethods();\n    addComMethods();\n}\n\nfunction compEvent_afterrender(sender) {\n    clearcompEvent();\n    addComEvent();\n}\n\nfunction compPropertys_nodeClick(sender, id) {\n    hwEditor.setValue(compPropertys.itemObj[id].content);\n    hwEditor.readOnly = true;\n}\n\nfunction hwEditor_afterrender(sender) {\n    hwEditor.readOnly = true;\n}\n\nfunction compMethods_nodeClick(sender, id) {\n    hwEditor.setValue(compMethods.itemObj[id].content);\n    hwEditor.readOnly = true;\n}\n\nfunction compEvent_nodeClick(sender, id) {\n    hwEditor.setValue(compEvent.itemObj[id].content);\n    hwEditor.readOnly = true;\n}\n\nfunction compPropertys_doubleClick(sender, id) {\n    MyAce.insert(\"\\n\" + compsTree.getSelectedItemId() + \".\" + id + \";\");\n    MyAce.focus()\n}\n\nfunction compMethods_doubleClick(sender, id) {\n    // console.log( compMethods.itemObj[id].pro)\n    MyAce.insert(\"\\n\" + compsTree.getSelectedItemId() + \".\" + compMethods.itemObj[id].pro);\n    MyAce.focus()\n}\n\nfunction compEvent_doubleClick(sender, id) {\n    MyAce.insert(\"\\n function \" + compsTree.getSelectedItemId() + \"_\" + compEvent.itemObj[id].pro + \"{}\");\n    MyAce.focus()\n}\n\nfunction publicMethodsTree_afterrender(sender) {\n    var mytree = publicMethodsTree;\n    mytree.deleteChildItems(0);\n    mytree.loadJSONObject({\n        id: 0,\n        text: \"我的组件\",\n        item: []\n    });\n    mytree.itemObj = {};\n    //添加分类\n    for (var Mymethods in allPublicMethods.items) {\n        var id = vmd.util.guid();\n        var methods = allPublicMethods.items[Mymethods];\n        if (methods.name) {\n            mytree.insertNewChild(0, id, methods.name + \"(\" + methods.text + \")\");\n        } else {\n            mytree.insertNewChild(0, id, methods.text);\n        }\n        var treenode = mytree.item(id);\n        treenode.insert = methods.insert;\n        treenode.name = methods.name;\n        treenode.comment = methods.comment;\n        if (methods.name) {\n            treenode.text = methods.name + \"(\" + methods.text + \")\"\n        } else {\n            treenode.text = methods.text\n        }\n        mytree.itemObj[id] = treenode;\n        // if(!!treenode.insert) {\n        comData.push({\n            id: id,\n            name: treenode.text\n        })\n        // }\n        if (methods.type == publicMethodsType.Category)\n            mytree.setItemImage2(id, \"folderClosed.gif\", \"folderOpen.gif\", \"folderClosed.gif\")\n        if (methods.type == publicMethodsType.fun)\n            mytree.setItemImage2(id, \"tree/fun.png\", \"tree/fun.png\", \"tree/fun.png\")\n        if (methods.type == publicMethodsType.pro)\n            mytree.setItemImage2(id, \"tree/pro.png\", \"tree/pro.png\", \"tree/pro.png\")\n        if (methods.items) {\n            for (var method in methods.items) {\n                addMethodsTree(methods.items[method], id);\n            }\n        }\n        mytree.closeItem(id)\n    }\n    var addAllMethodsApi = function(allMethods, isMicSer) {\n        var hwid = vmd.util.guid();\n        var hwmethods = allMethods;\n        if (hwmethods.name) {\n            mytree.insertNewChild(0, hwid, hwmethods.name + \"(\" + hwmethods.text + \")\");\n        } else {\n            mytree.insertNewChild(0, hwid, hwmethods.text);\n        }\n        var treenode = mytree.item(hwid);\n        treenode.insert = hwmethods.insert;\n        treenode.name = hwmethods.name;\n        treenode.comment = hwmethods.comment;\n        mytree.itemObj[hwid] = treenode;\n        if (hwmethods.type == publicMethodsType.Category) {\n            if (isMicSer) {\n                mytree.setItemImage2(hwid, \"tree/micservice.png\", \"tree/micservice.png\", \"tree/micservice.png\")\n            } else {\n                mytree.setItemImage2(hwid, \"folderClosed.gif\", \"folderOpen.gif\", \"folderClosed.gif\")\n            }\n        }\n        if (hwmethods.items) {\n            for (var method in hwmethods.items) {\n                addMethodsTree(hwmethods.items[method], hwid, isMicSer);\n            }\n        }\n        mytree.closeItem(hwid)\n    }\n    if (allMicService) {\n        addAllMethodsApi(allMicService, true)\n    }\n    // //添加hwdas的节点信息\n    // if (allHwDasMethods) {\n    //     addAllMethodsApi(allHwDasMethods)\n    // }\n    // // 工作流\n    // if (allWorkFlowMethods) {\n    //     addAllMethodsApi(allWorkFlowMethods)\n    // }\n    // // 消息中心\n    // if (allMessageCenterMethods) {\n    //     addAllMethodsApi(allMessageCenterMethods)\n    // }\n    // // 认证中心\n    // if (allAuthMethods) {\n    //     addAllMethodsApi(allAuthMethods)\n    // }\n}\n\nfunction addMethodsTree(method, parentId, isMicSer) {\n    var mytree = publicMethodsTree;\n    var id = vmd.util.guid();\n    if (method.name && !isMicSer) {\n        mytree.insertNewChild(parentId, id, method.name + \"(\" + method.text + \")\");\n    } else {\n        mytree.insertNewChild(parentId, id, method.text);\n    }\n    //mytree.insertNewChild(parentId, id, method.text);\n    var treenode = mytree.item(method.name);\n    treenode.insert = method.insert;\n    treenode.name = method.name;\n    treenode.comment = method.comment;\n    if (method.name) {\n        treenode.text = method.name + \"(\" + method.text + \")\"\n    } else {\n        treenode.text = method.text\n    }\n    mytree.itemObj[id] = treenode;\n    // if(!!treenode.insert) {\n    comData.push({\n        id: id,\n        name: treenode.text\n    })\n    // }\n    if (method.type == publicMethodsType.Category) {\n        if (isMicSer && method.name) {\n            mytree.setItemImage2(id, \"tree/micser/\" + method.name.toLowerCase() + \".png\", \"tree/micser/\" + method.name.toLowerCase() + \".png\", \"tree/micser/\" + method.name.toLowerCase() + \".png\")\n        } else if (isMicSer) {\n            mytree.setItemImage2(id, \"tree/micservice.png\", \"tree/micservice.png\", \"tree/micservice.png\")\n        } else {\n            mytree.setItemImage2(id, \"folderClosed.gif\", \"folderOpen.gif\", \"folderClosed.gif\")\n        }\n    }\n    if (method.type == publicMethodsType.fun)\n        mytree.setItemImage2(id, \"tree/fun.png\", \"tree/fun.png\", \"tree/fun.png\")\n    if (method.type == publicMethodsType.pro)\n        mytree.setItemImage2(id, \"tree/pro.png\", \"tree/pro.png\", \"tree/pro.png\")\n    if (method.items) {\n        for (var c_method in method.items) {\n            addMethodsTree(method.items[c_method], id);\n        }\n    }\n    mytree.closeItem(id)\n}\n\nfunction publicMethodsTree_nodeClick(sender, id) {\n    var hwD = document.getElementById(\"hwEditor1\");\n    var contentHtml = '';\n    if (!!publicMethodsTree.itemObj[id].comment) {\n        contentHtml = publicMethodsTree.itemObj[id].comment;\n    }\n    hwD.innerHTML = contentHtml;\n    // hwEditor1.setValue(publicMethodsTree.itemObj[id].comment);\n    // hwEditor1.readOnly = true;\n}\n\nfunction publicMethodsTree_doubleClick(sender, id) {\n    MyAce.insert(publicMethodsTree.itemObj[id].insert);\n    MyAce.focus()\n}\n\nfunction MyViewport_afterrender(sender) {\n    wopener.Ext.getCmp(\"aceWin\") && wopener.Ext.getCmp(\"aceWin\").loading.hide();\n    setTimeout(function() {\n        bindtree()\n    }, 200)\n    if (vmd.getUrlParam('enableright')) {\n        panel1.hide()\n        this.doLayout()\n    }\n    if (readonly) {\n        div.hide();\n        this.doLayout();\n    }\n    if (!path) {\n        Tips.tips('路径不能为空！', 'warning')\n        return;\n    }\n    var filename = path.substring(path.lastIndexOf('/') + 1)\n    var filenameArr = filename.split('.');\n    var ext = filenameArr[filenameArr.length - 1];\n    var isloadjs = false;\n    switch (ext) {\n        case 'js':\n            ext = 'javascript';\n            break;\n        case 'html':\n        case 'htm':\n            ext = 'html';\n            break;\n        case 'json':\n            ext = 'json';\n            break;\n        case 'xml':\n            ext = 'xml';\n            break;\n        case 'md':\n            ext = 'markdown';\n            break;\n        case 'css':\n            ext = 'css';\n            break;\n        default:\n            ext = 'text';\n            break;\n    }\n    //读取文件\n    !isController && hwDas.read(editServer, path, function(result) {\n        MyAce.language=ext;\n        MyAce.getSession().setMode(\"ace/mode/\" + ext);\n        MyAce.setValue(result.data);\n    }, function(err) {\n        Tips.tips(err, 'error')\n    })\n    if(ext!=\"javascript\")\n    {\n        panel1.hide()\n        this.doLayout()\n    }\n}\n\nfunction p_ace_afterrender(sender) {\n    // p_ace.add(aceEditCt);\n    // p_ace.doLayout();\n    // if (typeof(p_aceEdit) != 'undefined' && p_aceEdit) {\n    window.setTimeout(function() {\n        //aceEdit.gotoLine(p_aceEdit.aceline)\n        MyAce.focus()\n        if (vmd.getUrlParam('readonly') === \"true\")\n            MyAce.setReadOnly(true)\n    }, 150)\n    //}\n}\n\nfunction comlist_afterrender(sender) {\n    var store = new vmd.data.Store({\n        data: comData,\n        fields: ['id', 'name']\n    })\n    comlist.store = store;\n    comlist.valueField = 'id';\n    comlist.displayField = 'name';\n    comlist.dropDownFields = 'name';\n    comlist.queryField = 'id';\n}\n\nfunction comlist_selectChanged(sender, combo, record, index) {\n    var nodeId = comlist.getValue();\n    var searchStr = comlist.getText();\n    // 查找树中被搜索的项\n    publicMethodsTree.findItem(searchStr, false, true);\n    var seNode = publicMethodsTree.itemObj[nodeId];\n    if (!seNode.comment) {\n        publicMethodsTree.openItem(nodeId)\n    }\n}\n\nfunction MyViewport_beforerender(sender) {\n    if (uxaceWin && isController) {\n        MyAce.value = uxaceWin.val;\n        uxaceWin.on('close', closeAce);\n        div.hide();\n        page.doLayout();\n    }\n}\n\nfunction button_click(sender, e) {\n    var context = MyAce.getValue() || \" \";\n    if (!path) {\n        Tips.tips('路径不能为空！', 'warning')\n        return;\n    }\n    hwDas.write(editServer, path, context, function(result) {\n        Tips.tips(\"保存文件成功\")\n        if (parent && wopener.saveAceFileEditinfo) {\n            wopener.saveAceFileEditinfo();\n        }\n    }, function(err) {\n        Tips.tips(err, 'error')\n    })\n}","vmdcss":".x-combo-list-item{\n    margin: 5px 0\n}","vmdprops":"\"\"","type":"module","vmdresource":"{\"components\":[{\"cid\":\"vmdrescsss\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdresjss\",\"layoutConfig\":{},\"userConfig\":{},\"cn\":[{\"cid\":\"resjs\",\"id\":\"project.config.js\",\"layoutConfig\":{},\"userConfig\":{}}]},{\"cid\":\"vmdresimgs\",\"layoutConfig\":{},\"userConfig\":{}}]}"}