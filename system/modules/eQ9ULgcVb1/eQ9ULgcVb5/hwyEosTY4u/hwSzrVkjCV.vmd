{"vmdversion":"2.0.4.190627","vmdlayout":"{\"components\":[{\"cid\":\"viewport\",\"id\":\"MainViewport\",\"layoutConfig\":{},\"userConfig\":{\"layout\":\"border\",\"cls\":\"designer-input\",\"afterrender\":\"MainViewport_afterrender\"},\"cn\":[{\"cid\":\"panel\",\"id\":\"panel\",\"layoutConfig\":{},\"userConfig\":{\"x\":80,\"y\":90,\"border\":false,\"header\":false,\"layout\":\"fit\",\"region\":\"center\"},\"cn\":[{\"cid\":\"vmd.ux.TypeSettings\",\"id\":\"hwTypeSettings\",\"layoutConfig\":{},\"userConfig\":{}}]},{\"cid\":\"panel\",\"id\":\"panel1\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"south\",\"header\":false,\"border\":false,\"layout\":\"border\",\"height\":45,\"bodyStyle\":\"border-top:1px solid #ddd;\"},\"cn\":[{\"cid\":\"container\",\"id\":\"div1\",\"layoutConfig\":{\"align\":\"middle\"},\"userConfig\":{\"region\":\"center\",\"border\":false,\"layout\":\"hbox\"},\"cn\":[{\"cid\":\"vmdButton\",\"id\":\"button2\",\"layoutConfig\":{},\"userConfig\":{\"text\":\"当前字段向另一类型相同字段应用\",\"click\":\"button2_click\",\"margins\":\"0 0 0 5\",\"type\":\"text\",\"beforerender\":\"button2_beforerender\"}}]},{\"cid\":\"container\",\"id\":\"div\",\"layoutConfig\":{\"align\":\"middle\"},\"userConfig\":{\"region\":\"east\",\"layout\":\"hbox\",\"width\":150,\"border\":false},\"cn\":[{\"cid\":\"vmdButton\",\"id\":\"button\",\"layoutConfig\":{},\"userConfig\":{\"type\":\"primary\",\"text\":\"确定\",\"click\":\"button_click\",\"width\":\"\",\"hidden\":false}},{\"cid\":\"vmdButton\",\"id\":\"button1\",\"layoutConfig\":{},\"userConfig\":{\"type\":\"(none)\",\"margins\":\"0 20 0 10\",\"text\":\"关闭\",\"click\":\"button1_click\",\"hidden\":false,\"width\":\"\"}}]}]}]},{\"cid\":\"vmddataset\",\"id\":\"数据集\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdvariable\",\"id\":\"变量\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdsubviewport\",\"id\":\"SubView_Window\",\"layoutConfig\":{},\"userConfig\":{}}]}","vmdevents":"// var util = new ide.ext.DataInputUtils(page, )\nvar page = this;\npage.type = parent.settingWin && parent.settingWin.params.type;\n\nfunction button_click(sender, e) {\n\n    parent.settingWin.setBack(hwTypeSettings.controller, true)\n}\n\nfunction button1_click(sender, e) {\n    parent.settingWin.setBack(hwTypeSettings.controller, false)\n}\n\nfunction button2_click(sender, e) {\n    debugger\n    //向另一类型应用\n    var con = parent.xds.eastlayout.ContentFrame.controller.comp;\n    var type = page.type;\n    if (type == 'grid') {\n        for (var i = 0; i < con.form.settings.fields.length; i++) {\n            if (con.grid.settings.fields[con.grid.activeNo].dictionary.name ==\n                con.form.settings.fields[i].dictionary.name) {\n                var type = con.grid.settings.fields[con.grid.activeNo].fieldsConfig.type;\n                var componet;\n                switch (type) {\n                    case 'text':\n                        componet = new vmd.ux.inputTextProperty.Controller();\n                        break;\n                    case 'number':\n                        componet = new vmd.ux.inputNumberProperty.Controller();\n                        break;\n                    case 'combo':\n                        componet = new vmd.ux.inputComboProperty.Controller();\n                        break;\n                    case 'comboTree':\n                        componet = new vmd.ux.inputComboTreeProperty.Controller();\n                        break;\n                    case 'comboGrid':\n                        componet = new vmd.ux.inputComboGridProperty.Controller();\n                        break;\n                    case 'radioButton':\n                        componet = new vmd.ux.inputRadioButtonProperty.Controller();\n                        break;\n                    case 'checkbox':\n                        componet = new vmd.ux.inputCheckBoxProperty.Controller();\n                        break;\n                    case 'richText':\n                        componet = new vmd.ux.inputRichTextProperty.Controller();\n                        break;\n                    case 'date':\n                        componet = new vmd.ux.inputDateProperty.Controller();\n                        break;\n                }\n                for (var key in componet) {\n                    for (var akey in con.grid.settings.fields[con.grid.activeNo].fieldsConfig) {\n                        if (key == akey && key != 'scope' &&\n                            key.indexOf('click') < 0 && key.indexOf('change') < 0) {\n                            componet[key] = con.grid.settings.fields[con.grid.activeNo].fieldsConfig[akey];\n                        }\n                    }\n                }\n                con.form.settings.fields[i].fieldsConfig = componet;\n            }\n        }\n    } else {\n        for (var i = 0; i < con.grid.settings.fields.length; i++) {\n            if (con.form.settings.fields[con.form.activeNo].dictionary.name ==\n                con.grid.settings.fields[i].dictionary.name) {\n                var type = con.form.settings.fields[con.form.activeNo].fieldsConfig.type;\n                var componet;\n                switch (type) {\n                    case 'text':\n                        componet = new vmd.ux.inputTextProperty.Controller();\n                        break;\n                    case 'number':\n                        componet = new vmd.ux.inputNumberProperty.Controller();\n                        break;\n                    case 'combo':\n                        componet = new vmd.ux.inputComboProperty.Controller();\n                        break;\n                    case 'comboTree':\n                        componet = new vmd.ux.inputComboTreeProperty.Controller();\n                        break;\n                    case 'comboGrid':\n                        componet = new vmd.ux.inputComboGridProperty.Controller();\n                        break;\n                    case 'radioButton':\n                        componet = new vmd.ux.inputRadioButtonProperty.Controller();\n                        break;\n                    case 'checkbox':\n                        componet = new vmd.ux.inputCheckBoxProperty.Controller();\n                        break;\n                    case 'richText':\n                        componet = new vmd.ux.inputRichTextProperty.Controller();\n                        break;\n                    case 'date':\n                        componet = new vmd.ux.inputDateProperty.Controller();\n                        break;\n                }\n                for (var key in componet) {\n                    for (var akey in con.form.settings.fields[con.form.activeNo].fieldsConfig) {\n                        if (key == akey && key != 'scope' &&\n                            key.indexOf('click') < 0 && key.indexOf('change') < 0) {\n                            componet[key] = con.form.settings.fields[con.form.activeNo].fieldsConfig[akey];\n                        }\n                    }\n                }\n                con.grid.settings.fields[i].fieldsConfig = componet;\n            }\n        }\n    }\n\n}\n\nfunction button2_beforerender(sender) {\n    if(page.type == 'grid'){\n        button2.text = '当前字段设置向自由格式应用'\n    }else{\n        button2.text = '当前字段设置向网格格式应用'\n    }\n}\n\nfunction MainViewport_afterrender(sender) {\n\n}","vmdcss":".designer-input ::-webkit-scrollbar {\r\n\t\t    width:12px;\r\n\t\t    height:12px;\r\n}\r\n.designer-input ::-webkit-scrollbar-track {\r\n\tbackground:whiteSmoke;\r\n\t-webkit-box-shadow:inset 0 0 4px rgba(0,0,0,0.1);\t\t\r\n}\r\n.designer-input ::-webkit-scrollbar-thumb {\r\n\tbackground:#c5c5c5;\r\n\tborder-radius:10px;\r\n\tborder:whiteSmoke solid 3px;\t\t\r\n}\r\n.designer-input ::-webkit-scrollbar-thumb:hover {\r\n\tbackground:#b5b5b5;\r\n}","vmdprops":"\"\"","type":"module","vmdresource":"{\"components\":[{\"cid\":\"vmdrescsss\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdresjss\",\"layoutConfig\":{},\"userConfig\":{},\"cn\":[{\"cid\":\"resjs\",\"id\":\"project.config.js\",\"layoutConfig\":{},\"userConfig\":{}}]},{\"cid\":\"vmdresimgs\",\"layoutConfig\":{},\"userConfig\":{}}]}"}