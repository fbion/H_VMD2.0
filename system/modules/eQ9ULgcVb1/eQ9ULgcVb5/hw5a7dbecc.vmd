{"vmdversion":"2.0.4.190514","vmdlayout":"{\"components\":[{\"cid\":\"viewport\",\"id\":\"MyViewport\",\"layoutConfig\":{},\"userConfig\":{\"layout\":\"fit\",\"afterrender\":\"MyViewport_afterrender\",\"beforerender\":\"MyViewport_beforerender\"},\"cn\":[{\"cid\":\"panel\",\"id\":\"panel\",\"layoutConfig\":{},\"userConfig\":{\"x\":0,\"y\":0,\"width\":760,\"height\":410,\"title\":\"属性设置\",\"layout\":\"border\",\"border\":false,\"header\":false,\"unstyled\":false},\"cn\":[{\"cid\":\"panel\",\"id\":\"panel1\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"center\",\"height\":283,\"layout\":\"fit\",\"border\":true,\"header\":false,\"cmargins\":\"\",\"padding\":\"10\",\"unstyled\":false,\"labelAlign\":\"left\",\"labelWidth\":60},\"cn\":[{\"cid\":\"form\",\"id\":\"MyForm\",\"layoutConfig\":{},\"userConfig\":{\"header\":false,\"border\":false,\"labelWidth\":60,\"labelAlign\":\"left\"},\"cn\":[{\"cid\":\"textfield\",\"id\":\"id\",\"layoutConfig\":{},\"userConfig\":{\"fieldLabel\":\"属性名称\",\"allowBlank\":false,\"name\":\"id\",\"id\":\"id\",\"emptyText\":\"请输入属性名称，须字母、数字、下划线\",\"cls\":\"code\",\"vtype\":\"definevar\"}},{\"cid\":\"textarea\",\"id\":\"desc\",\"layoutConfig\":{},\"userConfig\":{\"fieldLabel\":\"属性描述\",\"allowBlank\":true,\"id\":\"desc\",\"emptyText\":\"请输入属性描述，便于代码编辑自动提示用\",\"cls\":\"code\"}},{\"cid\":\"textfield\",\"id\":\"zhname\",\"layoutConfig\":{},\"userConfig\":{\"fieldLabel\":\"中文名称\",\"allowBlank\":true,\"id\":\"zhname\",\"emptyText\":\"请输入属性中文名称（汉化用）\",\"hidden\":false}},{\"cid\":\"vmdCombo\",\"id\":\"bindCmp\",\"layoutConfig\":{},\"userConfig\":{\"fieldLabel\":\"绑定组件\",\"width\":500,\"anchor\":\"100%\",\"id\":\"bindCmp\",\"store\":\"cmpStore\",\"displayField\":\"cmpId\",\"valueField\":\"cmpId\",\"change\":\"bindCmp_change\",\"cls\":\"code\"}},{\"cid\":\"vmdCombo\",\"id\":\"bindValue\",\"layoutConfig\":{},\"userConfig\":{\"fieldLabel\":\"绑定属性\",\"width\":500,\"anchor\":\"100%\",\"id\":\"bindValue\",\"displayField\":\"name\",\"store\":\"cmpPropStore\",\"valueField\":\"name\",\"cls\":\"code\",\"change\":\"bindValue_change\"}},{\"cid\":\"checkbox\",\"id\":\"isPublic\",\"layoutConfig\":{},\"userConfig\":{\"fieldLabel\":\"公共属性\",\"boxLabel\":\"\",\"checked\":true,\"id\":\"isPublic\",\"hidden\":true}},{\"cid\":\"radiogroup\",\"id\":\"cmptype\",\"layoutConfig\":{},\"userConfig\":{\"fieldLabel\":\"属性设置\",\"width\":\"\",\"height\":29,\"id\":\"cmptype\",\"change\":\"cmptype_change\",\"afterrender\":\"cmptype_afterrender\"},\"cn\":[{\"cid\":\"radio\",\"id\":\"hwRadio\",\"layoutConfig\":{},\"userConfig\":{\"boxLabel\":\"文本框\",\"fieldLabel\":\"\",\"checked\":false,\"inputValue\":\"string\"}},{\"cid\":\"radio\",\"id\":\"hwRadio1\",\"layoutConfig\":{},\"userConfig\":{\"fieldLabel\":\"\",\"boxLabel\":\"数字框\",\"inputValue\":\"number\"}},{\"cid\":\"radio\",\"id\":\"hwRadio3\",\"layoutConfig\":{},\"userConfig\":{\"fieldLabel\":\"\",\"boxLabel\":\"布尔组件\",\"inputValue\":\"boolean\"}},{\"cid\":\"radio\",\"id\":\"hwRadio2\",\"layoutConfig\":{},\"userConfig\":{\"fieldLabel\":\"\",\"boxLabel\":\"下拉框\",\"inputValue\":\"combo\"}},{\"cid\":\"radio\",\"id\":\"hwRadio4\",\"layoutConfig\":{},\"userConfig\":{\"boxLabel\":\"数据集\",\"fieldLabel\":\"\",\"inputValue\":\"store\",\"checked\":false}},{\"cid\":\"radio\",\"id\":\"hwRadio5\",\"layoutConfig\":{},\"userConfig\":{\"boxLabel\":\"数据集字段\",\"fieldLabel\":\"\",\"inputValue\":\"storeField\"}}]},{\"cid\":\"panel\",\"id\":\"combo_settings\",\"layoutConfig\":{},\"userConfig\":{\"height\":290,\"layout\":\"absolute\",\"id\":\"combo_settings\",\"header\":true,\"autoHeight\":false,\"hidden\":false,\"title\":\"下拉框属性设置\"},\"cn\":[{\"cid\":\"checkbox\",\"id\":\"combo_multi\",\"layoutConfig\":{},\"userConfig\":{\"x\":10,\"y\":10,\"boxLabel\":\"下拉多选\",\"id\":\"combo_multi\"}},{\"cid\":\"label\",\"id\":\"label\",\"layoutConfig\":{},\"userConfig\":{\"text\":\"下拉框内容(静态json结构)\",\"height\":20,\"autoHeight\":false,\"x\":10,\"y\":40,\"cls\":\"font-14\"}},{\"cid\":\"label\",\"id\":\"label1\",\"layoutConfig\":{},\"userConfig\":{\"x\":190,\"y\":40,\"text\":\"[{text:'dispalytext',value:'dispalyvalue'}]\",\"style\":\"color: red;    font-weight: bold\",\"cls\":\"font-14\"}},{\"cid\":\"container\",\"id\":\"maxdiv\",\"layoutConfig\":{},\"userConfig\":{\"x\":770,\"y\":60,\"width\":18,\"height\":30,\"backgroundImage\":\"icon-resize-full\",\"cls\":\"maxdiv\",\"id\":\"maxdiv\",\"click\":\"maxdiv_click\"}},{\"cid\":\"vmdAceEditor\",\"id\":\"como_dataset\",\"layoutConfig\":{},\"userConfig\":{\"x\":0,\"y\":60,\"height\":190,\"anchor\":\"100%\",\"id\":\"como_dataset\",\"style\":\"border: 1px solid #eee;\"}}]},{\"cid\":\"panel\",\"id\":\"storeField_panel\",\"layoutConfig\":{},\"userConfig\":{\"id\":\"storeField_panel\",\"layout\":\"absolute\",\"header\":true,\"title\":\"选择字段来源于哪个数据集\"},\"cn\":[{\"cid\":\"vmdCombo\",\"id\":\"storeField_combo\",\"layoutConfig\":{},\"userConfig\":{\"x\":50,\"y\":10,\"id\":\"storeField_combo\",\"afterrender\":\"storeField_combo_afterrender\",\"beforerender\":\"storeField_combo_beforerender\"}},{\"cid\":\"label\",\"id\":\"label2\",\"layoutConfig\":{},\"userConfig\":{\"x\":10,\"y\":20,\"text\":\"数据集:\",\"height\":20}},{\"cid\":\"checkbox\",\"id\":\"field_multi\",\"layoutConfig\":{},\"userConfig\":{\"x\":210,\"y\":15,\"boxLabel\":\"下拉多选\",\"id\":\"field_multi\"}}]}]}]},{\"cid\":\"panel\",\"id\":\"panel2\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"west\",\"width\":179,\"style\":\"\",\"split\":true,\"animFloat\":false,\"collapsible\":false,\"frame\":false,\"hideCollapseTool\":false,\"floatable\":true,\"collapseMode\":\"mini\",\"hidden\":false,\"cmargins\":\"\",\"border\":true,\"header\":false,\"layout\":\"border\"},\"cn\":[{\"cid\":\"panel\",\"id\":\"panel4\",\"layoutConfig\":{},\"userConfig\":{\"region\":\"center\",\"header\":false,\"border\":false,\"layout\":\"fit\"},\"cn\":[{\"cid\":\"vmdDataView\",\"id\":\"hwDataView\",\"layoutConfig\":{},\"userConfig\":{\"tpl\":\"<ul>    <tpl for=\\\".\\\">        <li class=\\\"info\\\" style=\\\"line-height:30px;padding-left:5px\\\">            <h4>{id}{[values.desc?('('+values.desc+')'):'']}</h4> </li>    </tpl></ul>\",\"data\":\"var data = [{    \\\"id\\\": 'ksrq',    \\\"desc\\\": \\\"开始日期\\\",}, {    \\\"id\\\": 'jsrq',    \\\"desc\\\": \\\"结束日期\\\"}];return data;\",\"width\":\"\",\"afterrender\":\"hwDataView_afterrender\",\"store\":\"\",\"click\":\"hwDataView_click\",\"cls\":\"code\"}}]},{\"cid\":\"panel\",\"id\":\"panel5\",\"layoutConfig\":{\"align\":\"middle\",\"pack\":\"center\"},\"userConfig\":{\"region\":\"north\",\"unstyled\":false,\"frame\":false,\"border\":false,\"header\":false,\"height\":43,\"layout\":\"hbox\",\"bodyStyle\":\"border-bottom: 1px solid #99bbe8\"},\"cn\":[{\"cid\":\"vmdButton\",\"id\":\"button2\",\"layoutConfig\":{},\"userConfig\":{\"margins\":\"0 10\",\"text\":\"新建\",\"icon\":\"edit-outline\",\"click\":\"button2_click\"}},{\"cid\":\"vmdButton\",\"id\":\"button3\",\"layoutConfig\":{},\"userConfig\":{\"text\":\"删除\",\"type\":\"(none)\",\"icon\":\"delete\",\"click\":\"button3_click\"}}]}]},{\"cid\":\"panel\",\"id\":\"panel3\",\"layoutConfig\":{\"align\":\"middle\",\"pack\":\"center\"},\"userConfig\":{\"region\":\"south\",\"border\":false,\"header\":false,\"height\":40,\"layout\":\"hbox\",\"collapseMode\":\"standard\",\"frame\":false},\"cn\":[{\"cid\":\"vmdButton\",\"id\":\"button\",\"layoutConfig\":{},\"userConfig\":{\"margins\":\"0 20\",\"text\":\"保存\",\"type\":\"primary\",\"width\":80,\"click\":\"button_click\"}},{\"cid\":\"vmdButton\",\"id\":\"button1\",\"layoutConfig\":{},\"userConfig\":{\"text\":\"关闭\",\"width\":80,\"click\":\"button1_click\"}}]}]}]},{\"cid\":\"vmddataset\",\"id\":\"数据集\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdvariable\",\"id\":\"变量\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdsubviewport\",\"id\":\"SubView_Window\",\"layoutConfig\":{},\"userConfig\":{},\"cn\":[{\"cid\":\"vmdSubView\",\"id\":\"subView\",\"layoutConfig\":{},\"userConfig\":{\"width\":701,\"height\":549,\"layout\":\"fit\",\"autoScroll\":false,\"closeAction\":\"hide\",\"autoAdjust\":true,\"title\":\"下拉框内容(静态json结构)\",\"hide\":\"subView_hide\"},\"cn\":[{\"cid\":\"vmdAceEditor\",\"id\":\"MyAce\",\"layoutConfig\":{},\"userConfig\":{}}]}]}]}","vmdevents":"//扩展校验类型\nExt.apply(Ext.form.VTypes, {\n    definevar: function(val, field) {\n        return /^[a-z_A-Z]\\w+$/.test(val);\n    },\n    //输出错误的提示信息\n    definevarText: '输入字符须字母、数字、下划线,以字母开头',\n    definevarMask: /[\\w]/i\n});\n//默认追加状态\nvar editorStatus = 'new';\nvar propStore = new Ext.data.JsonStore({\n    proxy: new Ext.data.MemoryProxy(),\n    fields: ['id', 'zhname', 'bindCmp', 'bindValue', 'isPublic', 'desc', 'uxcid', 'group', 'cmptype', 'cmpsettings', 'storesource','storefield_multi']\n});\nvar cmpStore = new Ext.data.JsonStore({\n    proxy: new Ext.data.MemoryProxy(),\n    fields: ['cmpId']\n});\nvar cmpPropStore = new Ext.data.JsonStore({\n    proxy: new Ext.data.MemoryProxy(),\n    fields: ['name']\n});\nvar storePropStore = new Ext.data.JsonStore({\n    proxy: new Ext.data.MemoryProxy(),\n    fields: ['text', 'value']\n});\nvar reqPropId = getUrlParam('id');\n//获取属性节点的数据\nvar data = parent.xds.vmd.getPropsData();\npropStore.loadData(data);\n//获取组件树\nvar nodeList = [];\nvar getAllCmpsByNode = function(node, nodeList) {\n    Ext.each(node.childNodes, function(item) {\n        var obj = {\n            cmpId: item.id\n        };\n        nodeList.push(obj);\n        getAllCmpsByNode(item, nodeList);\n    })\n}\nvar getCmpCid = function(cmpId) {\n    var cid = \"\";\n    var cmp = parent.xds.inspector.nodeHash[cmpId];\n    if (cmp) {\n        cid = cmp.component.cid;\n    }\n    return cid;\n}\nvar viewRoot = parent.xds.inspector.root.childNodes[0];\ngetAllCmpsByNode(viewRoot, nodeList)\ncmpStore.loadData(nodeList);\nvar refreshPropNode = function() {\n    var data = Ext.pluck(propStore.data.items, 'data');\n    parent.xds.vmd.addPropNodes(data);\n}\n\nfunction refreshStoreProp() {\n    var list = getstorelist();\n    storePropStore.loadData(list);\n}\n\nfunction button1_click(sender) {\n    parent.propWin.close()\n}\n\nfunction hwDataView_afterrender(sender) {\n    //属性列表加载\n    sender.setStore(propStore)\n    //选中传来的属性\n    if (reqPropId) {\n        var num = propStore.find('id', reqPropId)\n        if (num != -1) {\n            // sender.select(num)\n            var node = this.getNode(num);\n            Ext.defer(function() {\n                node.click()\n            }, 50)\n        }\n    }\n}\n\nfunction showcmptype() {\n    cmptype.show();\n}\n\nfunction button2_click(sender) {\n    //新建\n    editorStatus = 'new';\n    hwDataView.clearSelections()\n    var rec = new propStore.recordType({\n        id: '',\n        zhname: '',\n        bindCmp: '',\n        bindValue: '',\n        desc: '',\n        isPublic: true,\n        cmptype: 'string',\n        cmpsettings: '',\n        storesource: '',\n        storefield_multi:''\n    });\n    // cmptype.hide();\n    storeField_panel.hide();\n    showcmptype();\n    combo_settings.hide();\n    MyForm.form.loadRecord(rec);\n    cmpPropStore.removeAll();\n}\n\nfunction button3_click(sender) {\n    \n    //删除\n    var selectData = hwDataView.getSelectedRecords();\n    if (selectData.length == 0) {\n        Ext.Msg.alert('提示', '请选择要删除的属性！')\n        return\n    }\n    var selectindex = hwDataView.getSelectedIndexes()[0];\n    if (selectindex > 0) selectindex = selectindex - 1;\n    else selectindex = 0;\n   \n    Ext.Msg.confirm('提示', '你确定要删除属性吗?', function(type) {\n        if (type == 'yes') {\n            propStore.remove(selectData)\n            refreshPropNode();\n            //刷新数据集字段\n            refreshStoreProp();\n            //选择节点\n            var selectnode = hwDataView.getNode(selectindex);\n            selectnode.click()\n          //  hwDataView_click(hwDataView, selectindex, selectnode);\n            vmd.alert('提示', '删除成功！');\n        }\n    })\n}\n\nfunction setDefinePropSettings(reqPropId) {\n    if (!reqPropId) {\n        // cmptype.hide();\n        showcmptype()\n        combo_settings.hide()\n        return\n    }\n    var num = propStore.find('id', reqPropId)\n    var rec = propStore.getAt(num);\n    var _cmptype, _cmpsettings, cmpsettings;\n    if (rec) {\n        _cmptype = rec.get('cmptype');\n        _cmpsettings = rec.get('cmpsettings');\n        cmpsettings = Ext.decode(_cmpsettings);\n        var index = cmpPropStore.find('name', rec.get('bindValue'));\n        if (_cmptype) {\n            cmptype.setValue(_cmptype);\n            if (_cmptype == 'combo') {\n                if (index != -1) {\n                    cmptype.hide();\n                    cmptype.setValue('string');\n                    combo_settings.hide();\n                    combo_multi.setValue(false);\n                    como_dataset.setValue('');\n                } else {\n                    showcmptype();\n                    combo_settings.show()\n                    combo_multi.setValue(cmpsettings.isMulti);\n                    como_dataset.setValue(cmpsettings.data);\n                }\n            } else if (_cmptype == 'storeField') {\n                storeField_combo.setValue(rec.get('storesource'))\n                field_multi.setValue(rec.get('storefield_multi'))\n            } else {\n                if (index != -1) {\n                    cmptype.hide();\n                } else {\n                    showcmptype();\n                }\n            }\n        } else {\n            cmptype.setValue(\"string\");\n            if (index != -1) {\n                cmptype.hide();\n            } else {\n                showcmptype();\n            }\n        }\n    }\n}\n\nfunction MyViewport_afterrender(sender) {\n    //数据加载完成？\n    parent.propWin && parent.propWin.loading.hide();\n    //自定义属性赋值\n    setDefinePropSettings(reqPropId);\n    refreshStoreProp();\n}\n\nfunction checkpropid(value) {\n    var invalidKeys = ['id', 'hidden', 'cls', 'disabled', 'style', 'width', 'height'];\n    if (invalidKeys.indexOf(value) != -1) {\n        return false\n    }\n    return true\n}\n\nfunction button_click(sender) {\n    //对属性id进行校验\n    var prop = MyForm.get('id');\n    var propvalue = prop.getValue()\n    if (!checkpropid(propvalue)) {\n        vmd.alert('提示', propvalue + '属性为关键词已内置，请重新填写属性名称！');\n        prop.setValue('');\n        return\n    }\n    //保存\n    var form = MyForm.getForm();\n    var values = form.getValues();\n    var id = values.id;\n    var num;\n    if (form.isValid()) {\n        values.bindCmp = Ext.getCmp('bindCmp').getValue();\n        values.bindValue = Ext.getCmp('bindValue').getValue() || Ext.getCmp('bindValue').getText();\n        //增加校验\n        if (values.bindCmp && !values.bindValue) {\n            vmd.alert('提示', '请选择或输入绑定属性')\n            return\n        }\n        if (!values.bindCmp && values.bindValue) {\n            vmd.alert('提示', '请选择要绑定的组件')\n            return\n        }\n        values.uxcid = getCmpCid(values.bindCmp);\n        values.cmptype = cmptype.getValue();\n        var cmpsettings = {\n            isMulti: combo_multi.getValue(),\n            data: como_dataset.getValue()\n        }\n        values.cmpsettings = Ext.encode(cmpsettings);\n        values.storesource = storeField_combo.getValue();\n        values.storefield_multi=field_multi.getValue();\n        if (values.uxcid) {\n            var uxconfigs = parent.xds.Registry.all.map[values.uxcid].prototype.configs;\n            var bindvalue = uxconfigs.get(values.bindValue);\n            if (bindvalue) {\n                if (bindvalue.edConfig && bindvalue.edConfig.type == 'storeField') {\n                    values.storesource = storeField_combo.getValue() || 'store';\n                    values.cmptype = 'storeField';\n                } else {\n                    values.storesource = '';\n                    values.cmptype = 'string';\n                }\n            }\n        }\n        delete values.dhxcombo\n        delete values.dhxcombo_new_value\n        delete values.field_multi\n        if (editorStatus == 'new') {\n            num = propStore.find('id', id)\n            var rec = new propStore.recordType(values);\n            if (num != -1) {\n                Ext.Msg.alert('提示', '名称为' + id + '的属性已存在，请修改属性名称！');\n                return;\n            }\n            propStore.add(rec);\n            // vmd.alert('提示', '添加成功！');\n            \n            //选中最后一条\n           var index= propStore.indexOf(rec);\n           var node=hwDataView.getNode(index);\n           node.click();\n        } else {\n            //编辑状态\n            num = propStore.find('id', hwDataView.activeId)\n            // rec.store=propStore;\n            var rec = propStore.getAt(num);\n            if (rec)\n                propStore.reader.update(rec, values)\n            //propStore.commitChanges()\n            // vmd.alert('提示', '修改成功！');\n            //propStore.commitChanges()\n        }\n        refreshPropNode();\n        var myMask = new Ext.LoadMask(Ext.getBody(), {\n            msg: \"正在保存中,请稍后...\",\n            msgCls: 'z-index:70000;'\n        });\n        myMask.show();\n        parent.xds && parent.xds.project.save(function() {\n            myMask.hide();\n        });\n        refreshStoreProp();\n    } else {\n        Ext.Msg.alert('提示', '请检查必填项！')\n    }\n}\n\nfunction hwDataView_click(sender, index, node, e) {\n    editorStatus = 'edit';\n    var data = sender.getRecord(node).data;\n    var rec = new propStore.recordType(data);\n    sender.activeId = data.id;\n    MyForm.form.loadRecord(rec);\n    setDefinePropSettings(sender.activeId)\n    Ext.defer(function() {\n        checkStoreFieldIsShow()\n    }, 50)\n}\n\nfunction bindCmp_change(sender) {\n    //绑定组件的属性\n    var val = sender.getValue();\n    var cmp = parent.xds.inspector.nodeHash[val];\n    if (!cmp) return;\n    var configs = cmp.component.configs.items;\n    //过滤事件\n    var propArr = [];\n    Ext.each(configs, function(item) {\n        if (item.group != '事件' &&item.name!='id') {\n            var obj = {\n                name: item.name\n            }\n            propArr.push(obj);\n        }\n    })\n    cmpPropStore.loadData(propArr);\n}\n\nfunction checkStoreFieldIsShow() {\n    \n    var cid = getCmpCid(bindCmp.getValue());\n    if (cid) {\n        var configs = parent.xds.Registry.all.map[cid].prototype.configs;\n        var config = configs.get(bindValue.getValue());\n        if (config && config.edConfig && config.edConfig.type == 'storeField') {\n            storeField_panel.show();\n        } else {\n            storeField_panel.hide();\n        }\n    } else {\n      //  storeField_panel.hide();\n    }\n}\n\nfunction bindValue_change(sender) {\n    //判断输入的属性是不是在下拉列表中存在\n    var text = sender.getText();\n    var index;\n    if (text) {\n        index = cmpPropStore.find('name', text);\n        if (index < 0) {\n            showcmptype();\n            if (cmptype.getValue() == 'combo') combo_settings.show();\n        } else {\n            checkStoreFieldIsShow()\n            cmptype.hide();\n            combo_settings.hide();\n            combo_multi.setValue(false);\n            como_dataset.setValue('');\n        }\n    }\n}\n\nfunction MyViewport_beforerender(sender) {\n    //    cmptype.hidden = true;\n    storeField_panel.hidden = true;\n    combo_settings.hidden = true;\n}\n\nfunction cmptype_change(sender, checked) {\n    var val = sender.getValue();\n    if (val == 'combo') {\n        combo_settings.show();\n        storeField_panel.hide();\n    } else if (val == 'storeField') {\n        storeField_panel.show();\n        combo_settings.hide();\n        refreshStoreProp();\n    } else {\n        combo_settings.hide();\n        storeField_panel.hide();\n    }\n}\n\nfunction cmptype_afterrender(sender) {}\n\nfunction maxdiv_click(sender, e) {\n    subView.show()\n    MyAce.setValue(como_dataset.getValue())\n}\n\nfunction subView_hide(sender) {\n    como_dataset.setValue(MyAce.getValue())\n}\n\nfunction storeField_combo_afterrender(sender) {}\n\nfunction getstorelist() {\n    var list = [];\n    var proplist = Ext.pluck(hwDataView.store.data.items, 'data');\n    Ext.each(proplist, function(prop) {\n        var cid = prop.uxcid;\n        var bindprop = prop.bindValue;\n        if (prop.cmptype == 'store') list.push({\n            text: prop.id,\n            value: prop.id\n        })\n        else {\n            if (!cid) return;\n            var uxconfigs = parent.xds.Registry.all.map[cid].prototype.configs;\n            var storeconfig = uxconfigs.get(bindprop);\n            if (!storeconfig) return\n            if (storeconfig.edConfig && storeconfig.edConfig.type == 'store') list.push({\n                text: prop.id,\n                value: prop.id\n            })\n        }\n    })\n    return list;\n}\n\nfunction storeField_combo_beforerender(sender) {\n    storeField_combo.store = storePropStore;\n    storeField_combo.displayField = 'text';\n    storeField_combo.valueField = 'value';\n}","vmdcss":"li.info h4 {\n    cursor: pointer\n}\n.code{\n    \n    font:14px/normal 'Consolas';\n}\n\n.vmd-dataview ul li.info-hover {\n    background-color: #CEEBFE;\n\n}\n\n.vmd-dataview ul li.x-view-selected {\n    background-color:#20a0ff ;\n    color: #fff;\n}\n.maxdiv{\n    position: relative !important;\n    left: 0px !important;\n    right: 0;\n    float: right;\n    border:0px;\n    color: #20a0ff;\n    cursor: pointer;\n    font-size: 18px !important;\n    z-index:99;\n    \n}","vmdprops":"\"\"","type":"module","vmdresource":"{\"components\":[{\"cid\":\"vmdrescsss\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdresjss\",\"layoutConfig\":{},\"userConfig\":{}},{\"cid\":\"vmdresimgs\",\"layoutConfig\":{},\"userConfig\":{}}]}"}